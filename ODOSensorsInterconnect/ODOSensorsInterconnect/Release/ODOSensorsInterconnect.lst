
C:\Users\hayes\AppData\Local\Temp\VMBuilds\ODOSensorsInterconnect\teensy36\Release/ODOSensorsInterconnect.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 00 03 20 d1 01 00 00 f9 22 00 00 b1 22 00 00     ... ....."..."..
      10:	b1 22 00 00 b1 22 00 00 b1 22 00 00 b1 22 00 00     ."..."..."..."..
      20:	b1 22 00 00 b1 22 00 00 b1 22 00 00 f9 22 00 00     ."..."..."..."..
      30:	f9 22 00 00 b1 22 00 00 69 40 00 00 6d 40 00 00     ."..."..i@..m@..
      40:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      50:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      60:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      70:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      80:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      90:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      a0:	8d 1f 00 00 99 1f 00 00 f9 22 00 00 f9 22 00 00     ........."..."..
      b0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 e9 2d 00 00     ."..."..."...-..
      c0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      d0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      e0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
      f0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     100:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     110:	f9 22 00 00 a9 30 00 00 f9 22 00 00 f9 22 00 00     ."...0..."..."..
     120:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     130:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     140:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     150:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     160:	f9 22 00 00 f9 22 00 00 a5 1f 00 00 f9 22 00 00     ."..."......."..
     170:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     180:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     190:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     1a0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     1b0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..
     1c0:	f9 22 00 00 f9 22 00 00 f9 22 00 00 f9 22 00 00     ."..."..."..."..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f002 f88c 	bl	2300 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	4b56      	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	781a      	ldrb	r2, [r3, #0]
     20a:	0711      	lsls	r1, r2, #28
     20c:	d503      	bpl.n	216 <ResetHandler+0x46>
     20e:	781a      	ldrb	r2, [r3, #0]
     210:	f042 0208 	orr.w	r2, r2, #8
     214:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	4b53      	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	4953      	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	22aa      	movs	r2, #170	; 0xaa
     21c:	701a      	strb	r2, [r3, #0]
     21e:	4a53      	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	428b      	cmp	r3, r1
     224:	d204      	bcs.n	230 <ResetHandler+0x60>
     226:	f852 0f04 	ldr.w	r0, [r2, #4]!
     22a:	f843 0b04 	str.w	r0, [r3], #4
     22e:	e7f8      	b.n	222 <ResetHandler+0x52>
     230:	4b50      	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	4951      	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	2200      	movs	r2, #0
     236:	428b      	cmp	r3, r1
     238:	d202      	bcs.n	240 <ResetHandler+0x70>
     23a:	f843 2b04 	str.w	r2, [r3], #4
     23e:	e7fa      	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	494e      	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	4a4f      	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	2300      	movs	r3, #0
     246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     24a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     24e:	3301      	adds	r3, #1
     250:	2b74      	cmp	r3, #116	; 0x74
     252:	d1f8      	bne.n	246 <ResetHandler+0x76>
     254:	4b4b      	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2180      	movs	r1, #128	; 0x80
     25a:	f803 1b01 	strb.w	r1, [r3], #1
     25e:	4293      	cmp	r3, r2
     260:	d1fb      	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	4b4a      	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	4a45      	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	4b49      	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	228a      	movs	r2, #138	; 0x8a
     26c:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     272:	2224      	movs	r2, #36	; 0x24
     274:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	22a0      	movs	r2, #160	; 0xa0
     278:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	799a      	ldrb	r2, [r3, #6]
     27c:	0792      	lsls	r2, r2, #30
     27e:	d5fc      	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	799a      	ldrb	r2, [r3, #6]
     282:	06d4      	lsls	r4, r2, #27
     284:	d4fc      	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	4a43      	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	7993      	ldrb	r3, [r2, #6]
     28a:	f003 030c 	and.w	r3, r3, #12
     28e:	2b08      	cmp	r3, #8
     290:	d1fa      	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	4b41      	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	2260      	movs	r2, #96	; 0x60
     296:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	3302      	adds	r3, #2
     29a:	781a      	ldrb	r2, [r3, #0]
     29c:	2a80      	cmp	r2, #128	; 0x80
     29e:	d1fc      	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	2201      	movs	r2, #1
     2a4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	225d      	movs	r2, #93	; 0x5d
     2a8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	799a      	ldrb	r2, [r3, #6]
     2ac:	0690      	lsls	r0, r2, #26
     2ae:	d5fc      	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	7999      	ldrb	r1, [r3, #6]
     2b2:	4a38      	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	0649      	lsls	r1, r1, #25
     2b6:	d5fb      	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	4b38      	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	4939      	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	2100      	movs	r1, #0
     2c0:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	2320      	movs	r3, #32
     2c4:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	7993      	ldrb	r3, [r2, #6]
     2c8:	f003 030c 	and.w	r3, r3, #12
     2cc:	2b0c      	cmp	r3, #12
     2ce:	d1fa      	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	4b34      	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	4a35      	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	4a35      	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	4c35      	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	6813      	ldr	r3, [r2, #0]
     2dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2e0:	d103      	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	6023      	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2e8:	6013      	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f002 f93f 	bl	2584 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	6823      	ldr	r3, [r4, #0]
     308:	07da      	lsls	r2, r3, #31
     30a:	d505      	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	f002 f8c9 	bl	24a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	065b      	lsls	r3, r3, #25
     31e:	d509      	bpl.n	334 <ResetHandler+0x164>
     320:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	4b29      	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	6822      	ldr	r2, [r4, #0]
     326:	429a      	cmp	r2, r3
     328:	d104      	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	4825      	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	f002 f8ba 	bl	24a4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	2300      	movs	r3, #0
     332:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	f004 fe62 	bl	4ffc <__libc_init_array>

	startup_late_hook();
     338:	f001 ffe8 	bl	230c <startup_late_hook>
	main();
     33c:	f003 ff1e 	bl	417c <main>
     340:	e7fe      	b.n	340 <ResetHandler+0x170>
     342:	bf00      	nop
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4007d002 	.word	0x4007d002
     364:	4007e000 	.word	0x4007e000
     368:	1fff11cc 	.word	0x1fff11cc
     36c:	000061ec 	.word	0x000061ec
     370:	1fff0730 	.word	0x1fff0730
     374:	1fff11cc 	.word	0x1fff11cc
     378:	1fff14b0 	.word	0x1fff14b0
     37c:	1fff0200 	.word	0x1fff0200
     380:	00000000 	.word	0x00000000
     384:	e000e400 	.word	0xe000e400
     388:	e000e464 	.word	0xe000e464
     38c:	e000ed08 	.word	0xe000ed08
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	4007e001 	.word	0x4007e001
     39c:	40048044 	.word	0x40048044
     3a0:	02060000 	.word	0x02060000
     3a4:	40048004 	.word	0x40048004
     3a8:	000710c0 	.word	0x000710c0
     3ac:	4003d010 	.word	0x4003d010
     3b0:	4003d014 	.word	0x4003d014
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	604e0962 	.word	0x604e0962
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff11cc 	.word	0x1fff11cc
     42c:	00000000 	.word	0x00000000
     430:	000061f0 	.word	0x000061f0

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff11d0 	.word	0x1fff11d0
     460:	000061f0 	.word	0x000061f0
     464:	1fff11cc 	.word	0x1fff11cc
     468:	00000000 	.word	0x00000000

0000046c <sendDataToJetson(ODODataTransfer*, unsigned int)>:
    }
    SERIAL_PORT.print(abs(val));
}


void sendDataToJetson(ODODataTransfer * dfer, size_t dataSize) {
     46c:	b570      	push	{r4, r5, r6, lr}
     46e:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
    //define the buffer to store the message to be sent
    char msgBuf[BUFFER_SIZE];
    char* msgbufptr = msgBuf;
    
    //reset the buffer
    memset(msgbufptr, 0, BUFFER_SIZE);
     472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    }
    SERIAL_PORT.print(abs(val));
}


void sendDataToJetson(ODODataTransfer * dfer, size_t dataSize) {
     476:	4605      	mov	r5, r0
     478:	460c      	mov	r4, r1
    //define the buffer to store the message to be sent
    char msgBuf[BUFFER_SIZE];
    char* msgbufptr = msgBuf;
    
    //reset the buffer
    memset(msgbufptr, 0, BUFFER_SIZE);
     47a:	4668      	mov	r0, sp
     47c:	2100      	movs	r1, #0
     47e:	f005 f8a5 	bl	55cc <memset>

    memcpy(msgbufptr, msgStart, strlen(msgStart));
     482:	4b1c      	ldr	r3, [pc, #112]	; (4f4 <sendDataToJetson(ODODataTransfer*, unsigned int)+0x88>)
     484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     486:	466e      	mov	r6, sp
     488:	c607      	stmia	r6!, {r0, r1, r2}
     48a:	7033      	strb	r3, [r6, #0]
    msgbufptr += strlen(msgStart); //point to the next available location in the buffer


    ASCIIHEX tempASCII;

    for (unsigned int i = 0; i < dataSize; i++) {
     48c:	b374      	cbz	r4, 4ec <sendDataToJetson(ODODataTransfer*, unsigned int)+0x80>
     48e:	4628      	mov	r0, r5
     490:	192e      	adds	r6, r5, r4
     492:	466a      	mov	r2, sp

        tempASCII = hextoascii(*(ptr+i));
     494:	f810 3b01 	ldrb.w	r3, [r0], #1
    uint8_t msnibble = 0;
    uint8_t lsnibble = 0;
    ASCIIHEX returndata;

    lsnibble = (the_byte & 0x0F);
    msnibble = (the_byte >> 4);
     498:	111d      	asrs	r5, r3, #4
{
    uint8_t msnibble = 0;
    uint8_t lsnibble = 0;
    ASCIIHEX returndata;

    lsnibble = (the_byte & 0x0F);
     49a:	f003 030f 	and.w	r3, r3, #15
    msnibble = (the_byte >> 4);
    msnibble = (msnibble & 0x0F);

    if (lsnibble < 10)
     49e:	2b09      	cmp	r3, #9
    uint8_t msnibble = 0;
    uint8_t lsnibble = 0;
    ASCIIHEX returndata;

    lsnibble = (the_byte & 0x0F);
    msnibble = (the_byte >> 4);
     4a0:	b2e9      	uxtb	r1, r5
    msnibble = (msnibble & 0x0F);

    if (lsnibble < 10)
    {
        (returndata.lsc) = ('0' + lsnibble);
     4a2:	bf94      	ite	ls
     4a4:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
        (returndata.lsc) = ('A' - 10 + lsnibble);
     4a6:	3337      	addhi	r3, #55	; 0x37
    }

    if (msnibble < 10)
     4a8:	2d09      	cmp	r5, #9
    {
        (returndata.msc) = ('0' + msnibble);
     4aa:	bfd4      	ite	le
     4ac:	3130      	addle	r1, #48	; 0x30
    }
    else
    {
        (returndata.msc) = ('A' - 10 + msnibble);
     4ae:	3137      	addgt	r1, #55	; 0x37
    msgbufptr += strlen(msgStart); //point to the next available location in the buffer


    ASCIIHEX tempASCII;

    for (unsigned int i = 0; i < dataSize; i++) {
     4b0:	42b0      	cmp	r0, r6

        tempASCII = hextoascii(*(ptr+i));
        *msgbufptr = tempASCII.msc;
     4b2:	7351      	strb	r1, [r2, #13]
        msgbufptr++;
        *msgbufptr = tempASCII.lsc;
     4b4:	7393      	strb	r3, [r2, #14]
     4b6:	f102 0202 	add.w	r2, r2, #2
    msgbufptr += strlen(msgStart); //point to the next available location in the buffer


    ASCIIHEX tempASCII;

    for (unsigned int i = 0; i < dataSize; i++) {
     4ba:	d1eb      	bne.n	494 <sendDataToJetson(ODODataTransfer*, unsigned int)+0x28>
     4bc:	f10d 030d 	add.w	r3, sp, #13
     4c0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
        msgbufptr++;
        *msgbufptr = tempASCII.lsc;
        msgbufptr++;
    }

    memcpy(msgbufptr, msgEnd, strlen(msgEnd));
     4c4:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <sendDataToJetson(ODODataTransfer*, unsigned int)+0x8c>)
     4c6:	cb07      	ldmia	r3!, {r0, r1, r2}
     4c8:	881b      	ldrh	r3, [r3, #0]
     4ca:	81a3      	strh	r3, [r4, #12]
     4cc:	60a2      	str	r2, [r4, #8]
     4ce:	6020      	str	r0, [r4, #0]
     4d0:	6061      	str	r1, [r4, #4]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     4d2:	4668      	mov	r0, sp
     4d4:	f005 f8f4 	bl	56c0 <strlen>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
     4d8:	4601      	mov	r1, r0
     4da:	4668      	mov	r0, sp
     4dc:	f002 fb80 	bl	2be0 <serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4e0:	4806      	ldr	r0, [pc, #24]	; (4fc <sendDataToJetson(ODODataTransfer*, unsigned int)+0x90>)
     4e2:	f003 fe53 	bl	418c <Print::println()>

    Serial1.println(msgBuf); //Print to the serial port connected to Jetson
}
     4e6:	f50d 7d7a 	add.w	sp, sp, #1000	; 0x3e8
     4ea:	bd70      	pop	{r4, r5, r6, pc}
    
    //reset the buffer
    memset(msgbufptr, 0, BUFFER_SIZE);

    memcpy(msgbufptr, msgStart, strlen(msgStart));
    msgbufptr += strlen(msgStart); //point to the next available location in the buffer
     4ec:	f10d 040d 	add.w	r4, sp, #13
     4f0:	e7e8      	b.n	4c4 <sendDataToJetson(ODODataTransfer*, unsigned int)+0x58>
     4f2:	bf00      	nop
     4f4:	00005afc 	.word	0x00005afc
     4f8:	00005b0c 	.word	0x00005b0c
     4fc:	1fff08c0 	.word	0x1fff08c0

00000500 <fillSensorValues(IMUSensorValues*, ICM_20948_SPI*)>:
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
}

// function to copy sensor values into the structure instant
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
     500:	b538      	push	{r3, r4, r5, lr}
     502:	4604      	mov	r4, r0
    
    theSensorValue->Acc_X = sensor->accX();
     504:	4608      	mov	r0, r1
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
}

// function to copy sensor values into the structure instant
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
     506:	460d      	mov	r5, r1
    
    theSensorValue->Acc_X = sensor->accX();
     508:	f000 fc9c 	bl	e44 <ICM_20948::accX()>
    theSensorValue->Acc_Y = sensor->accY();
     50c:	4628      	mov	r0, r5
}

// function to copy sensor values into the structure instant
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
    
    theSensorValue->Acc_X = sensor->accX();
     50e:	ed84 0a00 	vstr	s0, [r4]
    theSensorValue->Acc_Y = sensor->accY();
     512:	f000 fc9b 	bl	e4c <ICM_20948::accY()>
    theSensorValue->Acc_Z = sensor->accZ();
     516:	4628      	mov	r0, r5

// function to copy sensor values into the structure instant
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
    
    theSensorValue->Acc_X = sensor->accX();
    theSensorValue->Acc_Y = sensor->accY();
     518:	ed84 0a01 	vstr	s0, [r4, #4]
    theSensorValue->Acc_Z = sensor->accZ();
     51c:	f000 fc9a 	bl	e54 <ICM_20948::accZ()>
    theSensorValue->Gyro_X = sensor->gyrX();
     520:	4628      	mov	r0, r5
// function to copy sensor values into the structure instant
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
    
    theSensorValue->Acc_X = sensor->accX();
    theSensorValue->Acc_Y = sensor->accY();
    theSensorValue->Acc_Z = sensor->accZ();
     522:	ed84 0a02 	vstr	s0, [r4, #8]
    theSensorValue->Gyro_X = sensor->gyrX();
     526:	f000 fcd9 	bl	edc <ICM_20948::gyrX()>
    theSensorValue->Gyro_Y = sensor->gyrY();
     52a:	4628      	mov	r0, r5
void fillSensorValues(IMUSensorValues* theSensorValue, ICM_20948_SPI* sensor) {
    
    theSensorValue->Acc_X = sensor->accX();
    theSensorValue->Acc_Y = sensor->accY();
    theSensorValue->Acc_Z = sensor->accZ();
    theSensorValue->Gyro_X = sensor->gyrX();
     52c:	ed84 0a03 	vstr	s0, [r4, #12]
    theSensorValue->Gyro_Y = sensor->gyrY();
     530:	f000 fcd8 	bl	ee4 <ICM_20948::gyrY()>
    theSensorValue->Gyro_Z = sensor->gyrZ();
     534:	4628      	mov	r0, r5
    
    theSensorValue->Acc_X = sensor->accX();
    theSensorValue->Acc_Y = sensor->accY();
    theSensorValue->Acc_Z = sensor->accZ();
    theSensorValue->Gyro_X = sensor->gyrX();
    theSensorValue->Gyro_Y = sensor->gyrY();
     536:	ed84 0a04 	vstr	s0, [r4, #16]
    theSensorValue->Gyro_Z = sensor->gyrZ();
     53a:	f000 fcd7 	bl	eec <ICM_20948::gyrZ()>
     53e:	ed84 0a05 	vstr	s0, [r4, #20]
     542:	bd38      	pop	{r3, r4, r5, pc}

00000544 <printFormattedFloat(float, unsigned char, unsigned char)>:

}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
     544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    float aval = abs(val);
     548:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
     54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (val < 0) {
     550:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    theSensorValue->Gyro_Z = sensor->gyrZ();

}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
     554:	ed2d 8b02 	vpush	{d8}
    float aval = abs(val);
     558:	bfd4      	ite	le
     55a:	eeb1 8a40 	vnegle.f32	s16, s0
     55e:	eeb0 8a40 	vmovgt.f32	s16, s0
    if (val < 0) {
     562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    theSensorValue->Gyro_Z = sensor->gyrZ();

}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
     566:	460f      	mov	r7, r1
     568:	eef0 8a40 	vmov.f32	s17, s0
     56c:	4605      	mov	r5, r0
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     56e:	f04f 0101 	mov.w	r1, #1
    float aval = abs(val);
    if (val < 0) {
     572:	d43e      	bmi.n	5f2 <printFormattedFloat(float, unsigned char, unsigned char)+0xae>
     574:	4824      	ldr	r0, [pc, #144]	; (608 <printFormattedFloat(float, unsigned char, unsigned char)+0xc4>)
     576:	f003 fc11 	bl	3d9c <usb_serial_write>
        SERIAL_PORT.print("-");
    }
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
     57a:	b33d      	cbz	r5, 5cc <printFormattedFloat(float, unsigned char, unsigned char)+0x88>
     57c:	1e6e      	subs	r6, r5, #1
     57e:	4634      	mov	r4, r6

}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
    float aval = abs(val);
     580:	f04f 0800 	mov.w	r8, #0
    }
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
     584:	45b0      	cmp	r8, r6
     586:	bfac      	ite	ge
     588:	2300      	movge	r3, #0
     58a:	2301      	movlt	r3, #1
        if (indi < (leading - 1)) {
            tenpow = 1;
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
     58c:	2c00      	cmp	r4, #0
     58e:	dd08      	ble.n	5a2 <printFormattedFloat(float, unsigned char, unsigned char)+0x5e>
     590:	2200      	movs	r2, #0
     592:	3201      	adds	r2, #1
     594:	b2d2      	uxtb	r2, r2
            tenpow *= 10;
     596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
            tenpow = 1;
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
     59a:	42a2      	cmp	r2, r4
            tenpow *= 10;
     59c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
            tenpow = 1;
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
     5a0:	dbf7      	blt.n	592 <printFormattedFloat(float, unsigned char, unsigned char)+0x4e>
            tenpow *= 10;
        }
        if (aval < tenpow) {
     5a2:	ee07 3a90 	vmov	s15, r3
     5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
     5aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
     5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5b2:	d50b      	bpl.n	5cc <printFormattedFloat(float, unsigned char, unsigned char)+0x88>
     5b4:	f108 0801 	add.w	r8, r8, #1
     5b8:	2101      	movs	r1, #1
     5ba:	4814      	ldr	r0, [pc, #80]	; (60c <printFormattedFloat(float, unsigned char, unsigned char)+0xc8>)
     5bc:	f003 fbee 	bl	3d9c <usb_serial_write>
        SERIAL_PORT.print("-");
    }
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
     5c0:	fa5f f388 	uxtb.w	r3, r8
     5c4:	429d      	cmp	r5, r3
     5c6:	f104 34ff 	add.w	r4, r4, #4294967295
     5ca:	d8db      	bhi.n	584 <printFormattedFloat(float, unsigned char, unsigned char)+0x40>
        }
        else {
            break;
        }
    }
    if (val < 0) {
     5cc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
     5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5d4:	d412      	bmi.n	5fc <printFormattedFloat(float, unsigned char, unsigned char)+0xb8>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     5d6:	ee18 0a90 	vmov	r0, s17
     5da:	f004 f9e5 	bl	49a8 <__aeabi_f2d>
        SERIAL_PORT.print(-val, decimals);
    }
    else {
        SERIAL_PORT.print(val, decimals);
    }
}
     5de:	ecbd 8b02 	vpop	{d8}
     5e2:	ec41 0b10 	vmov	d0, r0, r1
     5e6:	4639      	mov	r1, r7
     5e8:	4809      	ldr	r0, [pc, #36]	; (610 <printFormattedFloat(float, unsigned char, unsigned char)+0xcc>)
     5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     5ee:	f003 be1f 	b.w	4230 <Print::printFloat(double, unsigned char)>
     5f2:	4808      	ldr	r0, [pc, #32]	; (614 <printFormattedFloat(float, unsigned char, unsigned char)+0xd0>)
     5f4:	f003 fbd2 	bl	3d9c <usb_serial_write>
        SERIAL_PORT.print("-");
    }
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
     5f8:	2d00      	cmp	r5, #0
     5fa:	d1bf      	bne.n	57c <printFormattedFloat(float, unsigned char, unsigned char)+0x38>
     5fc:	eef1 7a68 	vneg.f32	s15, s17
     600:	ee17 0a90 	vmov	r0, s15
     604:	e7e9      	b.n	5da <printFormattedFloat(float, unsigned char, unsigned char)+0x96>
     606:	bf00      	nop
     608:	00005c6c 	.word	0x00005c6c
     60c:	00005af4 	.word	0x00005af4
     610:	1fff08d8 	.word	0x1fff08d8
     614:	00005af8 	.word	0x00005af8

00000618 <printScaledAGMT(ICM_20948_SPI*)>:
        SERIAL_PORT.print(val, decimals);
    }
}

#ifdef USE_SPI
void printScaledAGMT(ICM_20948_SPI* sensor) {
     618:	b538      	push	{r3, r4, r5, lr}
     61a:	2113      	movs	r1, #19
     61c:	4604      	mov	r4, r0
     61e:	483b      	ldr	r0, [pc, #236]	; (70c <printScaledAGMT(ICM_20948_SPI*)+0xf4>)
     620:	4d3b      	ldr	r5, [pc, #236]	; (710 <printScaledAGMT(ICM_20948_SPI*)+0xf8>)
     622:	f003 fbbb 	bl	3d9c <usb_serial_write>
#else
void printScaledAGMT(ICM_20948_I2C * sensor) {
#endif
    SERIAL_PORT.print("Scaled. Acc (mg) [ ");
    printFormattedFloat(sensor->accX(), 5, 2);
     626:	4620      	mov	r0, r4
     628:	f000 fc0c 	bl	e44 <ICM_20948::accX()>
     62c:	2102      	movs	r1, #2
     62e:	2005      	movs	r0, #5
     630:	f7ff ff88 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     634:	2102      	movs	r1, #2
     636:	4628      	mov	r0, r5
     638:	f003 fbb0 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->accY(), 5, 2);
     63c:	4620      	mov	r0, r4
     63e:	f000 fc05 	bl	e4c <ICM_20948::accY()>
     642:	2102      	movs	r1, #2
     644:	2005      	movs	r0, #5
     646:	f7ff ff7d 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     64a:	2102      	movs	r1, #2
     64c:	4628      	mov	r0, r5
     64e:	f003 fba5 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->accZ(), 5, 2);
     652:	4620      	mov	r0, r4
     654:	f000 fbfe 	bl	e54 <ICM_20948::accZ()>
     658:	2102      	movs	r1, #2
     65a:	2005      	movs	r0, #5
     65c:	f7ff ff72 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     660:	2110      	movs	r1, #16
     662:	482c      	ldr	r0, [pc, #176]	; (714 <printScaledAGMT(ICM_20948_SPI*)+0xfc>)
     664:	f003 fb9a 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(" ], Gyr (DPS) [ ");
    printFormattedFloat(sensor->gyrX(), 5, 2);
     668:	4620      	mov	r0, r4
     66a:	f000 fc37 	bl	edc <ICM_20948::gyrX()>
     66e:	2102      	movs	r1, #2
     670:	2005      	movs	r0, #5
     672:	f7ff ff67 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     676:	2102      	movs	r1, #2
     678:	4628      	mov	r0, r5
     67a:	f003 fb8f 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->gyrY(), 5, 2);
     67e:	4620      	mov	r0, r4
     680:	f000 fc30 	bl	ee4 <ICM_20948::gyrY()>
     684:	2102      	movs	r1, #2
     686:	2005      	movs	r0, #5
     688:	f7ff ff5c 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     68c:	2102      	movs	r1, #2
     68e:	4628      	mov	r0, r5
     690:	f003 fb84 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->gyrZ(), 5, 2);
     694:	4620      	mov	r0, r4
     696:	f000 fc29 	bl	eec <ICM_20948::gyrZ()>
     69a:	2102      	movs	r1, #2
     69c:	2005      	movs	r0, #5
     69e:	f7ff ff51 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     6a2:	210f      	movs	r1, #15
     6a4:	481c      	ldr	r0, [pc, #112]	; (718 <printScaledAGMT(ICM_20948_SPI*)+0x100>)
     6a6:	f003 fb79 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(" ], Mag (uT) [ ");
    printFormattedFloat(sensor->magX(), 5, 2);
     6aa:	4620      	mov	r0, r4
     6ac:	f000 fb60 	bl	d70 <ICM_20948::magX()>
     6b0:	2102      	movs	r1, #2
     6b2:	2005      	movs	r0, #5
     6b4:	f7ff ff46 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     6b8:	2102      	movs	r1, #2
     6ba:	4628      	mov	r0, r5
     6bc:	f003 fb6e 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->magY(), 5, 2);
     6c0:	4620      	mov	r0, r4
     6c2:	f000 fb63 	bl	d8c <ICM_20948::magY()>
     6c6:	2102      	movs	r1, #2
     6c8:	2005      	movs	r0, #5
     6ca:	f7ff ff3b 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     6ce:	2102      	movs	r1, #2
     6d0:	4628      	mov	r0, r5
     6d2:	f003 fb63 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->magZ(), 5, 2);
     6d6:	4620      	mov	r0, r4
     6d8:	f000 fb66 	bl	da8 <ICM_20948::magZ()>
     6dc:	2102      	movs	r1, #2
     6de:	2005      	movs	r0, #5
     6e0:	f7ff ff30 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     6e4:	210e      	movs	r1, #14
     6e6:	480d      	ldr	r0, [pc, #52]	; (71c <printScaledAGMT(ICM_20948_SPI*)+0x104>)
     6e8:	f003 fb58 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(" ], Tmp (C) [ ");
    printFormattedFloat(sensor->temp(), 5, 2);
     6ec:	4620      	mov	r0, r4
     6ee:	f000 fc01 	bl	ef4 <ICM_20948::temp()>
     6f2:	2102      	movs	r1, #2
     6f4:	2005      	movs	r0, #5
     6f6:	f7ff ff25 	bl	544 <printFormattedFloat(float, unsigned char, unsigned char)>
     6fa:	2102      	movs	r1, #2
     6fc:	4808      	ldr	r0, [pc, #32]	; (720 <printScaledAGMT(ICM_20948_SPI*)+0x108>)
     6fe:	f003 fb4d 	bl	3d9c <usb_serial_write>
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     702:	4808      	ldr	r0, [pc, #32]	; (724 <printScaledAGMT(ICM_20948_SPI*)+0x10c>)
}
     704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->magZ(), 5, 2);
    SERIAL_PORT.print(" ], Tmp (C) [ ");
    printFormattedFloat(sensor->temp(), 5, 2);
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     708:	f003 bd40 	b.w	418c <Print::println()>
     70c:	00005b54 	.word	0x00005b54
     710:	00005b28 	.word	0x00005b28
     714:	00005b68 	.word	0x00005b68
     718:	00005b7c 	.word	0x00005b7c
     71c:	00005b8c 	.word	0x00005b8c
     720:	00005b50 	.word	0x00005b50
     724:	1fff08d8 	.word	0x1fff08d8

00000728 <loop>:



}

void loop() {
     728:	b500      	push	{lr}


   // digitalWrite(CS_PIN_2, HIGH);
    if (myICM.dataReady()) {
     72a:	482b      	ldr	r0, [pc, #172]	; (7d8 <loop+0xb0>)



}

void loop() {
     72c:	b087      	sub	sp, #28


   // digitalWrite(CS_PIN_2, HIGH);
    if (myICM.dataReady()) {
     72e:	f000 fc03 	bl	f38 <ICM_20948::dataReady()>
     732:	b350      	cbz	r0, 78a <loop+0x62>
        myICM.getAGMT();                // The values are only updated when you call 'getAGMT'
     734:	4928      	ldr	r1, [pc, #160]	; (7d8 <loop+0xb0>)
     736:	4668      	mov	r0, sp
     738:	f000 fb06 	bl	d48 <ICM_20948::getAGMT()>
     73c:	2116      	movs	r1, #22
     73e:	4827      	ldr	r0, [pc, #156]	; (7dc <loop+0xb4>)
     740:	f003 fb2c 	bl	3d9c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     744:	4826      	ldr	r0, [pc, #152]	; (7e0 <loop+0xb8>)
     746:	f003 fd21 	bl	418c <Print::println()>
    //    printRawAGMT( myICM.agmt );     // Uncomment this to see the raw values, taken directly from the agmt structure

        SERIAL_PORT.println("Printing from Sensor 1");

        printScaledAGMT(&myICM);   // This function takes into account the scale settings from when the measurement was made to calculate the values with units
     74a:	4823      	ldr	r0, [pc, #140]	; (7d8 <loop+0xb0>)
     74c:	f7ff ff64 	bl	618 <printScaledAGMT(ICM_20948_SPI*)>
        fillSensorValues(&dataToSend.sensor_1, &myICM);
     750:	4921      	ldr	r1, [pc, #132]	; (7d8 <loop+0xb0>)
     752:	4824      	ldr	r0, [pc, #144]	; (7e4 <loop+0xbc>)
     754:	f7ff fed4 	bl	500 <fillSensorValues(IMUSensorValues*, ICM_20948_SPI*)>

        delay(30);
     758:	201e      	movs	r0, #30
     75a:	f001 fec1 	bl	24e0 <delay>
        delay(500);
    }


   // digitalWrite(CS_PIN, HIGH);
    if (myICM2.dataReady()) {
     75e:	4822      	ldr	r0, [pc, #136]	; (7e8 <loop+0xc0>)
     760:	f000 fbea 	bl	f38 <ICM_20948::dataReady()>
     764:	bb08      	cbnz	r0, 7aa <loop+0x82>
     766:	2112      	movs	r1, #18
     768:	4820      	ldr	r0, [pc, #128]	; (7ec <loop+0xc4>)
     76a:	f003 fb17 	bl	3d9c <usb_serial_write>
     76e:	481c      	ldr	r0, [pc, #112]	; (7e0 <loop+0xb8>)
     770:	f003 fd0c 	bl	418c <Print::println()>
        fillSensorValues(&dataToSend.sensor_2, &myICM2);
        delay(30);
    }
    else {
        SERIAL_PORT.println("Waiting for data 2");
        delay(500);
     774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     778:	f001 feb2 	bl	24e0 <delay>
    }


    // send the data through serial port
    sendDataToJetson(&dataToSend, sizeof(dataToSend));
     77c:	4819      	ldr	r0, [pc, #100]	; (7e4 <loop+0xbc>)
     77e:	2130      	movs	r1, #48	; 0x30
    //delay(500);

}
     780:	b007      	add	sp, #28
     782:	f85d eb04 	ldr.w	lr, [sp], #4
        delay(500);
    }


    // send the data through serial port
    sendDataToJetson(&dataToSend, sizeof(dataToSend));
     786:	f7ff be71 	b.w	46c <sendDataToJetson(ODODataTransfer*, unsigned int)>
     78a:	2110      	movs	r1, #16
     78c:	4818      	ldr	r0, [pc, #96]	; (7f0 <loop+0xc8>)
     78e:	f003 fb05 	bl	3d9c <usb_serial_write>
     792:	4813      	ldr	r0, [pc, #76]	; (7e0 <loop+0xb8>)
     794:	f003 fcfa 	bl	418c <Print::println()>

        delay(30);
    }
    else {
        SERIAL_PORT.println("Waiting for data");
        delay(500);
     798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     79c:	f001 fea0 	bl	24e0 <delay>
    }


   // digitalWrite(CS_PIN, HIGH);
    if (myICM2.dataReady()) {
     7a0:	4811      	ldr	r0, [pc, #68]	; (7e8 <loop+0xc0>)
     7a2:	f000 fbc9 	bl	f38 <ICM_20948::dataReady()>
     7a6:	2800      	cmp	r0, #0
     7a8:	d0dd      	beq.n	766 <loop+0x3e>
        myICM2.getAGMT();                // The values are only updated when you call 'getAGMT'
     7aa:	4668      	mov	r0, sp
     7ac:	490e      	ldr	r1, [pc, #56]	; (7e8 <loop+0xc0>)
     7ae:	f000 facb 	bl	d48 <ICM_20948::getAGMT()>
     7b2:	2116      	movs	r1, #22
     7b4:	480f      	ldr	r0, [pc, #60]	; (7f4 <loop+0xcc>)
     7b6:	f003 faf1 	bl	3d9c <usb_serial_write>
     7ba:	4809      	ldr	r0, [pc, #36]	; (7e0 <loop+0xb8>)
     7bc:	f003 fce6 	bl	418c <Print::println()>
       // printRawAGMT( myICM.agmt );     // Uncomment this to see the raw values, taken directly from the agmt structure

        SERIAL_PORT.println("Printing from Sensor 2");

        printScaledAGMT(&myICM2);   // This function takes into account the scale settings from when the measurement was made to calculate the values with units
     7c0:	4809      	ldr	r0, [pc, #36]	; (7e8 <loop+0xc0>)
     7c2:	f7ff ff29 	bl	618 <printScaledAGMT(ICM_20948_SPI*)>
        fillSensorValues(&dataToSend.sensor_2, &myICM2);
     7c6:	4908      	ldr	r1, [pc, #32]	; (7e8 <loop+0xc0>)
     7c8:	480b      	ldr	r0, [pc, #44]	; (7f8 <loop+0xd0>)
     7ca:	f7ff fe99 	bl	500 <fillSensorValues(IMUSensorValues*, ICM_20948_SPI*)>
        delay(30);
     7ce:	201e      	movs	r0, #30
     7d0:	f001 fe86 	bl	24e0 <delay>
     7d4:	e7d2      	b.n	77c <loop+0x54>
     7d6:	bf00      	nop
     7d8:	1fff1228 	.word	0x1fff1228
     7dc:	00005b9c 	.word	0x00005b9c
     7e0:	1fff08d8 	.word	0x1fff08d8
     7e4:	1fff1268 	.word	0x1fff1268
     7e8:	1fff11e8 	.word	0x1fff11e8
     7ec:	00005be0 	.word	0x00005be0
     7f0:	00005bb4 	.word	0x00005bb4
     7f4:	00005bc8 	.word	0x00005bc8
     7f8:	1fff1280 	.word	0x1fff1280

000007fc <_GLOBAL__sub_I_myICM>:
    {
        (returndata.msc) = ('A' - 10 + msnibble);
    }

    return returndata;
     7fc:	b508      	push	{r3, lr}
#define AD0_VAL   1     // The value of the last bit of the I2C address.
 // On the SparkFun 9DoF IMU breakout the default is 1, and when
 // the ADR jumper is closed the value becomes 0

#ifdef USE_SPI
ICM_20948_SPI myICM;  // If using SPI create an ICM_20948_SPI object
     7fe:	4804      	ldr	r0, [pc, #16]	; (810 <_GLOBAL__sub_I_myICM+0x14>)
     800:	f000 fc64 	bl	10cc <ICM_20948_SPI::ICM_20948_SPI()>
ICM_20948_SPI myICM2; 
     804:	4803      	ldr	r0, [pc, #12]	; (814 <_GLOBAL__sub_I_myICM+0x18>)
    {
        (returndata.msc) = ('A' - 10 + msnibble);
    }

    return returndata;
     806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 // On the SparkFun 9DoF IMU breakout the default is 1, and when
 // the ADR jumper is closed the value becomes 0

#ifdef USE_SPI
ICM_20948_SPI myICM;  // If using SPI create an ICM_20948_SPI object
ICM_20948_SPI myICM2; 
     80a:	f000 bc5f 	b.w	10cc <ICM_20948_SPI::ICM_20948_SPI()>
     80e:	bf00      	nop
     810:	1fff1228 	.word	0x1fff1228
     814:	1fff11e8 	.word	0x1fff11e8

00000818 <setup>:


ODODataTransfer dataToSend;


void setup() {
     818:	b538      	push	{r3, r4, r5, lr}
     81a:	4a3a      	ldr	r2, [pc, #232]	; (904 <setup+0xec>)
     81c:	493a      	ldr	r1, [pc, #232]	; (908 <setup+0xf0>)
     81e:	4d3b      	ldr	r5, [pc, #236]	; (90c <setup+0xf4>)
     820:	4c3b      	ldr	r4, [pc, #236]	; (910 <setup+0xf8>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     822:	7813      	ldrb	r3, [r2, #0]
     824:	2b00      	cmp	r3, #0
     826:	d0fc      	beq.n	822 <setup+0xa>
     828:	780b      	ldrb	r3, [r1, #0]
     82a:	07db      	lsls	r3, r3, #31
     82c:	d5f9      	bpl.n	822 <setup+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     82e:	682b      	ldr	r3, [r5, #0]
     830:	6820      	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     832:	1a1b      	subs	r3, r3, r0
     834:	2b0e      	cmp	r3, #14
     836:	d9f4      	bls.n	822 <setup+0xa>

    SERIAL_PORT.begin(115200);
    while (!SERIAL_PORT) {};

    Serial1.begin(115200);
     838:	4836      	ldr	r0, [pc, #216]	; (914 <setup+0xfc>)
     83a:	4d37      	ldr	r5, [pc, #220]	; (918 <setup+0x100>)
     83c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     840:	f003 fc2c 	bl	409c <HardwareSerial::begin(unsigned long)>
    while (!Serial1) {};


#ifdef USE_SPI
    SPI_PORT.begin(); // this will initialise the SPI port
     844:	4835      	ldr	r0, [pc, #212]	; (91c <setup+0x104>)
     846:	f001 fc5b 	bl	2100 <SPIClass::begin()>

    bool initialized = false;
    while (!initialized) {

#ifdef USE_SPI
        myICM.begin(CS_PIN, SPI_PORT);
     84a:	4b35      	ldr	r3, [pc, #212]	; (920 <setup+0x108>)
     84c:	4a33      	ldr	r2, [pc, #204]	; (91c <setup+0x104>)
     84e:	4832      	ldr	r0, [pc, #200]	; (918 <setup+0x100>)
     850:	2102      	movs	r1, #2
     852:	f000 fc41 	bl	10d8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     856:	2127      	movs	r1, #39	; 0x27
     858:	4832      	ldr	r0, [pc, #200]	; (924 <setup+0x10c>)
     85a:	f003 fa9f 	bl	3d9c <usb_serial_write>
#else
        myICM.begin(WIRE_PORT, AD0_VAL);
#endif

        SERIAL_PORT.print(F("Initialization of the sensor returned: "));
        SERIAL_PORT.println(myICM.statusString());
     85e:	2108      	movs	r1, #8
     860:	482d      	ldr	r0, [pc, #180]	; (918 <setup+0x100>)
     862:	f000 fb5b 	bl	f1c <ICM_20948::statusString(ICM_20948_Status_e)>
     866:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     868:	f004 ff2a 	bl	56c0 <strlen>
     86c:	4601      	mov	r1, r0
     86e:	4620      	mov	r0, r4
     870:	f003 fa94 	bl	3d9c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     874:	482c      	ldr	r0, [pc, #176]	; (928 <setup+0x110>)
     876:	f003 fc89 	bl	418c <Print::println()>
        if (myICM.status != ICM_20948_Stat_Ok) {
     87a:	7f2b      	ldrb	r3, [r5, #28]
     87c:	482b      	ldr	r0, [pc, #172]	; (92c <setup+0x114>)
     87e:	210f      	movs	r1, #15
     880:	b14b      	cbz	r3, 896 <setup+0x7e>
     882:	f003 fa8b 	bl	3d9c <usb_serial_write>
     886:	4828      	ldr	r0, [pc, #160]	; (928 <setup+0x110>)
     888:	f003 fc80 	bl	418c <Print::println()>
            SERIAL_PORT.println("Trying again...");
            delay(500);
     88c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     890:	f001 fe26 	bl	24e0 <delay>
     894:	e7d9      	b.n	84a <setup+0x32>
     896:	2114      	movs	r1, #20
     898:	4825      	ldr	r0, [pc, #148]	; (930 <setup+0x118>)
     89a:	4d26      	ldr	r5, [pc, #152]	; (934 <setup+0x11c>)
     89c:	f003 fa7e 	bl	3d9c <usb_serial_write>
     8a0:	4821      	ldr	r0, [pc, #132]	; (928 <setup+0x110>)
     8a2:	f003 fc73 	bl	418c <Print::println()>
    //initialising the second IMU
     initialized = false;
    while (!initialized) {

#ifdef USE_SPI
        myICM2.begin(CS_PIN_2, SPI_PORT);
     8a6:	4b1e      	ldr	r3, [pc, #120]	; (920 <setup+0x108>)
     8a8:	4a1c      	ldr	r2, [pc, #112]	; (91c <setup+0x104>)
     8aa:	4822      	ldr	r0, [pc, #136]	; (934 <setup+0x11c>)
     8ac:	2106      	movs	r1, #6
     8ae:	f000 fc13 	bl	10d8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>
     8b2:	2129      	movs	r1, #41	; 0x29
     8b4:	4820      	ldr	r0, [pc, #128]	; (938 <setup+0x120>)
     8b6:	f003 fa71 	bl	3d9c <usb_serial_write>
#else
        myICM.begin(WIRE_PORT, AD0_VAL);
#endif

        SERIAL_PORT.print(F("Initialization of the sensor 2 returned: "));
        SERIAL_PORT.println(myICM2.statusString());
     8ba:	2108      	movs	r1, #8
     8bc:	481d      	ldr	r0, [pc, #116]	; (934 <setup+0x11c>)
     8be:	f000 fb2d 	bl	f1c <ICM_20948::statusString(ICM_20948_Status_e)>
     8c2:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8c4:	f004 fefc 	bl	56c0 <strlen>
     8c8:	4601      	mov	r1, r0
     8ca:	4620      	mov	r0, r4
     8cc:	f003 fa66 	bl	3d9c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8d0:	4815      	ldr	r0, [pc, #84]	; (928 <setup+0x110>)
     8d2:	f003 fc5b 	bl	418c <Print::println()>
        if (myICM2.status != ICM_20948_Stat_Ok) {
     8d6:	7f2b      	ldrb	r3, [r5, #28]
     8d8:	4814      	ldr	r0, [pc, #80]	; (92c <setup+0x114>)
     8da:	210f      	movs	r1, #15
     8dc:	b14b      	cbz	r3, 8f2 <setup+0xda>
     8de:	f003 fa5d 	bl	3d9c <usb_serial_write>
     8e2:	4811      	ldr	r0, [pc, #68]	; (928 <setup+0x110>)
     8e4:	f003 fc52 	bl	418c <Print::println()>
            SERIAL_PORT.println("Trying again...");
            delay(500);
     8e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ec:	f001 fdf8 	bl	24e0 <delay>
     8f0:	e7d9      	b.n	8a6 <setup+0x8e>
     8f2:	2114      	movs	r1, #20
     8f4:	4811      	ldr	r0, [pc, #68]	; (93c <setup+0x124>)
     8f6:	f003 fa51 	bl	3d9c <usb_serial_write>
     8fa:	480b      	ldr	r0, [pc, #44]	; (928 <setup+0x110>)
    }




}
     8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     900:	f003 bc44 	b.w	418c <Print::println()>
     904:	1fff1418 	.word	0x1fff1418
     908:	1fff1430 	.word	0x1fff1430
     90c:	1fff129c 	.word	0x1fff129c
     910:	1fff14a8 	.word	0x1fff14a8
     914:	1fff08c0 	.word	0x1fff08c0
     918:	1fff1228 	.word	0x1fff1228
     91c:	1fff0874 	.word	0x1fff0874
     920:	006acfc0 	.word	0x006acfc0
     924:	00005bf4 	.word	0x00005bf4
     928:	1fff08d8 	.word	0x1fff08d8
     92c:	00005c1c 	.word	0x00005c1c
     930:	00005c2c 	.word	0x00005c2c
     934:	1fff11e8 	.word	0x1fff11e8
     938:	00005c44 	.word	0x00005c44
     93c:	00005c70 	.word	0x00005c70

00000940 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     940:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
     944:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
     948:	429a      	cmp	r2, r3
     94a:	d905      	bls.n	958 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     94c:	1c5a      	adds	r2, r3, #1
     94e:	4403      	add	r3, r0
     950:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
     954:	7e18      	ldrb	r0, [r3, #24]
     956:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     958:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
     95c:	4770      	bx	lr
     95e:	bf00      	nop

00000960 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)>:
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
     960:	2b00      	cmp	r3, #0
     962:	f000 80d4 	beq.w	b0e <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ae>

    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
     966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi;
     96a:	6a1e      	ldr	r6, [r3, #32]
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
    if (_spi == NULL)
     96c:	2e00      	cmp	r6, #0
     96e:	f000 80ab 	beq.w	ac8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x168>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     972:	7af4      	ldrb	r4, [r6, #11]
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi;
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
     974:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
     978:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
     97c:	b304      	cbz	r4, 9c0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x60>
			__disable_irq();
     97e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     980:	7af3      	ldrb	r3, [r6, #11]
     982:	07dc      	lsls	r4, r3, #31
     984:	d506      	bpl.n	994 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     986:	4c6a      	ldr	r4, [pc, #424]	; (b30 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     988:	68f3      	ldr	r3, [r6, #12]
     98a:	6825      	ldr	r5, [r4, #0]
     98c:	402b      	ands	r3, r5
     98e:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     990:	6023      	str	r3, [r4, #0]
     992:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     994:	079d      	lsls	r5, r3, #30
     996:	d506      	bpl.n	9a6 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     998:	4c66      	ldr	r4, [pc, #408]	; (b34 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     99a:	6933      	ldr	r3, [r6, #16]
     99c:	6825      	ldr	r5, [r4, #0]
     99e:	402b      	ands	r3, r5
     9a0:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     9a2:	6023      	str	r3, [r4, #0]
     9a4:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     9a6:	075c      	lsls	r4, r3, #29
     9a8:	d506      	bpl.n	9b8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     9aa:	4c63      	ldr	r4, [pc, #396]	; (b38 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
     9ac:	6973      	ldr	r3, [r6, #20]
     9ae:	6825      	ldr	r5, [r4, #0]
     9b0:	402b      	ands	r3, r5
     9b2:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     9b4:	6023      	str	r3, [r4, #0]
     9b6:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     9b8:	071b      	lsls	r3, r3, #28
     9ba:	f100 80b1 	bmi.w	b20 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c0>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     9be:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     9c0:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     9c2:	68e3      	ldr	r3, [r4, #12]
     9c4:	4599      	cmp	r9, r3
     9c6:	d008      	beq.n	9da <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x7a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     9c8:	4b5c      	ldr	r3, [pc, #368]	; (b3c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     9ca:	6023      	str	r3, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     9cc:	4d5c      	ldr	r5, [pc, #368]	; (b40 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     9ce:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     9d2:	f049 4380 	orr.w	r3, r9, #1073741824	; 0x40000000
     9d6:	6123      	str	r3, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     9d8:	6025      	str	r5, [r4, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     9da:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
     9de:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     9e0:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     9e2:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9e6:	2b00      	cmp	r3, #0
     9e8:	dafc      	bge.n	9e4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     9ea:	7af3      	ldrb	r3, [r6, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     9ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     9ee:	b1b3      	cbz	r3, a1e <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
			if (interruptMasksUsed & 0x01) {
     9f0:	07dd      	lsls	r5, r3, #31
     9f2:	d503      	bpl.n	9fc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x9c>
				NVIC_ISER0 = interruptSave[0];
     9f4:	4b53      	ldr	r3, [pc, #332]	; (b44 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     9f6:	69f4      	ldr	r4, [r6, #28]
     9f8:	601c      	str	r4, [r3, #0]
     9fa:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     9fc:	079c      	lsls	r4, r3, #30
     9fe:	d503      	bpl.n	a08 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xa8>
				NVIC_ISER1 = interruptSave[1];
     a00:	4b51      	ldr	r3, [pc, #324]	; (b48 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     a02:	6a34      	ldr	r4, [r6, #32]
     a04:	601c      	str	r4, [r3, #0]
     a06:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     a08:	075d      	lsls	r5, r3, #29
     a0a:	d503      	bpl.n	a14 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xb4>
				NVIC_ISER2 = interruptSave[2];
     a0c:	4b4f      	ldr	r3, [pc, #316]	; (b4c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     a0e:	6a74      	ldr	r4, [r6, #36]	; 0x24
     a10:	601c      	str	r4, [r3, #0]
     a12:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     a14:	071c      	lsls	r4, r3, #28
     a16:	d502      	bpl.n	a1e <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
				NVIC_ISER3 = interruptSave[3];
     a18:	4b4d      	ldr	r3, [pc, #308]	; (b50 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f0>)
     a1a:	6ab4      	ldr	r4, [r6, #40]	; 0x28
     a1c:	601c      	str	r4, [r3, #0]
     a1e:	460d      	mov	r5, r1
     a20:	4682      	mov	sl, r0
    // 'Kickstart' the SPI hardware. This is a fairly high amount of overhead, but it guarantees that the lines will start in the correct states
    _spi->beginTransaction(spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    digitalWrite(cs, LOW);
     a22:	2100      	movs	r1, #0
     a24:	4638      	mov	r0, r7
     a26:	4690      	mov	r8, r2
     a28:	f001 fd4e 	bl	24c8 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     a2c:	7af3      	ldrb	r3, [r6, #11]
     a2e:	b1fb      	cbz	r3, a70 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x110>
			__disable_irq();
     a30:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     a32:	7af3      	ldrb	r3, [r6, #11]
     a34:	07d8      	lsls	r0, r3, #31
     a36:	d506      	bpl.n	a46 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     a38:	4a3d      	ldr	r2, [pc, #244]	; (b30 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     a3a:	68f3      	ldr	r3, [r6, #12]
     a3c:	6811      	ldr	r1, [r2, #0]
     a3e:	400b      	ands	r3, r1
     a40:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     a42:	6013      	str	r3, [r2, #0]
     a44:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     a46:	0799      	lsls	r1, r3, #30
     a48:	d506      	bpl.n	a58 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     a4a:	4a3a      	ldr	r2, [pc, #232]	; (b34 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     a4c:	6933      	ldr	r3, [r6, #16]
     a4e:	6811      	ldr	r1, [r2, #0]
     a50:	400b      	ands	r3, r1
     a52:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     a54:	6013      	str	r3, [r2, #0]
     a56:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     a58:	075a      	lsls	r2, r3, #29
     a5a:	d506      	bpl.n	a6a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     a5c:	4a36      	ldr	r2, [pc, #216]	; (b38 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
     a5e:	6973      	ldr	r3, [r6, #20]
     a60:	6811      	ldr	r1, [r2, #0]
     a62:	400b      	ands	r3, r1
     a64:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     a66:	6013      	str	r3, [r2, #0]
     a68:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     a6a:	071c      	lsls	r4, r3, #28
     a6c:	d451      	bmi.n	b12 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1b2>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     a6e:	b662      	cpsie	i
     a70:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     a72:	68e3      	ldr	r3, [r4, #12]
     a74:	4599      	cmp	r9, r3
     a76:	d008      	beq.n	a8a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x12a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     a78:	4a30      	ldr	r2, [pc, #192]	; (b3c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     a7a:	6022      	str	r2, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     a7c:	4b30      	ldr	r3, [pc, #192]	; (b40 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     a7e:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     a82:	f049 4280 	orr.w	r2, r9, #1073741824	; 0x40000000
     a86:	6122      	str	r2, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     a88:	6023      	str	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     a8a:	f04a 0080 	orr.w	r0, sl, #128	; 0x80
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     a92:	62e3      	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
     a94:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a98:	2b00      	cmp	r3, #0
     a9a:	dafc      	bge.n	a96 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x136>
		return port().POPR;
     a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    //   delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x80));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's stupid implementation
    for (uint32_t indi = 0; indi < len; indi++)
     a9e:	f1b8 0f00 	cmp.w	r8, #0
     aa2:	d014      	beq.n	ace <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x16e>
     aa4:	4629      	mov	r1, r5
     aa6:	eb05 0208 	add.w	r2, r5, r8
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     aaa:	2000      	movs	r0, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     aac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
     ab0:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     ab2:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     ab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ab6:	2b00      	cmp	r3, #0
     ab8:	dafc      	bge.n	ab4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x154>
		return port().POPR;
     aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    {
        *(buff + indi) = _spi->transfer(0x00);
     abc:	f801 3b01 	strb.w	r3, [r1], #1
    digitalWrite(cs, LOW);
    //   delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x80));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's stupid implementation
    for (uint32_t indi = 0; indi < len; indi++)
     ac0:	428a      	cmp	r2, r1
     ac2:	d004      	beq.n	ace <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x16e>
     ac4:	6834      	ldr	r4, [r6, #0]
     ac6:	e7f3      	b.n	ab0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x150>

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     ac8:	2003      	movs	r0, #3
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     ace:	7af3      	ldrb	r3, [r6, #11]
     ad0:	b1b3      	cbz	r3, b00 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a0>
			if (interruptMasksUsed & 0x01) {
     ad2:	07d8      	lsls	r0, r3, #31
     ad4:	d503      	bpl.n	ade <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x17e>
				NVIC_ISER0 = interruptSave[0];
     ad6:	4b1b      	ldr	r3, [pc, #108]	; (b44 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     ad8:	69f2      	ldr	r2, [r6, #28]
     ada:	601a      	str	r2, [r3, #0]
     adc:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     ade:	0799      	lsls	r1, r3, #30
     ae0:	d503      	bpl.n	aea <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x18a>
				NVIC_ISER1 = interruptSave[1];
     ae2:	4b19      	ldr	r3, [pc, #100]	; (b48 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     ae4:	6a32      	ldr	r2, [r6, #32]
     ae6:	601a      	str	r2, [r3, #0]
     ae8:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     aea:	075a      	lsls	r2, r3, #29
     aec:	d503      	bpl.n	af6 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x196>
				NVIC_ISER2 = interruptSave[2];
     aee:	4b17      	ldr	r3, [pc, #92]	; (b4c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     af0:	6a72      	ldr	r2, [r6, #36]	; 0x24
     af2:	601a      	str	r2, [r3, #0]
     af4:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     af6:	071b      	lsls	r3, r3, #28
     af8:	d502      	bpl.n	b00 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a0>
				NVIC_ISER3 = interruptSave[3];
     afa:	4b15      	ldr	r3, [pc, #84]	; (b50 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f0>)
     afc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     afe:	601a      	str	r2, [r3, #0]
    {
        *(buff + indi) = _spi->transfer(0x00);
    }
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);
     b00:	4638      	mov	r0, r7
     b02:	2101      	movs	r1, #1
     b04:	f001 fce0 	bl	24c8 <digitalWrite>

    return ICM_20948_Stat_Ok;
     b08:	2000      	movs	r0, #0
     b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     b0e:	2003      	movs	r0, #3
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     b10:	4770      	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     b12:	4a10      	ldr	r2, [pc, #64]	; (b54 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f4>)
     b14:	69b3      	ldr	r3, [r6, #24]
     b16:	6811      	ldr	r1, [r2, #0]
     b18:	400b      	ands	r3, r1
     b1a:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     b1c:	6013      	str	r3, [r2, #0]
     b1e:	e7a6      	b.n	a6e <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10e>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     b20:	4c0c      	ldr	r4, [pc, #48]	; (b54 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f4>)
     b22:	69b3      	ldr	r3, [r6, #24]
     b24:	6825      	ldr	r5, [r4, #0]
     b26:	402b      	ands	r3, r5
     b28:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     b2a:	6023      	str	r3, [r4, #0]
     b2c:	e747      	b.n	9be <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x5e>
     b2e:	bf00      	nop
     b30:	e000e180 	.word	0xe000e180
     b34:	e000e184 	.word	0xe000e184
     b38:	e000e188 	.word	0xe000e188
     b3c:	003f4001 	.word	0x003f4001
     b40:	803f0000 	.word	0x803f0000
     b44:	e000e100 	.word	0xe000e100
     b48:	e000e104 	.word	0xe000e104
     b4c:	e000e108 	.word	0xe000e108
     b50:	e000e10c 	.word	0xe000e10c
     b54:	e000e18c 	.word	0xe000e18c

00000b58 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)>:
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
     b58:	2b00      	cmp	r3, #0
     b5a:	f000 80d1 	beq.w	d00 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a8>
    }
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
     b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi; // Cast user field to ICM_20948_SPI type and extract the SPI interface pointer
     b62:	6a1e      	ldr	r6, [r3, #32]
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
    if (_spi == NULL)
     b64:	2e00      	cmp	r6, #0
     b66:	f000 80c8 	beq.w	cfa <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a2>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     b6a:	7af4      	ldrb	r4, [r6, #11]
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi; // Cast user field to ICM_20948_SPI type and extract the SPI interface pointer
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
     b6c:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
     b70:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
     b74:	b304      	cbz	r4, bb8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x60>
			__disable_irq();
     b76:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     b78:	7af3      	ldrb	r3, [r6, #11]
     b7a:	07dc      	lsls	r4, r3, #31
     b7c:	d506      	bpl.n	b8c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     b7e:	4c68      	ldr	r4, [pc, #416]	; (d20 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c8>)
     b80:	68f3      	ldr	r3, [r6, #12]
     b82:	6825      	ldr	r5, [r4, #0]
     b84:	402b      	ands	r3, r5
     b86:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     b88:	6023      	str	r3, [r4, #0]
     b8a:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     b8c:	079d      	lsls	r5, r3, #30
     b8e:	d506      	bpl.n	b9e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     b90:	4c64      	ldr	r4, [pc, #400]	; (d24 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1cc>)
     b92:	6933      	ldr	r3, [r6, #16]
     b94:	6825      	ldr	r5, [r4, #0]
     b96:	402b      	ands	r3, r5
     b98:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     b9a:	6023      	str	r3, [r4, #0]
     b9c:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     b9e:	075c      	lsls	r4, r3, #29
     ba0:	d506      	bpl.n	bb0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     ba2:	4c61      	ldr	r4, [pc, #388]	; (d28 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     ba4:	6973      	ldr	r3, [r6, #20]
     ba6:	6825      	ldr	r5, [r4, #0]
     ba8:	402b      	ands	r3, r5
     baa:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     bac:	6023      	str	r3, [r4, #0]
     bae:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     bb0:	071b      	lsls	r3, r3, #28
     bb2:	f100 80ae 	bmi.w	d12 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ba>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     bb6:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     bb8:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     bba:	68e3      	ldr	r3, [r4, #12]
     bbc:	4599      	cmp	r9, r3
     bbe:	d008      	beq.n	bd2 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x7a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     bc0:	4b5a      	ldr	r3, [pc, #360]	; (d2c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     bc2:	6023      	str	r3, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     bc4:	4d5a      	ldr	r5, [pc, #360]	; (d30 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     bc6:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     bca:	f049 4380 	orr.w	r3, r9, #1073741824	; 0x40000000
     bce:	6123      	str	r3, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     bd0:	6025      	str	r5, [r4, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     bd2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
     bd6:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     bd8:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     bda:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     bde:	2b00      	cmp	r3, #0
     be0:	dafc      	bge.n	bdc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     be2:	7af3      	ldrb	r3, [r6, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     be4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     be6:	b1b3      	cbz	r3, c16 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
			if (interruptMasksUsed & 0x01) {
     be8:	07dd      	lsls	r5, r3, #31
     bea:	d503      	bpl.n	bf4 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x9c>
				NVIC_ISER0 = interruptSave[0];
     bec:	4b51      	ldr	r3, [pc, #324]	; (d34 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     bee:	69f4      	ldr	r4, [r6, #28]
     bf0:	601c      	str	r4, [r3, #0]
     bf2:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     bf4:	079c      	lsls	r4, r3, #30
     bf6:	d503      	bpl.n	c00 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xa8>
				NVIC_ISER1 = interruptSave[1];
     bf8:	4b4f      	ldr	r3, [pc, #316]	; (d38 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
     bfa:	6a34      	ldr	r4, [r6, #32]
     bfc:	601c      	str	r4, [r3, #0]
     bfe:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     c00:	075d      	lsls	r5, r3, #29
     c02:	d503      	bpl.n	c0c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xb4>
				NVIC_ISER2 = interruptSave[2];
     c04:	4b4d      	ldr	r3, [pc, #308]	; (d3c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     c06:	6a74      	ldr	r4, [r6, #36]	; 0x24
     c08:	601c      	str	r4, [r3, #0]
     c0a:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     c0c:	071c      	lsls	r4, r3, #28
     c0e:	d502      	bpl.n	c16 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
				NVIC_ISER3 = interruptSave[3];
     c10:	4b4b      	ldr	r3, [pc, #300]	; (d40 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     c12:	6ab4      	ldr	r4, [r6, #40]	; 0x28
     c14:	601c      	str	r4, [r3, #0]
     c16:	460d      	mov	r5, r1
     c18:	4682      	mov	sl, r0
    // 'Kickstart' the SPI hardware. This is a fairly high amount of overhead, but it guarantees that the lines will start in the correct states even when sharing the SPI bus with devices that use other modes
    _spi->beginTransaction(spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    digitalWrite(cs, LOW);
     c1a:	2100      	movs	r1, #0
     c1c:	4638      	mov	r0, r7
     c1e:	4690      	mov	r8, r2
     c20:	f001 fc52 	bl	24c8 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     c24:	7af3      	ldrb	r3, [r6, #11]
     c26:	b1fb      	cbz	r3, c68 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x110>
			__disable_irq();
     c28:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     c2a:	7af3      	ldrb	r3, [r6, #11]
     c2c:	07d8      	lsls	r0, r3, #31
     c2e:	d506      	bpl.n	c3e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     c30:	4a3b      	ldr	r2, [pc, #236]	; (d20 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c8>)
     c32:	68f3      	ldr	r3, [r6, #12]
     c34:	6811      	ldr	r1, [r2, #0]
     c36:	400b      	ands	r3, r1
     c38:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     c3a:	6013      	str	r3, [r2, #0]
     c3c:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     c3e:	0799      	lsls	r1, r3, #30
     c40:	d506      	bpl.n	c50 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     c42:	4a38      	ldr	r2, [pc, #224]	; (d24 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1cc>)
     c44:	6933      	ldr	r3, [r6, #16]
     c46:	6811      	ldr	r1, [r2, #0]
     c48:	400b      	ands	r3, r1
     c4a:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     c4c:	6013      	str	r3, [r2, #0]
     c4e:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     c50:	075a      	lsls	r2, r3, #29
     c52:	d506      	bpl.n	c62 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     c54:	4a34      	ldr	r2, [pc, #208]	; (d28 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     c56:	6973      	ldr	r3, [r6, #20]
     c58:	6811      	ldr	r1, [r2, #0]
     c5a:	400b      	ands	r3, r1
     c5c:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     c5e:	6013      	str	r3, [r2, #0]
     c60:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     c62:	071c      	lsls	r4, r3, #28
     c64:	d44e      	bmi.n	d04 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ac>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     c66:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     c68:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     c6a:	68e3      	ldr	r3, [r4, #12]
     c6c:	4599      	cmp	r9, r3
     c6e:	d008      	beq.n	c82 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x12a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     c70:	4a2e      	ldr	r2, [pc, #184]	; (d2c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     c72:	6022      	str	r2, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     c74:	4b2e      	ldr	r3, [pc, #184]	; (d30 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     c76:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     c7a:	f049 4280 	orr.w	r2, r9, #1073741824	; 0x40000000
     c7e:	6122      	str	r2, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     c80:	6023      	str	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     c82:	f00a 007f 	and.w	r0, sl, #127	; 0x7f
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     c86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
     c8c:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     c90:	2b00      	cmp	r3, #0
     c92:	dafc      	bge.n	c8e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x136>
		return port().POPR;
     c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    // delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x00));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's poor implementation
    for (uint32_t indi = 0; indi < len; indi++)
     c96:	f1b8 0f00 	cmp.w	r8, #0
     c9a:	d00e      	beq.n	cba <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x162>
     c9c:	4629      	mov	r1, r5
     c9e:	eb05 0208 	add.w	r2, r5, r8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     ca2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    {
        _spi->transfer(*(data + indi));
     ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
     caa:	62e0      	str	r0, [r4, #44]	; 0x2c
		port().PUSHR = data;
     cac:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cb0:	2b00      	cmp	r3, #0
     cb2:	dafc      	bge.n	cae <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x156>
    digitalWrite(cs, LOW);
    // delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x00));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's poor implementation
    for (uint32_t indi = 0; indi < len; indi++)
     cb4:	428a      	cmp	r2, r1
		return port().POPR;
     cb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     cb8:	d1f5      	bne.n	ca6 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x14e>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     cba:	7af3      	ldrb	r3, [r6, #11]
     cbc:	b1b3      	cbz	r3, cec <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x194>
			if (interruptMasksUsed & 0x01) {
     cbe:	07d8      	lsls	r0, r3, #31
     cc0:	d503      	bpl.n	cca <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x172>
				NVIC_ISER0 = interruptSave[0];
     cc2:	4b1c      	ldr	r3, [pc, #112]	; (d34 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     cc4:	69f2      	ldr	r2, [r6, #28]
     cc6:	601a      	str	r2, [r3, #0]
     cc8:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     cca:	0799      	lsls	r1, r3, #30
     ccc:	d503      	bpl.n	cd6 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x17e>
				NVIC_ISER1 = interruptSave[1];
     cce:	4b1a      	ldr	r3, [pc, #104]	; (d38 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
     cd0:	6a32      	ldr	r2, [r6, #32]
     cd2:	601a      	str	r2, [r3, #0]
     cd4:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     cd6:	075a      	lsls	r2, r3, #29
     cd8:	d503      	bpl.n	ce2 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x18a>
				NVIC_ISER2 = interruptSave[2];
     cda:	4b18      	ldr	r3, [pc, #96]	; (d3c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     cdc:	6a72      	ldr	r2, [r6, #36]	; 0x24
     cde:	601a      	str	r2, [r3, #0]
     ce0:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     ce2:	071b      	lsls	r3, r3, #28
     ce4:	d502      	bpl.n	cec <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x194>
				NVIC_ISER3 = interruptSave[3];
     ce6:	4b16      	ldr	r3, [pc, #88]	; (d40 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     ce8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     cea:	601a      	str	r2, [r3, #0]
    {
        _spi->transfer(*(data + indi));
    }
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);
     cec:	4638      	mov	r0, r7
     cee:	2101      	movs	r1, #1
     cf0:	f001 fbea 	bl	24c8 <digitalWrite>

    return ICM_20948_Stat_Ok;
     cf4:	2000      	movs	r0, #0
     cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     cfa:	2003      	movs	r0, #3
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     d00:	2003      	movs	r0, #3
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     d02:	4770      	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     d04:	4a0f      	ldr	r2, [pc, #60]	; (d44 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     d06:	69b3      	ldr	r3, [r6, #24]
     d08:	6811      	ldr	r1, [r2, #0]
     d0a:	400b      	ands	r3, r1
     d0c:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     d0e:	6013      	str	r3, [r2, #0]
     d10:	e7a9      	b.n	c66 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10e>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     d12:	4c0c      	ldr	r4, [pc, #48]	; (d44 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     d14:	69b3      	ldr	r3, [r6, #24]
     d16:	6825      	ldr	r5, [r4, #0]
     d18:	402b      	ands	r3, r5
     d1a:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     d1c:	6023      	str	r3, [r4, #0]
     d1e:	e74a      	b.n	bb6 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x5e>
     d20:	e000e180 	.word	0xe000e180
     d24:	e000e184 	.word	0xe000e184
     d28:	e000e188 	.word	0xe000e188
     d2c:	003f4001 	.word	0x003f4001
     d30:	803f0000 	.word	0x803f0000
     d34:	e000e100 	.word	0xe000e100
     d38:	e000e104 	.word	0xe000e104
     d3c:	e000e108 	.word	0xe000e108
     d40:	e000e10c 	.word	0xe000e10c
     d44:	e000e18c 	.word	0xe000e18c

00000d48 <ICM_20948::getAGMT()>:
ICM_20948::ICM_20948()
{
}

ICM_20948_AGMT_t ICM_20948::getAGMT(void)
{
     d48:	b570      	push	{r4, r5, r6, lr}
     d4a:	460e      	mov	r6, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
     d4c:	1d0c      	adds	r4, r1, #4
ICM_20948::ICM_20948()
{
}

ICM_20948_AGMT_t ICM_20948::getAGMT(void)
{
     d4e:	4605      	mov	r5, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
     d50:	4621      	mov	r1, r4
     d52:	4630      	mov	r0, r6
     d54:	f000 ff5e 	bl	1c14 <ICM_20948_get_agmt>
     d58:	7730      	strb	r0, [r6, #28]

    return agmt;
     d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     d5c:	6028      	str	r0, [r5, #0]
     d5e:	6069      	str	r1, [r5, #4]
     d60:	cc03      	ldmia	r4!, {r0, r1}
     d62:	60aa      	str	r2, [r5, #8]
     d64:	6128      	str	r0, [r5, #16]
     d66:	60eb      	str	r3, [r5, #12]
     d68:	6169      	str	r1, [r5, #20]
}
     d6a:	4628      	mov	r0, r5
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	bf00      	nop

00000d70 <ICM_20948::magX()>:

float ICM_20948::magX(void)
{
    return getMagUT(agmt.mag.axes.x);
     d70:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
     d74:	eddf 7a04 	vldr	s15, [pc, #16]	; d88 <ICM_20948::magX()+0x18>
     d78:	ee00 3a10 	vmov	s0, r3
     d7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
     d80:	ee20 0a27 	vmul.f32	s0, s0, s15
     d84:	4770      	bx	lr
     d86:	bf00      	nop
     d88:	3e19999a 	.word	0x3e19999a

00000d8c <ICM_20948::magY()>:

float ICM_20948::magY(void)
{
    return getMagUT(agmt.mag.axes.y);
     d8c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
     d90:	eddf 7a04 	vldr	s15, [pc, #16]	; da4 <ICM_20948::magY()+0x18>
     d94:	ee00 3a10 	vmov	s0, r3
     d98:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
     d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
     da0:	4770      	bx	lr
     da2:	bf00      	nop
     da4:	3e19999a 	.word	0x3e19999a

00000da8 <ICM_20948::magZ()>:

float ICM_20948::magZ(void)
{
    return getMagUT(agmt.mag.axes.z);
     da8:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
     dac:	eddf 7a04 	vldr	s15, [pc, #16]	; dc0 <ICM_20948::magZ()+0x18>
     db0:	ee00 3a10 	vmov	s0, r3
     db4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
     db8:	ee20 0a27 	vmul.f32	s0, s0, s15
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	3e19999a 	.word	0x3e19999a

00000dc4 <ICM_20948::getAccMG(short)>:
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
    switch (agmt.fss.a)
     dc4:	7e03      	ldrb	r3, [r0, #24]
{
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
     dc6:	b082      	sub	sp, #8
    switch (agmt.fss.a)
     dc8:	f003 0303 	and.w	r3, r3, #3
{
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
     dcc:	9101      	str	r1, [sp, #4]
    switch (agmt.fss.a)
     dce:	2b03      	cmp	r3, #3
     dd0:	d82b      	bhi.n	e2a <ICM_20948::getAccMG(short)+0x66>
     dd2:	e8df f003 	tbb	[pc, r3]
     dd6:	1620      	.short	0x1620
     dd8:	020c      	.short	0x020c
        break;
    case 2:
        return (((float)axis_val) / 4.096);
        break;
    case 3:
        return (((float)axis_val) / 2.048);
     dda:	eddd 7a01 	vldr	s15, [sp, #4]
     dde:	ed9f 7a14 	vldr	s14, [pc, #80]	; e30 <ICM_20948::getAccMG(short)+0x6c>
     de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     de6:	ee87 0a87 	vdiv.f32	s0, s15, s14
        break;
    default:
        return 0;
        break;
    }
}
     dea:	b002      	add	sp, #8
     dec:	4770      	bx	lr
        break;
    case 1:
        return (((float)axis_val) / 8.192);
        break;
    case 2:
        return (((float)axis_val) / 4.096);
     dee:	eddd 7a01 	vldr	s15, [sp, #4]
     df2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     df6:	eddf 7a0f 	vldr	s15, [pc, #60]	; e34 <ICM_20948::getAccMG(short)+0x70>
     dfa:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     dfe:	b002      	add	sp, #8
     e00:	4770      	bx	lr
    {
    case 0:
        return (((float)axis_val) / 16.384);
        break;
    case 1:
        return (((float)axis_val) / 8.192);
     e02:	eddd 7a01 	vldr	s15, [sp, #4]
     e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     e0a:	eddf 7a0b 	vldr	s15, [pc, #44]	; e38 <ICM_20948::getAccMG(short)+0x74>
     e0e:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     e12:	b002      	add	sp, #8
     e14:	4770      	bx	lr
float ICM_20948::getAccMG(int16_t axis_val)
{
    switch (agmt.fss.a)
    {
    case 0:
        return (((float)axis_val) / 16.384);
     e16:	eddd 7a01 	vldr	s15, [sp, #4]
     e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     e1e:	eddf 7a07 	vldr	s15, [pc, #28]	; e3c <ICM_20948::getAccMG(short)+0x78>
     e22:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     e26:	b002      	add	sp, #8
     e28:	4770      	bx	lr
        break;
    case 3:
        return (((float)axis_val) / 2.048);
        break;
    default:
        return 0;
     e2a:	ed9f 0a05 	vldr	s0, [pc, #20]	; e40 <ICM_20948::getAccMG(short)+0x7c>
     e2e:	e7dc      	b.n	dea <ICM_20948::getAccMG(short)+0x26>
     e30:	4003126f 	.word	0x4003126f
     e34:	4083126f 	.word	0x4083126f
     e38:	4103126f 	.word	0x4103126f
     e3c:	4183126f 	.word	0x4183126f
     e40:	00000000 	.word	0x00000000

00000e44 <ICM_20948::accX()>:
    return (((float)axis_val) * 0.15);
}

float ICM_20948::accX(void)
{
    return getAccMG(agmt.acc.axes.x);
     e44:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
     e48:	f7ff bfbc 	b.w	dc4 <ICM_20948::getAccMG(short)>

00000e4c <ICM_20948::accY()>:
}

float ICM_20948::accY(void)
{
    return getAccMG(agmt.acc.axes.y);
     e4c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
     e50:	f7ff bfb8 	b.w	dc4 <ICM_20948::getAccMG(short)>

00000e54 <ICM_20948::accZ()>:
}

float ICM_20948::accZ(void)
{
    return getAccMG(agmt.acc.axes.z);
     e54:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
     e58:	f7ff bfb4 	b.w	dc4 <ICM_20948::getAccMG(short)>

00000e5c <ICM_20948::getGyrDPS(short)>:
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
    switch (agmt.fss.g)
     e5c:	7e03      	ldrb	r3, [r0, #24]
{
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
     e5e:	b082      	sub	sp, #8
    switch (agmt.fss.g)
     e60:	f3c3 0381 	ubfx	r3, r3, #2, #2
{
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
     e64:	9101      	str	r1, [sp, #4]
    switch (agmt.fss.g)
     e66:	2b03      	cmp	r3, #3
     e68:	d82b      	bhi.n	ec2 <ICM_20948::getGyrDPS(short)+0x66>
     e6a:	e8df f003 	tbb	[pc, r3]
     e6e:	1620      	.short	0x1620
     e70:	020c      	.short	0x020c
        break;
    case 2:
        return (((float)axis_val) / 32.8);
        break;
    case 3:
        return (((float)axis_val) / 16.4);
     e72:	eddd 7a01 	vldr	s15, [sp, #4]
     e76:	ed9f 7a14 	vldr	s14, [pc, #80]	; ec8 <ICM_20948::getGyrDPS(short)+0x6c>
     e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e7e:	ee87 0a87 	vdiv.f32	s0, s15, s14
        break;
    default:
        return 0;
        break;
    }
}
     e82:	b002      	add	sp, #8
     e84:	4770      	bx	lr
        break;
    case 1:
        return (((float)axis_val) / 65.5);
        break;
    case 2:
        return (((float)axis_val) / 32.8);
     e86:	eddd 7a01 	vldr	s15, [sp, #4]
     e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     e8e:	eddf 7a0f 	vldr	s15, [pc, #60]	; ecc <ICM_20948::getGyrDPS(short)+0x70>
     e92:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     e96:	b002      	add	sp, #8
     e98:	4770      	bx	lr
    {
    case 0:
        return (((float)axis_val) / 131);
        break;
    case 1:
        return (((float)axis_val) / 65.5);
     e9a:	eddd 7a01 	vldr	s15, [sp, #4]
     e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     ea2:	eddf 7a0b 	vldr	s15, [pc, #44]	; ed0 <ICM_20948::getGyrDPS(short)+0x74>
     ea6:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     eaa:	b002      	add	sp, #8
     eac:	4770      	bx	lr
float ICM_20948::getGyrDPS(int16_t axis_val)
{
    switch (agmt.fss.g)
    {
    case 0:
        return (((float)axis_val) / 131);
     eae:	eddd 7a01 	vldr	s15, [sp, #4]
     eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     eb6:	eddf 7a07 	vldr	s15, [pc, #28]	; ed4 <ICM_20948::getGyrDPS(short)+0x78>
     eba:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
     ebe:	b002      	add	sp, #8
     ec0:	4770      	bx	lr
        break;
    case 3:
        return (((float)axis_val) / 16.4);
        break;
    default:
        return 0;
     ec2:	ed9f 0a05 	vldr	s0, [pc, #20]	; ed8 <ICM_20948::getGyrDPS(short)+0x7c>
     ec6:	e7dc      	b.n	e82 <ICM_20948::getGyrDPS(short)+0x26>
     ec8:	41833333 	.word	0x41833333
     ecc:	42033333 	.word	0x42033333
     ed0:	42830000 	.word	0x42830000
     ed4:	43030000 	.word	0x43030000
     ed8:	00000000 	.word	0x00000000

00000edc <ICM_20948::gyrX()>:
    }
}

float ICM_20948::gyrX(void)
{
    return getGyrDPS(agmt.gyr.axes.x);
     edc:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
     ee0:	f7ff bfbc 	b.w	e5c <ICM_20948::getGyrDPS(short)>

00000ee4 <ICM_20948::gyrY()>:
}

float ICM_20948::gyrY(void)
{
    return getGyrDPS(agmt.gyr.axes.y);
     ee4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
     ee8:	f7ff bfb8 	b.w	e5c <ICM_20948::getGyrDPS(short)>

00000eec <ICM_20948::gyrZ()>:
}

float ICM_20948::gyrZ(void)
{
    return getGyrDPS(agmt.gyr.axes.z);
     eec:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
     ef0:	f7ff bfb4 	b.w	e5c <ICM_20948::getGyrDPS(short)>

00000ef4 <ICM_20948::temp()>:
    }
}

float ICM_20948::temp(void)
{
    return getTempC(agmt.tmp.val);
     ef4:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
     ef8:	eddf 6a07 	vldr	s13, [pc, #28]	; f18 <ICM_20948::temp()+0x24>
     efc:	ee07 3a90 	vmov	s15, r3
     f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     f04:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
     f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
     f0c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
}
     f10:	ee30 0a07 	vadd.f32	s0, s0, s14
     f14:	4770      	bx	lr
     f16:	bf00      	nop
     f18:	43a6ef5c 	.word	0x43a6ef5c

00000f1c <ICM_20948::statusString(ICM_20948_Status_e)>:
}

const char *ICM_20948::statusString(ICM_20948_Status_e stat)
{
    ICM_20948_Status_e val;
    if (stat == ICM_20948_Stat_NUM)
     f1c:	2908      	cmp	r1, #8
    {
        val = status;
     f1e:	bf08      	it	eq
     f20:	7f01      	ldrbeq	r1, [r0, #28]
     f22:	2907      	cmp	r1, #7
     f24:	bf9a      	itte	ls
     f26:	4b02      	ldrls	r3, [pc, #8]	; (f30 <ICM_20948::statusString(ICM_20948_Status_e)+0x14>)
     f28:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
    return (((float)val - 21) / 333.87) + 21;
}

const char *ICM_20948::statusString(ICM_20948_Status_e stat)
{
     f2c:	4801      	ldrhi	r0, [pc, #4]	; (f34 <ICM_20948::statusString(ICM_20948_Status_e)+0x18>)
    default:
        return "Unknown Status";
        break;
    }
    return "None";
}
     f2e:	4770      	bx	lr
     f30:	00005c88 	.word	0x00005c88
     f34:	00005ca8 	.word	0x00005ca8

00000f38 <ICM_20948::dataReady()>:
    status = ICM_20948_check_id(&_device);
    return status;
}

bool ICM_20948::dataReady(void)
{
     f38:	b510      	push	{r4, lr}
     f3a:	4604      	mov	r4, r0
    status = ICM_20948_data_ready(&_device);
     f3c:	f000 fb40 	bl	15c0 <ICM_20948_data_ready>
     f40:	4603      	mov	r3, r0
    if (status == ICM_20948_Stat_Ok)
    {
        return true;
    }
    return false;
}
     f42:	fab0 f080 	clz	r0, r0
    return status;
}

bool ICM_20948::dataReady(void)
{
    status = ICM_20948_data_ready(&_device);
     f46:	7723      	strb	r3, [r4, #28]
    if (status == ICM_20948_Stat_Ok)
    {
        return true;
    }
    return false;
}
     f48:	0940      	lsrs	r0, r0, #5
     f4a:	bd10      	pop	{r4, pc}

00000f4c <ICM_20948::magWhoIAm()>:

    return status;
}

ICM_20948_Status_e ICM_20948::magWhoIAm(void)
{
     f4c:	b530      	push	{r4, r5, lr}
     f4e:	b083      	sub	sp, #12
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
     f50:	f10d 0307 	add.w	r3, sp, #7
     f54:	2200      	movs	r2, #0
     f56:	210c      	movs	r1, #12

    return status;
}

ICM_20948_Status_e ICM_20948::magWhoIAm(void)
{
     f58:	4604      	mov	r4, r0
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
     f5a:	f000 fa5d 	bl	1418 <ICM_20948_i2c_master_single_r>
    return data;
     f5e:	f89d 5007 	ldrb.w	r5, [sp, #7]
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
     f62:	7720      	strb	r0, [r4, #28]
     f64:	f10d 0307 	add.w	r3, sp, #7
     f68:	4620      	mov	r0, r4
     f6a:	2201      	movs	r2, #1
     f6c:	210c      	movs	r1, #12
     f6e:	f000 fa53 	bl	1418 <ICM_20948_i2c_master_single_r>
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
     f72:	2d48      	cmp	r5, #72	; 0x48
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
    return data;
     f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
     f78:	d003      	beq.n	f82 <ICM_20948::magWhoIAm()+0x36>
        retval = ICM_20948_Stat_Ok;
        status = retval;
        return status;
    }
    retval = ICM_20948_Stat_WrongID;
    status = retval;
     f7a:	2004      	movs	r0, #4
     f7c:	7720      	strb	r0, [r4, #28]
    return status;
}
     f7e:	b003      	add	sp, #12
     f80:	bd30      	pop	{r4, r5, pc}
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
     f82:	2b09      	cmp	r3, #9
     f84:	d1f9      	bne.n	f7a <ICM_20948::magWhoIAm()+0x2e>
    ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

    uint8_t whoiam1, whoiam2;
    whoiam1 = readMag(AK09916_REG_WIA1);
    whoiam2 = readMag(AK09916_REG_WIA2);
    status = retval;
     f86:	2000      	movs	r0, #0
     f88:	7720      	strb	r0, [r4, #28]
     f8a:	e7f8      	b.n	f7e <ICM_20948::magWhoIAm()+0x32>

00000f8c <ICM_20948::startupMagnetometer()>:
    }
    return status;
}

ICM_20948_Status_e ICM_20948::startupMagnetometer(void)
{
     f8c:	b530      	push	{r4, r5, lr}
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
     f8e:	2100      	movs	r1, #0
    }
    return status;
}

ICM_20948_Status_e ICM_20948::startupMagnetometer(void)
{
     f90:	b089      	sub	sp, #36	; 0x24
     f92:	4605      	mov	r5, r0
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
     f94:	f000 fcfe 	bl	1994 <ICM_20948_i2c_master_passthrough>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterEnable(bool enable)
{
    status = ICM_20948_i2c_master_enable(&_device, enable);
     f98:	2101      	movs	r1, #1
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
     f9a:	7728      	strb	r0, [r5, #28]
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterEnable(bool enable)
{
    status = ICM_20948_i2c_master_enable(&_device, enable);
     f9c:	4628      	mov	r0, r5
     f9e:	f000 fd27 	bl	19f0 <ICM_20948_i2c_master_enable>
     fa2:	2405      	movs	r4, #5
     fa4:	7728      	strb	r0, [r5, #28]
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
    {
        //See if we can read the WhoIAm register correctly
        retval = magWhoIAm();
     fa6:	4628      	mov	r0, r5
     fa8:	f7ff ffd0 	bl	f4c <ICM_20948::magWhoIAm()>
        if (retval == ICM_20948_Stat_Ok)
     fac:	b158      	cbz	r0, fc6 <ICM_20948::startupMagnetometer()+0x3a>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterReset()
{
    status = ICM_20948_i2c_master_reset(&_device);
     fae:	4628      	mov	r0, r5
     fb0:	f000 fd80 	bl	1ab4 <ICM_20948_i2c_master_reset>
     fb4:	1e63      	subs	r3, r4, #1

    //After a ICM reset the Mag sensor may stop responding over the I2C master
    //Reset the Master I2C until it responds
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
     fb6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterReset()
{
    status = ICM_20948_i2c_master_reset(&_device);
     fba:	7728      	strb	r0, [r5, #28]

    //After a ICM reset the Mag sensor may stop responding over the I2C master
    //Reset the Master I2C until it responds
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
     fbc:	d1f3      	bne.n	fa6 <ICM_20948::startupMagnetometer()+0x1a>
        tries++;
    }

    if (tries == maxTries)
    {
        status = ICM_20948_Stat_WrongID;
     fbe:	2004      	movs	r0, #4
     fc0:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    return status;
}
     fc2:	b009      	add	sp, #36	; 0x24
     fc4:	bd30      	pop	{r4, r5, pc}
     fc6:	ab08      	add	r3, sp, #32

    //Serial.printf("Mag connected tries: %d\n", tries);

    //Set up magnetometer
    AK09916_CNTL2_Reg_t reg;
    reg.MODE = AK09916_mode_cont_100hz;
     fc8:	2208      	movs	r2, #8
     fca:	f803 2d01 	strb.w	r2, [r3, #-1]!
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterSingleW(uint8_t addr, uint8_t reg, uint8_t data)
{
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
     fce:	210c      	movs	r1, #12
     fd0:	2231      	movs	r2, #49	; 0x31
     fd2:	4628      	mov	r0, r5
     fd4:	f000 fa14 	bl	1400 <ICM_20948_i2c_master_single_w>
     fd8:	7728      	strb	r0, [r5, #28]

    //Set up magnetometer
    AK09916_CNTL2_Reg_t reg;
    reg.MODE = AK09916_mode_cont_100hz;
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
    if (retval != ICM_20948_Stat_Ok)
     fda:	2800      	cmp	r0, #0
     fdc:	d1f1      	bne.n	fc2 <ICM_20948::startupMagnetometer()+0x36>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterConfigureSlave(uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
     fde:	2301      	movs	r3, #1
     fe0:	2209      	movs	r2, #9
     fe2:	e88d 000c 	stmia.w	sp, {r2, r3}
     fe6:	9005      	str	r0, [sp, #20]
     fe8:	9004      	str	r0, [sp, #16]
     fea:	9003      	str	r0, [sp, #12]
     fec:	4601      	mov	r1, r0
     fee:	9302      	str	r3, [sp, #8]
     ff0:	220c      	movs	r2, #12
     ff2:	2310      	movs	r3, #16
     ff4:	4628      	mov	r0, r5
     ff6:	f000 fd89 	bl	1b0c <ICM_20948_i2c_master_configure_slave>
     ffa:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    return status;
}
     ffc:	b009      	add	sp, #36	; 0x24
     ffe:	bd30      	pop	{r4, r5, pc}

00001000 <ICM_20948::startupDefault()>:
}



ICM_20948_Status_e ICM_20948::startupDefault(void)
{
    1000:	b530      	push	{r4, r5, lr}
    1002:	b083      	sub	sp, #12
    1004:	4605      	mov	r5, r0
    return status;
}

ICM_20948_Status_e ICM_20948::checkID(void)
{
    status = ICM_20948_check_id(&_device);
    1006:	f000 fac9 	bl	159c <ICM_20948_check_id>
    100a:	4604      	mov	r4, r0
    100c:	7728      	strb	r0, [r5, #28]
{
    
    ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

    retval = checkID();
    if (retval != ICM_20948_Stat_Ok)
    100e:	b110      	cbz	r0, 1016 <ICM_20948::startupDefault()+0x16>
    }

    return status;


}
    1010:	4620      	mov	r0, r4
    1012:	b003      	add	sp, #12
    1014:	bd30      	pop	{r4, r5, pc}
    return status;
}

ICM_20948_Status_e ICM_20948::swReset(void)
{
    status = ICM_20948_sw_reset(&_device);
    1016:	4628      	mov	r0, r5
    1018:	f000 fa08 	bl	142c <ICM_20948_sw_reset>
    101c:	4604      	mov	r4, r0
    101e:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = swReset();
    if (retval != ICM_20948_Stat_Ok)
    1020:	2800      	cmp	r0, #0
    1022:	d1f5      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    {
        status = retval;
        return status;
    }
    delay(50);
    1024:	2032      	movs	r0, #50	; 0x32
    1026:	f001 fa5b 	bl	24e0 <delay>
    return status;
}

ICM_20948_Status_e ICM_20948::sleep(bool on)
{
    status = ICM_20948_sleep(&_device, on);
    102a:	4621      	mov	r1, r4
    102c:	4628      	mov	r0, r5
    102e:	f000 fa29 	bl	1484 <ICM_20948_sleep>
    1032:	4604      	mov	r4, r0
    1034:	7728      	strb	r0, [r5, #28]
        return status;
    }
    delay(50);

    retval = sleep(false);
    if (retval != ICM_20948_Stat_Ok)
    1036:	2800      	cmp	r0, #0
    1038:	d1ea      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::lowPower(bool on)
{
    status = ICM_20948_low_power(&_device, on);
    103a:	4601      	mov	r1, r0
    103c:	4628      	mov	r0, r5
    103e:	f000 fa57 	bl	14f0 <ICM_20948_low_power>
    1042:	4604      	mov	r4, r0
    1044:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = lowPower(false);
    if (retval != ICM_20948_Stat_Ok)
    1046:	2800      	cmp	r0, #0
    1048:	d1e2      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
}

// Internal Sensor Options
ICM_20948_Status_e ICM_20948::setSampleMode(uint8_t sensor_id_bm, uint8_t lp_config_cycle_mode)
{
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
    104a:	4602      	mov	r2, r0
    104c:	2103      	movs	r1, #3
    104e:	4628      	mov	r0, r5
    1050:	f000 fada 	bl	1608 <ICM_20948_set_sample_mode>
    1054:	4604      	mov	r4, r0
    1056:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
    if (retval != ICM_20948_Stat_Ok)
    1058:	2800      	cmp	r0, #0
    105a:	d1d9      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    105c:	f04f 0200 	mov.w	r2, #0
    1060:	f360 0201 	bfi	r2, r0, #0, #2
    1064:	f360 0283 	bfi	r2, r0, #2, #2
    return status;
}

ICM_20948_Status_e ICM_20948::setFullScale(uint8_t sensor_id_bm, ICM_20948_fss_t fss)
{
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
    1068:	2103      	movs	r1, #3
    106a:	4628      	mov	r0, r5
    106c:	f000 fb12 	bl	1694 <ICM_20948_set_full_scale>
    1070:	4604      	mov	r4, r0
    1072:	7728      	strb	r0, [r5, #28]

    ICM_20948_fss_t FSS;
    FSS.a = gpm2;   // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
    FSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
    if (retval != ICM_20948_Stat_Ok)
    1074:	2800      	cmp	r0, #0
    1076:	d1cb      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    1078:	2307      	movs	r3, #7
    107a:	f88d 3004 	strb.w	r3, [sp, #4]
    107e:	f88d 3005 	strb.w	r3, [sp, #5]
    return status;
}

ICM_20948_Status_e ICM_20948::setDLPFcfg(uint8_t sensor_id_bm, ICM_20948_dlpcfg_t cfg)
{
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
    1082:	9a01      	ldr	r2, [sp, #4]
    1084:	2103      	movs	r1, #3
    1086:	4628      	mov	r0, r5
    1088:	f000 fb84 	bl	1794 <ICM_20948_set_dlpf_cfg>
    108c:	4604      	mov	r4, r0
    108e:	7728      	strb	r0, [r5, #28]

    ICM_20948_dlpcfg_t dlpcfg;
    dlpcfg.a = acc_d473bw_n499bw;
    dlpcfg.g = gyr_d361bw4_n376bw5;
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
    if (retval != ICM_20948_Stat_Ok)
    1090:	2800      	cmp	r0, #0
    1092:	d1bd      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::enableDLPF(uint8_t sensor_id_bm, bool enable)
{
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
    1094:	4602      	mov	r2, r0
    1096:	2101      	movs	r1, #1
    1098:	4628      	mov	r0, r5
    109a:	f000 fbf1 	bl	1880 <ICM_20948_enable_dlpf>
    109e:	4604      	mov	r4, r0
    10a0:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = enableDLPF(ICM_20948_Internal_Acc, false);
    if (retval != ICM_20948_Stat_Ok)
    10a2:	2800      	cmp	r0, #0
    10a4:	d1b4      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::enableDLPF(uint8_t sensor_id_bm, bool enable)
{
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
    10a6:	4602      	mov	r2, r0
    10a8:	2102      	movs	r1, #2
    10aa:	4628      	mov	r0, r5
    10ac:	f000 fbe8 	bl	1880 <ICM_20948_enable_dlpf>
    10b0:	4604      	mov	r4, r0
    10b2:	7728      	strb	r0, [r5, #28]
    {
        status = retval;
        return status;
    }
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
    if (retval != ICM_20948_Stat_Ok)
    10b4:	2800      	cmp	r0, #0
    10b6:	d1ab      	bne.n	1010 <ICM_20948::startupDefault()+0x10>
    {
        status = retval;
        return status;
    }
    retval = startupMagnetometer();
    10b8:	4628      	mov	r0, r5
    10ba:	f7ff ff67 	bl	f8c <ICM_20948::startupMagnetometer()>
    if (retval != ICM_20948_Stat_Ok)
    10be:	b908      	cbnz	r0, 10c4 <ICM_20948::startupDefault()+0xc4>
    {
        status = retval;
        return status;
    }

    return status;
    10c0:	7f2c      	ldrb	r4, [r5, #28]
    10c2:	e7a5      	b.n	1010 <ICM_20948::startupDefault()+0x10>
        return status;
    }
    retval = startupMagnetometer();
    if (retval != ICM_20948_Stat_Ok)
    {
        status = retval;
    10c4:	7728      	strb	r0, [r5, #28]
        return status;
    10c6:	4604      	mov	r4, r0
    10c8:	e7a2      	b.n	1010 <ICM_20948::startupDefault()+0x10>
    10ca:	bf00      	nop

000010cc <ICM_20948_SPI::ICM_20948_SPI()>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    10cc:	4b01      	ldr	r3, [pc, #4]	; (10d4 <ICM_20948_SPI::ICM_20948_SPI()+0x8>)
    10ce:	6243      	str	r3, [r0, #36]	; 0x24

// SPISettings ICM_20948_SPI_DEFAULT_SETTINGS(ICM_20948_SPI_DEFAULT_FREQ, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);

ICM_20948_SPI::ICM_20948_SPI()
{
}
    10d0:	4770      	bx	lr
    10d2:	bf00      	nop
    10d4:	38002003 	.word	0x38002003

000010d8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>:

ICM_20948_Status_e ICM_20948_SPI::begin(uint8_t csPin, SPIClass &spiPort, uint32_t SPIFreq)
{
    10d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10da:	4d48      	ldr	r5, [pc, #288]	; (11fc <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x124>)
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    10dc:	6202      	str	r2, [r0, #32]
    10de:	42ab      	cmp	r3, r5
ICM_20948_SPI::ICM_20948_SPI()
{
}

ICM_20948_Status_e ICM_20948_SPI::begin(uint8_t csPin, SPIClass &spiPort, uint32_t SPIFreq)
{
    10e0:	4604      	mov	r4, r0
    10e2:	bf28      	it	cs
    10e4:	462b      	movcs	r3, r5
    10e6:	4f46      	ldr	r7, [pc, #280]	; (1200 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x128>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    10e8:	4846      	ldr	r0, [pc, #280]	; (1204 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x12c>)
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    10ea:	2500      	movs	r5, #0
    10ec:	e002      	b.n	10f4 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x1c>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    10ee:	2e17      	cmp	r6, #23
    10f0:	d008      	beq.n	1104 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x2c>
    10f2:	4635      	mov	r5, r6
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    10f4:	f837 2f02 	ldrh.w	r2, [r7, #2]!
    10f8:	fb90 f2f2 	sdiv	r2, r0, r2
    10fc:	429a      	cmp	r2, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    10fe:	f105 0601 	add.w	r6, r5, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1102:	d8f4      	bhi.n	10ee <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x16>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    1104:	4b40      	ldr	r3, [pc, #256]	; (1208 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x130>)
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    _cs = csPin;
    1106:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    110a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    110e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
    _cs = csPin;

    // Set pinmodes
    pinMode(_cs, OUTPUT);
    1112:	4608      	mov	r0, r1
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    1114:	6263      	str	r3, [r4, #36]	; 0x24
    _cs = csPin;

    // Set pinmodes
    pinMode(_cs, OUTPUT);
    1116:	2101      	movs	r1, #1
    1118:	f001 f9dc 	bl	24d4 <pinMode>

    // Set pins to default positions
    digitalWrite(_cs, HIGH);
    111c:	2101      	movs	r1, #1
    111e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1122:	f001 f9d1 	bl	24c8 <digitalWrite>

    // _spi->begin(); // Moved into user's sketch

    // 'Kickstart' the SPI hardware.
    _spi->beginTransaction(_spisettings);
    1126:	6a23      	ldr	r3, [r4, #32]
    1128:	6a62      	ldr	r2, [r4, #36]	; 0x24

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    112a:	7ad9      	ldrb	r1, [r3, #11]
    112c:	2900      	cmp	r1, #0
    112e:	d05c      	beq.n	11ea <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x112>
			__disable_irq();
    1130:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1132:	7ad9      	ldrb	r1, [r3, #11]
    1134:	07cd      	lsls	r5, r1, #31
    1136:	d506      	bpl.n	1146 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x6e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1138:	4834      	ldr	r0, [pc, #208]	; (120c <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x134>)
    113a:	68d9      	ldr	r1, [r3, #12]
    113c:	6805      	ldr	r5, [r0, #0]
    113e:	4029      	ands	r1, r5
    1140:	61d9      	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    1142:	6001      	str	r1, [r0, #0]
    1144:	7ad9      	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1146:	0788      	lsls	r0, r1, #30
    1148:	d506      	bpl.n	1158 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x80>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    114a:	4831      	ldr	r0, [pc, #196]	; (1210 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x138>)
    114c:	6919      	ldr	r1, [r3, #16]
    114e:	6805      	ldr	r5, [r0, #0]
    1150:	4029      	ands	r1, r5
    1152:	6219      	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    1154:	6001      	str	r1, [r0, #0]
    1156:	7ad9      	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1158:	074f      	lsls	r7, r1, #29
    115a:	d506      	bpl.n	116a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x92>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    115c:	482d      	ldr	r0, [pc, #180]	; (1214 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x13c>)
    115e:	6959      	ldr	r1, [r3, #20]
    1160:	6805      	ldr	r5, [r0, #0]
    1162:	4029      	ands	r1, r5
    1164:	6259      	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    1166:	6001      	str	r1, [r0, #0]
    1168:	7ad9      	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    116a:	070e      	lsls	r6, r1, #28
    116c:	d43f      	bmi.n	11ee <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x116>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    116e:	b662      	cpsie	i
    1170:	6a21      	ldr	r1, [r4, #32]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1172:	681b      	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    1174:	68d8      	ldr	r0, [r3, #12]
    1176:	4290      	cmp	r0, r2
    1178:	d007      	beq.n	118a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xb2>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    117a:	4d27      	ldr	r5, [pc, #156]	; (1218 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x140>)
    117c:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    117e:	4827      	ldr	r0, [pc, #156]	; (121c <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x144>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    1180:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1182:	f042 4580 	orr.w	r5, r2, #1073741824	; 0x40000000
    1186:	611d      	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1188:	6018      	str	r0, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    118a:	680a      	ldr	r2, [r1, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    118c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
    1190:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1192:	62d0      	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data;
    1194:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1196:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1198:	2b00      	cmp	r3, #0
    119a:	dafc      	bge.n	1196 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xbe>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    119c:	7acb      	ldrb	r3, [r1, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    119e:	6b92      	ldr	r2, [r2, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    11a0:	b1b3      	cbz	r3, 11d0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xf8>
			if (interruptMasksUsed & 0x01) {
    11a2:	07dd      	lsls	r5, r3, #31
    11a4:	d503      	bpl.n	11ae <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xd6>
				NVIC_ISER0 = interruptSave[0];
    11a6:	4b1e      	ldr	r3, [pc, #120]	; (1220 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x148>)
    11a8:	69ca      	ldr	r2, [r1, #28]
    11aa:	601a      	str	r2, [r3, #0]
    11ac:	7acb      	ldrb	r3, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    11ae:	0798      	lsls	r0, r3, #30
    11b0:	d503      	bpl.n	11ba <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xe2>
				NVIC_ISER1 = interruptSave[1];
    11b2:	4b1c      	ldr	r3, [pc, #112]	; (1224 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x14c>)
    11b4:	6a0a      	ldr	r2, [r1, #32]
    11b6:	601a      	str	r2, [r3, #0]
    11b8:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    11ba:	075a      	lsls	r2, r3, #29
    11bc:	d503      	bpl.n	11c6 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xee>
				NVIC_ISER2 = interruptSave[2];
    11be:	4b1a      	ldr	r3, [pc, #104]	; (1228 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x150>)
    11c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    11c2:	601a      	str	r2, [r3, #0]
    11c4:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    11c6:	071b      	lsls	r3, r3, #28
    11c8:	d502      	bpl.n	11d0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xf8>
				NVIC_ISER3 = interruptSave[3];
    11ca:	4b18      	ldr	r3, [pc, #96]	; (122c <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x154>)
    11cc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    11ce:	601a      	str	r2, [r3, #0]
    _spi->transfer(0x00);
    _spi->endTransaction();

    // Set up the serif
    _serif.write = ICM_20948_write_SPI;
    11d0:	4917      	ldr	r1, [pc, #92]	; (1230 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x158>)
    _serif.read = ICM_20948_read_SPI;
    11d2:	4a18      	ldr	r2, [pc, #96]	; (1234 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x15c>)
    _serif.user = (void *)this; // refer to yourself in the user field
    11d4:	63e4      	str	r4, [r4, #60]	; 0x3c

    // Link the serif
    _device._serif = &_serif;
    11d6:	f104 0334 	add.w	r3, r4, #52	; 0x34
    _spi->beginTransaction(_spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    // Set up the serif
    _serif.write = ICM_20948_write_SPI;
    11da:	6361      	str	r1, [r4, #52]	; 0x34
    _serif.read = ICM_20948_read_SPI;
    11dc:	63a2      	str	r2, [r4, #56]	; 0x38
    _serif.user = (void *)this; // refer to yourself in the user field

    // Link the serif
    _device._serif = &_serif;
    11de:	6023      	str	r3, [r4, #0]

    // Perform default startup
    status = startupDefault();
    11e0:	4620      	mov	r0, r4
    11e2:	f7ff ff0d 	bl	1000 <ICM_20948::startupDefault()>
    11e6:	7720      	strb	r0, [r4, #28]
    {
        return status;
    }

    return ICM_20948_Stat_Ok;
}
    11e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    11ea:	4619      	mov	r1, r3
    11ec:	e7c1      	b.n	1172 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x9a>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    11ee:	4812      	ldr	r0, [pc, #72]	; (1238 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x160>)
    11f0:	6999      	ldr	r1, [r3, #24]
    11f2:	6805      	ldr	r5, [r0, #0]
    11f4:	4029      	ands	r1, r5
    11f6:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    11f8:	6001      	str	r1, [r0, #0]
    11fa:	e7b8      	b.n	116e <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x96>
    11fc:	006acfc0 	.word	0x006acfc0
    1200:	00005dbe 	.word	0x00005dbe
    1204:	03938700 	.word	0x03938700
    1208:	00005e84 	.word	0x00005e84
    120c:	e000e180 	.word	0xe000e180
    1210:	e000e184 	.word	0xe000e184
    1214:	e000e188 	.word	0xe000e188
    1218:	003f4001 	.word	0x003f4001
    121c:	803f0000 	.word	0x803f0000
    1220:	e000e100 	.word	0xe000e100
    1224:	e000e104 	.word	0xe000e104
    1228:	e000e108 	.word	0xe000e108
    122c:	e000e10c 	.word	0xe000e10c
    1230:	00000b59 	.word	0x00000b59
    1234:	00000961 	.word	0x00000961
    1238:	e000e18c 	.word	0xe000e18c

0000123c <ICM_20948_i2c_master_slv4_txn>:
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1240:	b087      	sub	sp, #28
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1242:	f04f 0930 	mov.w	r9, #48	; 0x30
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    1246:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    124a:	f88d 2006 	strb.w	r2, [sp, #6]
	// Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	addr = (((Rw) ? 0x80 : 0x00) | addr);
    124e:	f1ba 0f00 	cmp.w	sl, #0
    1252:	bf0c      	ite	eq
    1254:	2200      	moveq	r2, #0
    1256:	f06f 027f 	mvnne.w	r2, #127	; 0x7f
    125a:	4311      	orrs	r1, r2
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    125c:	6802      	ldr	r2, [r0, #0]
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
	// Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	addr = (((Rw) ? 0x80 : 0x00) | addr);
    125e:	f88d 1007 	strb.w	r1, [sp, #7]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1262:	f88d 9012 	strb.w	r9, [sp, #18]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1266:	6817      	ldr	r7, [r2, #0]
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    1268:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
    126c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1270:	2f00      	cmp	r7, #0
    1272:	f000 809a 	beq.w	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
    1276:	4606      	mov	r6, r0
    1278:	4698      	mov	r8, r3
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    127a:	f10d 0112 	add.w	r1, sp, #18
    127e:	6893      	ldr	r3, [r2, #8]
    1280:	207f      	movs	r0, #127	; 0x7f
    1282:	2201      	movs	r2, #1
    1284:	47b8      	blx	r7
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1286:	6833      	ldr	r3, [r6, #0]
    1288:	681f      	ldr	r7, [r3, #0]
    128a:	2f00      	cmp	r7, #0
    128c:	f000 808d 	beq.w	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1290:	689b      	ldr	r3, [r3, #8]
    1292:	2201      	movs	r2, #1
    1294:	f10d 0107 	add.w	r1, sp, #7
    1298:	2013      	movs	r0, #19
    129a:	47b8      	blx	r7

	addr = (((Rw) ? 0x80 : 0x00) | addr);

	retval = ICM_20948_set_bank(pdev, 3);
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
	if (retval != ICM_20948_Stat_Ok)
    129c:	2800      	cmp	r0, #0
    129e:	f040 8085 	bne.w	13ac <ICM_20948_i2c_master_slv4_txn+0x170>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    12a2:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    12a4:	f88d 9013 	strb.w	r9, [sp, #19]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    12a8:	681f      	ldr	r7, [r3, #0]
    12aa:	2f00      	cmp	r7, #0
    12ac:	d07d      	beq.n	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    12ae:	689b      	ldr	r3, [r3, #8]
    12b0:	2201      	movs	r2, #1
    12b2:	f10d 0113 	add.w	r1, sp, #19
    12b6:	207f      	movs	r0, #127	; 0x7f
    12b8:	47b8      	blx	r7
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    12ba:	6833      	ldr	r3, [r6, #0]
    12bc:	681f      	ldr	r7, [r3, #0]
    12be:	2f00      	cmp	r7, #0
    12c0:	d073      	beq.n	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    12c2:	689b      	ldr	r3, [r3, #8]
    12c4:	2201      	movs	r2, #1
    12c6:	f10d 0106 	add.w	r1, sp, #6
    12ca:	2014      	movs	r0, #20
    12cc:	47b8      	blx	r7
		return retval;
	}

	retval = ICM_20948_set_bank(pdev, 3);
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
	if (retval != ICM_20948_Stat_Ok)
    12ce:	2800      	cmp	r0, #0
    12d0:	d16c      	bne.n	13ac <ICM_20948_i2c_master_slv4_txn+0x170>
	{
		return retval;
	}

	ICM_20948_I2C_SLV4_CTRL_t ctrl;
	ctrl.EN = 1;
    12d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	ctrl.INT_EN = false;
    12d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    12da:	f360 1386 	bfi	r3, r0, #6, #1
	ctrl.DLY = 0;
    12de:	f360 0304 	bfi	r3, r0, #0, #5
	ctrl.REG_DIS = !send_reg_addr;
    12e2:	f085 0501 	eor.w	r5, r5, #1
    12e6:	f365 1345 	bfi	r3, r5, #5, #1

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    12ea:	b2a4      	uxth	r4, r4

	ICM_20948_I2C_SLV4_CTRL_t ctrl;
	ctrl.EN = 1;
	ctrl.INT_EN = false;
	ctrl.DLY = 0;
	ctrl.REG_DIS = !send_reg_addr;
    12ec:	f88d 300c 	strb.w	r3, [sp, #12]

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    12f0:	2c00      	cmp	r4, #0
    12f2:	d05b      	beq.n	13ac <ICM_20948_i2c_master_slv4_txn+0x170>
    12f4:	3c01      	subs	r4, #1
    12f6:	fa1f fb84 	uxth.w	fp, r4
    12fa:	f10b 0b01 	add.w	fp, fp, #1
    12fe:	44c3      	add	fp, r8
    1300:	4607      	mov	r7, r0
	{
		if (!Rw)
    1302:	f1ba 0f00 	cmp.w	sl, #0
    1306:	d115      	bne.n	1334 <ICM_20948_i2c_master_slv4_txn+0xf8>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1308:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    130a:	f88d 9014 	strb.w	r9, [sp, #20]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    130e:	681c      	ldr	r4, [r3, #0]
    1310:	2c00      	cmp	r4, #0
    1312:	d04a      	beq.n	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1314:	689b      	ldr	r3, [r3, #8]
    1316:	2201      	movs	r2, #1
    1318:	a905      	add	r1, sp, #20
    131a:	207f      	movs	r0, #127	; 0x7f
    131c:	47a0      	blx	r4
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    131e:	6833      	ldr	r3, [r6, #0]
    1320:	681c      	ldr	r4, [r3, #0]
    1322:	2c00      	cmp	r4, #0
    1324:	d041      	beq.n	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1326:	689b      	ldr	r3, [r3, #8]
    1328:	2201      	movs	r2, #1
    132a:	4641      	mov	r1, r8
    132c:	2016      	movs	r0, #22
    132e:	47a0      	blx	r4
	{
		if (!Rw)
		{
			retval = ICM_20948_set_bank(pdev, 3);
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
			if (retval != ICM_20948_Stat_Ok)
    1330:	2800      	cmp	r0, #0
    1332:	d13b      	bne.n	13ac <ICM_20948_i2c_master_slv4_txn+0x170>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1334:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1336:	f88d 9015 	strb.w	r9, [sp, #21]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    133a:	681c      	ldr	r4, [r3, #0]
    133c:	2c00      	cmp	r4, #0
    133e:	d034      	beq.n	13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1340:	689b      	ldr	r3, [r3, #8]
    1342:	2201      	movs	r2, #1
    1344:	f10d 0115 	add.w	r1, sp, #21
    1348:	207f      	movs	r0, #127	; 0x7f
    134a:	47a0      	blx	r4
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    134c:	6833      	ldr	r3, [r6, #0]
    134e:	681c      	ldr	r4, [r3, #0]
    1350:	b35c      	cbz	r4, 13aa <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1352:	689b      	ldr	r3, [r3, #8]
    1354:	2201      	movs	r2, #1
    1356:	a903      	add	r1, sp, #12
    1358:	2015      	movs	r0, #21
    135a:	47a0      	blx	r4
		}

		// Kick off txn
		retval = ICM_20948_set_bank(pdev, 3);
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
		if (retval != ICM_20948_Stat_Ok)
    135c:	bb30      	cbnz	r0, 13ac <ICM_20948_i2c_master_slv4_txn+0x170>
    135e:	4604      	mov	r4, r0
    1360:	e00f      	b.n	1382 <ICM_20948_i2c_master_slv4_txn+0x146>
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1362:	689b      	ldr	r3, [r3, #8]
    1364:	47a8      	blx	r5
		while (!slave4Done)
		{
			retval = ICM_20948_set_bank(pdev, 0);
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);

			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
    1366:	f89d 3010 	ldrb.w	r3, [sp, #16]
    136a:	f240 31e7 	movw	r1, #999	; 0x3e7
    136e:	f3c3 1280 	ubfx	r2, r3, #6, #1
    1372:	428c      	cmp	r4, r1
    1374:	bf88      	it	hi
    1376:	f042 0201 	orrhi.w	r2, r2, #1

		// long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
		uint32_t max_cycles = 1000;
		uint32_t count = 0;
		bool slave4Done = false;
		while (!slave4Done)
    137a:	07d2      	lsls	r2, r2, #31
			retval = ICM_20948_set_bank(pdev, 0);
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);

			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
			slave4Done |= (count >= max_cycles);
			count++;
    137c:	f104 0401 	add.w	r4, r4, #1

		// long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
		uint32_t max_cycles = 1000;
		uint32_t count = 0;
		bool slave4Done = false;
		while (!slave4Done)
    1380:	d417      	bmi.n	13b2 <ICM_20948_i2c_master_slv4_txn+0x176>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1382:	6833      	ldr	r3, [r6, #0]
    1384:	f88d 7016 	strb.w	r7, [sp, #22]
    1388:	681d      	ldr	r5, [r3, #0]
    138a:	b135      	cbz	r5, 139a <ICM_20948_i2c_master_slv4_txn+0x15e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    138c:	689b      	ldr	r3, [r3, #8]
    138e:	2201      	movs	r2, #1
    1390:	f10d 0116 	add.w	r1, sp, #22
    1394:	207f      	movs	r0, #127	; 0x7f
    1396:	47a8      	blx	r5
    1398:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    139a:	685d      	ldr	r5, [r3, #4]
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    139c:	2201      	movs	r2, #1
    139e:	a904      	add	r1, sp, #16
    13a0:	2017      	movs	r0, #23
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    13a2:	2d00      	cmp	r5, #0
    13a4:	d1dd      	bne.n	1362 <ICM_20948_i2c_master_slv4_txn+0x126>
	{
		return ICM_20948_Stat_NotImpl;
    13a6:	2002      	movs	r0, #2
    13a8:	e7dd      	b.n	1366 <ICM_20948_i2c_master_slv4_txn+0x12a>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    13aa:	2002      	movs	r0, #2
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
	}

	return retval;
}
    13ac:	b007      	add	sp, #28
    13ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			slave4Done |= (count >= max_cycles);
			count++;
		}
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
		txn_failed |= (count >= max_cycles);
		if (txn_failed)
    13b2:	06db      	lsls	r3, r3, #27
    13b4:	d420      	bmi.n	13f8 <ICM_20948_i2c_master_slv4_txn+0x1bc>
    13b6:	428c      	cmp	r4, r1
    13b8:	d81e      	bhi.n	13f8 <ICM_20948_i2c_master_slv4_txn+0x1bc>
			break;

		if (Rw)
    13ba:	f1ba 0f00 	cmp.w	sl, #0
    13be:	d012      	beq.n	13e6 <ICM_20948_i2c_master_slv4_txn+0x1aa>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    13c0:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    13c2:	f88d 9017 	strb.w	r9, [sp, #23]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    13c6:	681c      	ldr	r4, [r3, #0]
    13c8:	b134      	cbz	r4, 13d8 <ICM_20948_i2c_master_slv4_txn+0x19c>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    13ca:	689b      	ldr	r3, [r3, #8]
    13cc:	2201      	movs	r2, #1
    13ce:	f10d 0117 	add.w	r1, sp, #23
    13d2:	207f      	movs	r0, #127	; 0x7f
    13d4:	47a0      	blx	r4
    13d6:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    13d8:	685c      	ldr	r4, [r3, #4]
    13da:	b15c      	cbz	r4, 13f4 <ICM_20948_i2c_master_slv4_txn+0x1b8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    13dc:	689b      	ldr	r3, [r3, #8]
    13de:	2201      	movs	r2, #1
    13e0:	4641      	mov	r1, r8
    13e2:	2017      	movs	r0, #23
    13e4:	47a0      	blx	r4
    13e6:	f108 0801 	add.w	r8, r8, #1

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    13ea:	45c3      	cmp	fp, r8
    13ec:	d189      	bne.n	1302 <ICM_20948_i2c_master_slv4_txn+0xc6>
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
	}

	return retval;
}
    13ee:	b007      	add	sp, #28
    13f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    13f4:	2002      	movs	r0, #2
    13f6:	e7f6      	b.n	13e6 <ICM_20948_i2c_master_slv4_txn+0x1aa>
	}

	if (txn_failed)
	{
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
    13f8:	2001      	movs	r0, #1
	}

	return retval;
}
    13fa:	b007      	add	sp, #28
    13fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001400 <ICM_20948_i2c_master_single_w>:

ICM_20948_Status_e ICM_20948_i2c_master_single_w(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
    1400:	b530      	push	{r4, r5, lr}
    1402:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
    1404:	2401      	movs	r4, #1
    1406:	2500      	movs	r5, #0
    1408:	9402      	str	r4, [sp, #8]
    140a:	e88d 0030 	stmia.w	sp, {r4, r5}
    140e:	f7ff ff15 	bl	123c <ICM_20948_i2c_master_slv4_txn>
}
    1412:	b005      	add	sp, #20
    1414:	bd30      	pop	{r4, r5, pc}
    1416:	bf00      	nop

00001418 <ICM_20948_i2c_master_single_r>:

ICM_20948_Status_e ICM_20948_i2c_master_single_r(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
    1418:	b510      	push	{r4, lr}
    141a:	b084      	sub	sp, #16
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
    141c:	2401      	movs	r4, #1
    141e:	9402      	str	r4, [sp, #8]
    1420:	9401      	str	r4, [sp, #4]
    1422:	9400      	str	r4, [sp, #0]
    1424:	f7ff ff0a 	bl	123c <ICM_20948_i2c_master_slv4_txn>
}
    1428:	b004      	add	sp, #16
    142a:	bd10      	pop	{r4, pc}

0000142c <ICM_20948_sw_reset>:
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
}

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
    142c:	b530      	push	{r4, r5, lr}
    142e:	b083      	sub	sp, #12
    1430:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1432:	6803      	ldr	r3, [r0, #0]
    1434:	f88d 2007 	strb.w	r2, [sp, #7]
    1438:	681d      	ldr	r5, [r3, #0]
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
}

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
    143a:	4604      	mov	r4, r0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    143c:	b135      	cbz	r5, 144c <ICM_20948_sw_reset+0x20>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    143e:	689b      	ldr	r3, [r3, #8]
    1440:	2201      	movs	r2, #1
    1442:	f10d 0107 	add.w	r1, sp, #7
    1446:	207f      	movs	r0, #127	; 0x7f
    1448:	47a8      	blx	r5
    144a:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    144c:	685d      	ldr	r5, [r3, #4]
    144e:	b1ad      	cbz	r5, 147c <ICM_20948_sw_reset+0x50>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1450:	689b      	ldr	r3, [r3, #8]
    1452:	a901      	add	r1, sp, #4
    1454:	2201      	movs	r2, #1
    1456:	2006      	movs	r0, #6
    1458:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    145a:	b968      	cbnz	r0, 1478 <ICM_20948_sw_reset+0x4c>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    145c:	6822      	ldr	r2, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
    145e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1462:	6814      	ldr	r4, [r2, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
    1464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1468:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    146c:	b134      	cbz	r4, 147c <ICM_20948_sw_reset+0x50>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    146e:	6893      	ldr	r3, [r2, #8]
    1470:	a901      	add	r1, sp, #4
    1472:	2201      	movs	r2, #1
    1474:	2006      	movs	r0, #6
    1476:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1478:	b003      	add	sp, #12
    147a:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    147c:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    147e:	b003      	add	sp, #12
    1480:	bd30      	pop	{r4, r5, pc}
    1482:	bf00      	nop

00001484 <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
    1484:	b570      	push	{r4, r5, r6, lr}
    1486:	b082      	sub	sp, #8
    1488:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    148a:	6803      	ldr	r3, [r0, #0]
    148c:	f88d 2007 	strb.w	r2, [sp, #7]
    1490:	681d      	ldr	r5, [r3, #0]
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
    1492:	4604      	mov	r4, r0
    1494:	460e      	mov	r6, r1
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1496:	b135      	cbz	r5, 14a6 <ICM_20948_sleep+0x22>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1498:	689b      	ldr	r3, [r3, #8]
    149a:	2201      	movs	r2, #1
    149c:	f10d 0107 	add.w	r1, sp, #7
    14a0:	207f      	movs	r0, #127	; 0x7f
    14a2:	47a8      	blx	r5
    14a4:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    14a6:	685d      	ldr	r5, [r3, #4]
    14a8:	b1f5      	cbz	r5, 14e8 <ICM_20948_sleep+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    14aa:	689b      	ldr	r3, [r3, #8]
    14ac:	a901      	add	r1, sp, #4
    14ae:	2201      	movs	r2, #1
    14b0:	2006      	movs	r0, #6
    14b2:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    14b4:	b970      	cbnz	r0, 14d4 <ICM_20948_sleep+0x50>
		return retval;
	}

	if (on)
	{
		reg.SLEEP = 1;
    14b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	if (on)
    14ba:	b96e      	cbnz	r6, 14d8 <ICM_20948_sleep+0x54>
	{
		reg.SLEEP = 1;
	}
	else
	{
		reg.SLEEP = 0;
    14bc:	f366 1386 	bfi	r3, r6, #6, #1
    14c0:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    14c4:	6823      	ldr	r3, [r4, #0]
    14c6:	681c      	ldr	r4, [r3, #0]
    14c8:	b174      	cbz	r4, 14e8 <ICM_20948_sleep+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    14ca:	689b      	ldr	r3, [r3, #8]
    14cc:	a901      	add	r1, sp, #4
    14ce:	2201      	movs	r2, #1
    14d0:	2006      	movs	r0, #6
    14d2:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    14d4:	b002      	add	sp, #8
    14d6:	bd70      	pop	{r4, r5, r6, pc}
		return retval;
	}

	if (on)
	{
		reg.SLEEP = 1;
    14d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    14dc:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    14e0:	6823      	ldr	r3, [r4, #0]
    14e2:	681c      	ldr	r4, [r3, #0]
    14e4:	2c00      	cmp	r4, #0
    14e6:	d1f0      	bne.n	14ca <ICM_20948_sleep+0x46>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    14e8:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    14ea:	b002      	add	sp, #8
    14ec:	bd70      	pop	{r4, r5, r6, pc}
    14ee:	bf00      	nop

000014f0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
    14f0:	b570      	push	{r4, r5, r6, lr}
    14f2:	b082      	sub	sp, #8
    14f4:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    14f6:	6803      	ldr	r3, [r0, #0]
    14f8:	f88d 2007 	strb.w	r2, [sp, #7]
    14fc:	681d      	ldr	r5, [r3, #0]
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
    14fe:	4604      	mov	r4, r0
    1500:	460e      	mov	r6, r1
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1502:	b135      	cbz	r5, 1512 <ICM_20948_low_power+0x22>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1504:	689b      	ldr	r3, [r3, #8]
    1506:	2201      	movs	r2, #1
    1508:	f10d 0107 	add.w	r1, sp, #7
    150c:	207f      	movs	r0, #127	; 0x7f
    150e:	47a8      	blx	r5
    1510:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1512:	685d      	ldr	r5, [r3, #4]
    1514:	b1f5      	cbz	r5, 1554 <ICM_20948_low_power+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1516:	689b      	ldr	r3, [r3, #8]
    1518:	a901      	add	r1, sp, #4
    151a:	2201      	movs	r2, #1
    151c:	2006      	movs	r0, #6
    151e:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    1520:	b970      	cbnz	r0, 1540 <ICM_20948_low_power+0x50>
		return retval;
	}

	if (on)
	{
		reg.LP_EN = 1;
    1522:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	if (on)
    1526:	b96e      	cbnz	r6, 1544 <ICM_20948_low_power+0x54>
	{
		reg.LP_EN = 1;
	}
	else
	{
		reg.LP_EN = 0;
    1528:	f366 1345 	bfi	r3, r6, #5, #1
    152c:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1530:	6823      	ldr	r3, [r4, #0]
    1532:	681c      	ldr	r4, [r3, #0]
    1534:	b174      	cbz	r4, 1554 <ICM_20948_low_power+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1536:	689b      	ldr	r3, [r3, #8]
    1538:	a901      	add	r1, sp, #4
    153a:	2201      	movs	r2, #1
    153c:	2006      	movs	r0, #6
    153e:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1540:	b002      	add	sp, #8
    1542:	bd70      	pop	{r4, r5, r6, pc}
		return retval;
	}

	if (on)
	{
		reg.LP_EN = 1;
    1544:	f043 0320 	orr.w	r3, r3, #32
    1548:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    154c:	6823      	ldr	r3, [r4, #0]
    154e:	681c      	ldr	r4, [r3, #0]
    1550:	2c00      	cmp	r4, #0
    1552:	d1f0      	bne.n	1536 <ICM_20948_low_power+0x46>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1554:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1556:	b002      	add	sp, #8
    1558:	bd70      	pop	{r4, r5, r6, pc}
    155a:	bf00      	nop

0000155c <ICM_20948_get_who_am_i>:
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
	if (whoami == NULL)
    155c:	b1c9      	cbz	r1, 1592 <ICM_20948_get_who_am_i+0x36>
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
    155e:	b570      	push	{r4, r5, r6, lr}
    1560:	b082      	sub	sp, #8
    1562:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1564:	6803      	ldr	r3, [r0, #0]
    1566:	f88d 2007 	strb.w	r2, [sp, #7]
    156a:	681e      	ldr	r6, [r3, #0]
    156c:	460c      	mov	r4, r1
    156e:	4605      	mov	r5, r0
    1570:	b136      	cbz	r6, 1580 <ICM_20948_get_who_am_i+0x24>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1572:	689b      	ldr	r3, [r3, #8]
    1574:	2201      	movs	r2, #1
    1576:	f10d 0107 	add.w	r1, sp, #7
    157a:	207f      	movs	r0, #127	; 0x7f
    157c:	47b0      	blx	r6
    157e:	682b      	ldr	r3, [r5, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1580:	685d      	ldr	r5, [r3, #4]
    1582:	b145      	cbz	r5, 1596 <ICM_20948_get_who_am_i+0x3a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1584:	689b      	ldr	r3, [r3, #8]
    1586:	4621      	mov	r1, r4
    1588:	2201      	movs	r2, #1
    158a:	2000      	movs	r0, #0
    158c:	47a8      	blx	r5
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    158e:	b002      	add	sp, #8
    1590:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
	if (whoami == NULL)
	{
		return ICM_20948_Stat_ParamErr;
    1592:	2003      	movs	r0, #3
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    1594:	4770      	bx	lr

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1596:	2002      	movs	r0, #2
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    1598:	b002      	add	sp, #8
    159a:	bd70      	pop	{r4, r5, r6, pc}

0000159c <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
    159c:	b500      	push	{lr}
    159e:	b083      	sub	sp, #12
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
    15a0:	a902      	add	r1, sp, #8
    15a2:	2300      	movs	r3, #0
    15a4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
    15a8:	f7ff ffd8 	bl	155c <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
    15ac:	b928      	cbnz	r0, 15ba <ICM_20948_check_id+0x1e>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
    15ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15b2:	2bea      	cmp	r3, #234	; 0xea
    15b4:	bf14      	ite	ne
    15b6:	2004      	movne	r0, #4
    15b8:	2000      	moveq	r0, #0
	{
		return ICM_20948_Stat_WrongID;
	}
	return retval;
}
    15ba:	b003      	add	sp, #12
    15bc:	f85d fb04 	ldr.w	pc, [sp], #4

000015c0 <ICM_20948_data_ready>:

ICM_20948_Status_e ICM_20948_data_ready(ICM_20948_Device_t *pdev)
{
    15c0:	b530      	push	{r4, r5, lr}
    15c2:	b083      	sub	sp, #12
    15c4:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    15c6:	6803      	ldr	r3, [r0, #0]
    15c8:	f88d 2007 	strb.w	r2, [sp, #7]
    15cc:	681d      	ldr	r5, [r3, #0]
    15ce:	b1c5      	cbz	r5, 1602 <ICM_20948_data_ready+0x42>
    15d0:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    15d2:	689b      	ldr	r3, [r3, #8]
    15d4:	2201      	movs	r2, #1
    15d6:	f10d 0107 	add.w	r1, sp, #7
    15da:	207f      	movs	r0, #127	; 0x7f
    15dc:	47a8      	blx	r5
ICM_20948_Status_e ICM_20948_data_ready(ICM_20948_Device_t *pdev)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_INT_STATUS_1_t reg;
	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	if (retval != ICM_20948_Stat_Ok)
    15de:	b970      	cbnz	r0, 15fe <ICM_20948_data_ready+0x3e>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    15e0:	6823      	ldr	r3, [r4, #0]
    15e2:	685c      	ldr	r4, [r3, #4]
    15e4:	b16c      	cbz	r4, 1602 <ICM_20948_data_ready+0x42>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    15e6:	689b      	ldr	r3, [r3, #8]
    15e8:	2201      	movs	r2, #1
    15ea:	a901      	add	r1, sp, #4
    15ec:	201a      	movs	r0, #26
    15ee:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_STATUS_1, (uint8_t *)&reg, sizeof(ICM_20948_INT_STATUS_1_t));
	if (retval != ICM_20948_Stat_Ok)
    15f0:	b928      	cbnz	r0, 15fe <ICM_20948_data_ready+0x3e>
	{
		return retval;
	}
	if (!reg.RAW_DATA_0_RDY_INT)
    15f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	{
		retval = ICM_20948_Stat_NoData;
    15f6:	f013 0f01 	tst.w	r3, #1
    15fa:	bf08      	it	eq
    15fc:	2006      	moveq	r0, #6
	}
	return retval;
}
    15fe:	b003      	add	sp, #12
    1600:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1602:	2002      	movs	r0, #2
	if (!reg.RAW_DATA_0_RDY_INT)
	{
		retval = ICM_20948_Stat_NoData;
	}
	return retval;
}
    1604:	b003      	add	sp, #12
    1606:	bd30      	pop	{r4, r5, pc}

00001608 <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
    1608:	f011 0f13 	tst.w	r1, #19
    160c:	d101      	bne.n	1612 <ICM_20948_set_sample_mode+0xa>
	{
		return ICM_20948_Stat_SensorNotSupported;
    160e:	2007      	movs	r0, #7
    1610:	4770      	bx	lr

	return retval;
}

ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
    1612:	b5f0      	push	{r4, r5, r6, r7, lr}
    1614:	b083      	sub	sp, #12
    1616:	2400      	movs	r4, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1618:	6803      	ldr	r3, [r0, #0]
    161a:	f88d 4007 	strb.w	r4, [sp, #7]
    161e:	681f      	ldr	r7, [r3, #0]
    1620:	2f00      	cmp	r7, #0
    1622:	d034      	beq.n	168e <ICM_20948_set_sample_mode+0x86>
    1624:	4616      	mov	r6, r2
    1626:	4605      	mov	r5, r0
    1628:	460c      	mov	r4, r1
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    162a:	689b      	ldr	r3, [r3, #8]
    162c:	2201      	movs	r2, #1
    162e:	f10d 0107 	add.w	r1, sp, #7
    1632:	207f      	movs	r0, #127	; 0x7f
    1634:	47b8      	blx	r7
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	if (retval != ICM_20948_Stat_Ok)
    1636:	bb40      	cbnz	r0, 168a <ICM_20948_set_sample_mode+0x82>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1638:	682b      	ldr	r3, [r5, #0]
    163a:	685f      	ldr	r7, [r3, #4]
    163c:	b33f      	cbz	r7, 168e <ICM_20948_set_sample_mode+0x86>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    163e:	689b      	ldr	r3, [r3, #8]
    1640:	a901      	add	r1, sp, #4
    1642:	2201      	movs	r2, #1
    1644:	2005      	movs	r0, #5
    1646:	47b8      	blx	r7
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
	if (retval != ICM_20948_Stat_Ok)
    1648:	b9f8      	cbnz	r0, 168a <ICM_20948_set_sample_mode+0x82>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
    164a:	07e1      	lsls	r1, r4, #31
    164c:	d505      	bpl.n	165a <ICM_20948_set_sample_mode+0x52>
	{
		reg.ACCEL_CYCLE = mode;
    164e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1652:	f366 1345 	bfi	r3, r6, #5, #1
    1656:	f88d 3004 	strb.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
    165a:	07a2      	lsls	r2, r4, #30
    165c:	d505      	bpl.n	166a <ICM_20948_set_sample_mode+0x62>
	{
		reg.GYRO_CYCLE = mode;
    165e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1662:	f366 1304 	bfi	r3, r6, #4, #1
    1666:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
    166a:	06e3      	lsls	r3, r4, #27
    166c:	d505      	bpl.n	167a <ICM_20948_set_sample_mode+0x72>
	{
		reg.I2C_MST_CYCLE = mode;
    166e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1672:	f366 1386 	bfi	r3, r6, #6, #1
    1676:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    167a:	682b      	ldr	r3, [r5, #0]
    167c:	681c      	ldr	r4, [r3, #0]
    167e:	b134      	cbz	r4, 168e <ICM_20948_set_sample_mode+0x86>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1680:	689b      	ldr	r3, [r3, #8]
    1682:	a901      	add	r1, sp, #4
    1684:	2201      	movs	r2, #1
    1686:	2005      	movs	r0, #5
    1688:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    168a:	b003      	add	sp, #12
    168c:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    168e:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1690:	b003      	add	sp, #12
    1692:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001694 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    1694:	078b      	lsls	r3, r1, #30
    1696:	d101      	bne.n	169c <ICM_20948_set_full_scale+0x8>
	{
		return ICM_20948_Stat_SensorNotSupported;
    1698:	2007      	movs	r0, #7
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    169a:	4770      	bx	lr
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
    169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16a0:	4606      	mov	r6, r0
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    16a2:	f011 0001 	ands.w	r0, r1, #1
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
    16a6:	b082      	sub	sp, #8
    16a8:	4617      	mov	r7, r2
    16aa:	460d      	mov	r5, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    16ac:	d131      	bne.n	1712 <ICM_20948_set_full_scale+0x7e>
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    16ae:	07ab      	lsls	r3, r5, #30
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
    16b0:	4604      	mov	r4, r0
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    16b2:	d55e      	bpl.n	1772 <ICM_20948_set_full_scale+0xde>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    16b4:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16b6:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    16b8:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16bc:	681d      	ldr	r5, [r3, #0]
    16be:	2d00      	cmp	r5, #0
    16c0:	d05b      	beq.n	177a <ICM_20948_set_full_scale+0xe6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16c2:	689b      	ldr	r3, [r3, #8]
    16c4:	2201      	movs	r2, #1
    16c6:	a901      	add	r1, sp, #4
    16c8:	207f      	movs	r0, #127	; 0x7f
    16ca:	47a8      	blx	r5
    16cc:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    16ce:	685d      	ldr	r5, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    16d0:	4320      	orrs	r0, r4
    16d2:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    16d4:	2d00      	cmp	r5, #0
    16d6:	d054      	beq.n	1782 <ICM_20948_set_full_scale+0xee>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    16d8:	2201      	movs	r2, #1
    16da:	689b      	ldr	r3, [r3, #8]
    16dc:	4610      	mov	r0, r2
    16de:	4669      	mov	r1, sp
    16e0:	47a8      	blx	r5
    16e2:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
    16e4:	f89d 1000 	ldrb.w	r1, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16e8:	681d      	ldr	r5, [r3, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
    16ea:	f3c7 0281 	ubfx	r2, r7, #2, #2
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    16ee:	4320      	orrs	r0, r4
		reg.GYRO_FS_SEL = fss.g;
    16f0:	f362 0142 	bfi	r1, r2, #1, #2
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    16f4:	b2c4      	uxtb	r4, r0
		reg.GYRO_FS_SEL = fss.g;
    16f6:	f88d 1000 	strb.w	r1, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16fa:	2d00      	cmp	r5, #0
    16fc:	d03f      	beq.n	177e <ICM_20948_set_full_scale+0xea>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16fe:	2201      	movs	r2, #1
    1700:	689b      	ldr	r3, [r3, #8]
    1702:	4610      	mov	r0, r2
    1704:	4669      	mov	r1, sp
    1706:	47a8      	blx	r5
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1708:	4320      	orrs	r0, r4
    170a:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    170c:	b002      	add	sp, #8
    170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1712:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1714:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1716:	f88d 2003 	strb.w	r2, [sp, #3]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    171a:	681c      	ldr	r4, [r3, #0]
    171c:	2c00      	cmp	r4, #0
    171e:	d032      	beq.n	1786 <ICM_20948_set_full_scale+0xf2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1720:	689b      	ldr	r3, [r3, #8]
    1722:	2201      	movs	r2, #1
    1724:	f10d 0103 	add.w	r1, sp, #3
    1728:	207f      	movs	r0, #127	; 0x7f
    172a:	47a0      	blx	r4
    172c:	6833      	ldr	r3, [r6, #0]
    172e:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1730:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1734:	f1b8 0f00 	cmp.w	r8, #0
    1738:	d029      	beq.n	178e <ICM_20948_set_full_scale+0xfa>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    173a:	689b      	ldr	r3, [r3, #8]
    173c:	2201      	movs	r2, #1
    173e:	a901      	add	r1, sp, #4
    1740:	2014      	movs	r0, #20
    1742:	47c0      	blx	r8
    1744:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
    1746:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    174a:	f8d3 8000 	ldr.w	r8, [r3]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    174e:	4304      	orrs	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
    1750:	f367 0242 	bfi	r2, r7, #1, #2

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1754:	b2e4      	uxtb	r4, r4
		reg.ACCEL_FS_SEL = fss.a;
    1756:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    175a:	f1b8 0f00 	cmp.w	r8, #0
    175e:	d014      	beq.n	178a <ICM_20948_set_full_scale+0xf6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1760:	689b      	ldr	r3, [r3, #8]
    1762:	2201      	movs	r2, #1
    1764:	a901      	add	r1, sp, #4
    1766:	2014      	movs	r0, #20
    1768:	47c0      	blx	r8
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    176a:	4304      	orrs	r4, r0
	}
	if (sensors & ICM_20948_Internal_Gyr)
    176c:	07ab      	lsls	r3, r5, #30
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    176e:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1770:	d4a0      	bmi.n	16b4 <ICM_20948_set_full_scale+0x20>
    1772:	4620      	mov	r0, r4
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1774:	b002      	add	sp, #8
    1776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    177a:	2002      	movs	r0, #2
    177c:	e7a7      	b.n	16ce <ICM_20948_set_full_scale+0x3a>
    177e:	2002      	movs	r0, #2
    1780:	e7c2      	b.n	1708 <ICM_20948_set_full_scale+0x74>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1782:	2002      	movs	r0, #2
    1784:	e7ae      	b.n	16e4 <ICM_20948_set_full_scale+0x50>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1786:	2402      	movs	r4, #2
    1788:	e7d2      	b.n	1730 <ICM_20948_set_full_scale+0x9c>
    178a:	2002      	movs	r0, #2
    178c:	e7ed      	b.n	176a <ICM_20948_set_full_scale+0xd6>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    178e:	2002      	movs	r0, #2
    1790:	e7d9      	b.n	1746 <ICM_20948_set_full_scale+0xb2>
    1792:	bf00      	nop

00001794 <ICM_20948_set_dlpf_cfg>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
    1794:	b5f0      	push	{r4, r5, r6, r7, lr}
    1796:	b085      	sub	sp, #20
    1798:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    179c:	078a      	lsls	r2, r1, #30
    179e:	d102      	bne.n	17a6 <ICM_20948_set_dlpf_cfg+0x12>
	{
		return ICM_20948_Stat_SensorNotSupported;
    17a0:	2007      	movs	r0, #7
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    17a2:	b005      	add	sp, #20
    17a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    17a6:	f011 0401 	ands.w	r4, r1, #1
    17aa:	4606      	mov	r6, r0
    17ac:	460d      	mov	r5, r1
    17ae:	d02b      	beq.n	1808 <ICM_20948_set_dlpf_cfg+0x74>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    17b0:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17b2:	6803      	ldr	r3, [r0, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    17b4:	f88d 200b 	strb.w	r2, [sp, #11]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17b8:	681c      	ldr	r4, [r3, #0]
    17ba:	2c00      	cmp	r4, #0
    17bc:	d05a      	beq.n	1874 <ICM_20948_set_dlpf_cfg+0xe0>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    17be:	689b      	ldr	r3, [r3, #8]
    17c0:	2201      	movs	r2, #1
    17c2:	f10d 010b 	add.w	r1, sp, #11
    17c6:	207f      	movs	r0, #127	; 0x7f
    17c8:	47a0      	blx	r4
    17ca:	6833      	ldr	r3, [r6, #0]
    17cc:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    17ce:	685f      	ldr	r7, [r3, #4]
    17d0:	2f00      	cmp	r7, #0
    17d2:	d053      	beq.n	187c <ICM_20948_set_dlpf_cfg+0xe8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    17d4:	689b      	ldr	r3, [r3, #8]
    17d6:	2201      	movs	r2, #1
    17d8:	a903      	add	r1, sp, #12
    17da:	2014      	movs	r0, #20
    17dc:	47b8      	blx	r7
    17de:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_DLPFCFG = cfg.a;
    17e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
    17e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17e8:	681f      	ldr	r7, [r3, #0]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    17ea:	4304      	orrs	r4, r0
		reg.ACCEL_DLPFCFG = cfg.a;
    17ec:	f361 02c5 	bfi	r2, r1, #3, #3

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    17f0:	b2e4      	uxtb	r4, r4
		reg.ACCEL_DLPFCFG = cfg.a;
    17f2:	f88d 200c 	strb.w	r2, [sp, #12]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17f6:	2f00      	cmp	r7, #0
    17f8:	d03e      	beq.n	1878 <ICM_20948_set_dlpf_cfg+0xe4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    17fa:	689b      	ldr	r3, [r3, #8]
    17fc:	2201      	movs	r2, #1
    17fe:	a903      	add	r1, sp, #12
    1800:	2014      	movs	r0, #20
    1802:	47b8      	blx	r7
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_DLPFCFG = cfg.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1804:	4304      	orrs	r4, r0
    1806:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1808:	07ab      	lsls	r3, r5, #30
    180a:	d52c      	bpl.n	1866 <ICM_20948_set_dlpf_cfg+0xd2>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    180c:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    180e:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1810:	f88d 200c 	strb.w	r2, [sp, #12]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1814:	681d      	ldr	r5, [r3, #0]
    1816:	b325      	cbz	r5, 1862 <ICM_20948_set_dlpf_cfg+0xce>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1818:	689b      	ldr	r3, [r3, #8]
    181a:	2201      	movs	r2, #1
    181c:	a903      	add	r1, sp, #12
    181e:	207f      	movs	r0, #127	; 0x7f
    1820:	47a8      	blx	r5
    1822:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1824:	685d      	ldr	r5, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    1826:	4320      	orrs	r0, r4
    1828:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    182a:	b30d      	cbz	r5, 1870 <ICM_20948_set_dlpf_cfg+0xdc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    182c:	2201      	movs	r2, #1
    182e:	689b      	ldr	r3, [r3, #8]
    1830:	4610      	mov	r0, r2
    1832:	a902      	add	r1, sp, #8
    1834:	47a8      	blx	r5
    1836:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
    1838:	f89d 2008 	ldrb.w	r2, [sp, #8]
    183c:	f89d 1005 	ldrb.w	r1, [sp, #5]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1840:	681d      	ldr	r5, [r3, #0]
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1842:	4320      	orrs	r0, r4
		reg.GYRO_DLPFCFG = cfg.g;
    1844:	f361 02c5 	bfi	r2, r1, #3, #3
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1848:	b2c4      	uxtb	r4, r0
		reg.GYRO_DLPFCFG = cfg.g;
    184a:	f88d 2008 	strb.w	r2, [sp, #8]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    184e:	b16d      	cbz	r5, 186c <ICM_20948_set_dlpf_cfg+0xd8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1850:	2201      	movs	r2, #1
    1852:	689b      	ldr	r3, [r3, #8]
    1854:	4610      	mov	r0, r2
    1856:	a902      	add	r1, sp, #8
    1858:	47a8      	blx	r5
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    185a:	4320      	orrs	r0, r4
    185c:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    185e:	b005      	add	sp, #20
    1860:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1862:	2002      	movs	r0, #2
    1864:	e7de      	b.n	1824 <ICM_20948_set_dlpf_cfg+0x90>
    1866:	4620      	mov	r0, r4
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1868:	b005      	add	sp, #20
    186a:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    186c:	2002      	movs	r0, #2
    186e:	e7f4      	b.n	185a <ICM_20948_set_dlpf_cfg+0xc6>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1870:	2002      	movs	r0, #2
    1872:	e7e1      	b.n	1838 <ICM_20948_set_dlpf_cfg+0xa4>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1874:	2402      	movs	r4, #2
    1876:	e7aa      	b.n	17ce <ICM_20948_set_dlpf_cfg+0x3a>
    1878:	2002      	movs	r0, #2
    187a:	e7c3      	b.n	1804 <ICM_20948_set_dlpf_cfg+0x70>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    187c:	2002      	movs	r0, #2
    187e:	e7af      	b.n	17e0 <ICM_20948_set_dlpf_cfg+0x4c>

00001880 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    1880:	078b      	lsls	r3, r1, #30
    1882:	d101      	bne.n	1888 <ICM_20948_enable_dlpf+0x8>
	{
		return ICM_20948_Stat_SensorNotSupported;
    1884:	2007      	movs	r0, #7
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1886:	4770      	bx	lr
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
    1888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    188c:	4605      	mov	r5, r0
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    188e:	f011 0001 	ands.w	r0, r1, #1
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
    1892:	b082      	sub	sp, #8
    1894:	4616      	mov	r6, r2
    1896:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1898:	d131      	bne.n	18fe <ICM_20948_enable_dlpf+0x7e>
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    189a:	07bb      	lsls	r3, r7, #30
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
    189c:	4604      	mov	r4, r0
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    189e:	d55f      	bpl.n	1960 <ICM_20948_enable_dlpf+0xe0>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    18a0:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18a2:	682b      	ldr	r3, [r5, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    18a4:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18a8:	681f      	ldr	r7, [r3, #0]
    18aa:	2f00      	cmp	r7, #0
    18ac:	d066      	beq.n	197c <ICM_20948_enable_dlpf+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    18ae:	689b      	ldr	r3, [r3, #8]
    18b0:	2201      	movs	r2, #1
    18b2:	a901      	add	r1, sp, #4
    18b4:	207f      	movs	r0, #127	; 0x7f
    18b6:	47b8      	blx	r7
    18b8:	682b      	ldr	r3, [r5, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    18ba:	685f      	ldr	r7, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    18bc:	4320      	orrs	r0, r4
    18be:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    18c0:	2f00      	cmp	r7, #0
    18c2:	d05f      	beq.n	1984 <ICM_20948_enable_dlpf+0x104>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    18c4:	2201      	movs	r2, #1
    18c6:	689b      	ldr	r3, [r3, #8]
    18c8:	4610      	mov	r0, r2
    18ca:	4669      	mov	r1, sp
    18cc:	47b8      	blx	r7
    18ce:	682b      	ldr	r3, [r5, #0]
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		if (enable)
		{
			reg.GYRO_FCHOICE = 1;
    18d0:	f89d 2000 	ldrb.w	r2, [sp]
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    18d4:	4320      	orrs	r0, r4
    18d6:	b2c4      	uxtb	r4, r0
		if (enable)
    18d8:	2e00      	cmp	r6, #0
    18da:	d045      	beq.n	1968 <ICM_20948_enable_dlpf+0xe8>
		{
			reg.GYRO_FCHOICE = 1;
    18dc:	f042 0201 	orr.w	r2, r2, #1
    18e0:	f88d 2000 	strb.w	r2, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18e4:	681d      	ldr	r5, [r3, #0]
    18e6:	2d00      	cmp	r5, #0
    18e8:	d04a      	beq.n	1980 <ICM_20948_enable_dlpf+0x100>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    18ea:	2201      	movs	r2, #1
    18ec:	689b      	ldr	r3, [r3, #8]
    18ee:	4610      	mov	r0, r2
    18f0:	4669      	mov	r1, sp
    18f2:	47a8      	blx	r5
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    18f4:	4320      	orrs	r0, r4
    18f6:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    18f8:	b002      	add	sp, #8
    18fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    18fe:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1900:	682b      	ldr	r3, [r5, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1902:	f88d 2003 	strb.w	r2, [sp, #3]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1906:	681c      	ldr	r4, [r3, #0]
    1908:	2c00      	cmp	r4, #0
    190a:	d03d      	beq.n	1988 <ICM_20948_enable_dlpf+0x108>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    190c:	689b      	ldr	r3, [r3, #8]
    190e:	2201      	movs	r2, #1
    1910:	f10d 0103 	add.w	r1, sp, #3
    1914:	207f      	movs	r0, #127	; 0x7f
    1916:	47a0      	blx	r4
    1918:	682b      	ldr	r3, [r5, #0]
    191a:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    191c:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1920:	f1b8 0f00 	cmp.w	r8, #0
    1924:	d034      	beq.n	1990 <ICM_20948_enable_dlpf+0x110>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1926:	689b      	ldr	r3, [r3, #8]
    1928:	2201      	movs	r2, #1
    192a:	a901      	add	r1, sp, #4
    192c:	2014      	movs	r0, #20
    192e:	47c0      	blx	r8
    1930:	682b      	ldr	r3, [r5, #0]
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		if (enable)
		{
			reg.ACCEL_FCHOICE = 1;
    1932:	f89d 2004 	ldrb.w	r2, [sp, #4]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1936:	4304      	orrs	r4, r0
    1938:	b2e4      	uxtb	r4, r4
		if (enable)
    193a:	b1d6      	cbz	r6, 1972 <ICM_20948_enable_dlpf+0xf2>
		{
			reg.ACCEL_FCHOICE = 1;
    193c:	f042 0201 	orr.w	r2, r2, #1
    1940:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1944:	f8d3 8000 	ldr.w	r8, [r3]
    1948:	f1b8 0f00 	cmp.w	r8, #0
    194c:	d01e      	beq.n	198c <ICM_20948_enable_dlpf+0x10c>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    194e:	689b      	ldr	r3, [r3, #8]
    1950:	2201      	movs	r2, #1
    1952:	a901      	add	r1, sp, #4
    1954:	2014      	movs	r0, #20
    1956:	47c0      	blx	r8
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1958:	4304      	orrs	r4, r0
	}
	if (sensors & ICM_20948_Internal_Gyr)
    195a:	07bb      	lsls	r3, r7, #30
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    195c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    195e:	d49f      	bmi.n	18a0 <ICM_20948_enable_dlpf+0x20>
    1960:	4620      	mov	r0, r4
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1962:	b002      	add	sp, #8
    1964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			reg.GYRO_FCHOICE = 1;
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
    1968:	f366 0200 	bfi	r2, r6, #0, #1
    196c:	f88d 2000 	strb.w	r2, [sp]
    1970:	e7b8      	b.n	18e4 <ICM_20948_enable_dlpf+0x64>
		{
			reg.ACCEL_FCHOICE = 1;
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
    1972:	f366 0200 	bfi	r2, r6, #0, #1
    1976:	f88d 2004 	strb.w	r2, [sp, #4]
    197a:	e7e3      	b.n	1944 <ICM_20948_enable_dlpf+0xc4>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    197c:	2002      	movs	r0, #2
    197e:	e79c      	b.n	18ba <ICM_20948_enable_dlpf+0x3a>
    1980:	2002      	movs	r0, #2
    1982:	e7b7      	b.n	18f4 <ICM_20948_enable_dlpf+0x74>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1984:	2002      	movs	r0, #2
    1986:	e7a3      	b.n	18d0 <ICM_20948_enable_dlpf+0x50>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1988:	2402      	movs	r4, #2
    198a:	e7c7      	b.n	191c <ICM_20948_enable_dlpf+0x9c>
    198c:	2002      	movs	r0, #2
    198e:	e7e3      	b.n	1958 <ICM_20948_enable_dlpf+0xd8>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1990:	2002      	movs	r0, #2
    1992:	e7ce      	b.n	1932 <ICM_20948_enable_dlpf+0xb2>

00001994 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	b082      	sub	sp, #8
    1998:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    199a:	6803      	ldr	r3, [r0, #0]
    199c:	f88d 2007 	strb.w	r2, [sp, #7]
    19a0:	681d      	ldr	r5, [r3, #0]
    19a2:	b30d      	cbz	r5, 19e8 <ICM_20948_i2c_master_passthrough+0x54>
    19a4:	460e      	mov	r6, r1
    19a6:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    19a8:	689b      	ldr	r3, [r3, #8]
    19aa:	2201      	movs	r2, #1
    19ac:	f10d 0107 	add.w	r1, sp, #7
    19b0:	207f      	movs	r0, #127	; 0x7f
    19b2:	47a8      	blx	r5
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    19b4:	b9c8      	cbnz	r0, 19ea <ICM_20948_i2c_master_passthrough+0x56>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    19b6:	6823      	ldr	r3, [r4, #0]
    19b8:	685d      	ldr	r5, [r3, #4]
    19ba:	b1ad      	cbz	r5, 19e8 <ICM_20948_i2c_master_passthrough+0x54>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    19bc:	689b      	ldr	r3, [r3, #8]
    19be:	a901      	add	r1, sp, #4
    19c0:	2201      	movs	r2, #1
    19c2:	200f      	movs	r0, #15
    19c4:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
    19c6:	b980      	cbnz	r0, 19ea <ICM_20948_i2c_master_passthrough+0x56>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    19c8:	6822      	ldr	r2, [r4, #0]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
    19ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    19ce:	6814      	ldr	r4, [r2, #0]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
    19d0:	f366 0341 	bfi	r3, r6, #1, #1
    19d4:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    19d8:	b134      	cbz	r4, 19e8 <ICM_20948_i2c_master_passthrough+0x54>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    19da:	6893      	ldr	r3, [r2, #8]
    19dc:	a901      	add	r1, sp, #4
    19de:	2201      	movs	r2, #1
    19e0:	200f      	movs	r0, #15
    19e2:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    19e4:	b002      	add	sp, #8
    19e6:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    19e8:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    19ea:	b002      	add	sp, #8
    19ec:	bd70      	pop	{r4, r5, r6, pc}
    19ee:	bf00      	nop

000019f0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
    19f0:	b570      	push	{r4, r5, r6, lr}
    19f2:	460e      	mov	r6, r1
    19f4:	b082      	sub	sp, #8
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
    19f6:	2100      	movs	r1, #0

	return retval;
}

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
    19f8:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
    19fa:	f7ff ffcb 	bl	1994 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
    19fe:	2800      	cmp	r0, #0
    1a00:	d14e      	bne.n	1aa0 <ICM_20948_i2c_master_enable+0xb0>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1a02:	2230      	movs	r2, #48	; 0x30
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a04:	6823      	ldr	r3, [r4, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1a06:	f88d 2006 	strb.w	r2, [sp, #6]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a0a:	681d      	ldr	r5, [r3, #0]
    1a0c:	2d00      	cmp	r5, #0
    1a0e:	d049      	beq.n	1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a10:	689b      	ldr	r3, [r3, #8]
    1a12:	2201      	movs	r2, #1
    1a14:	f10d 0106 	add.w	r1, sp, #6
    1a18:	207f      	movs	r0, #127	; 0x7f
    1a1a:	47a8      	blx	r5
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
	if (retval != ICM_20948_Stat_Ok)
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d13f      	bne.n	1aa0 <ICM_20948_i2c_master_enable+0xb0>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1a20:	6823      	ldr	r3, [r4, #0]
    1a22:	685d      	ldr	r5, [r3, #4]
    1a24:	2d00      	cmp	r5, #0
    1a26:	d03d      	beq.n	1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1a28:	2201      	movs	r2, #1
    1a2a:	689b      	ldr	r3, [r3, #8]
    1a2c:	4669      	mov	r1, sp
    1a2e:	4610      	mov	r0, r2
    1a30:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1a32:	2800      	cmp	r0, #0
    1a34:	d134      	bne.n	1aa0 <ICM_20948_i2c_master_enable+0xb0>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
    1a36:	f89d 3000 	ldrb.w	r3, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a3a:	6821      	ldr	r1, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
    1a3c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a40:	680d      	ldr	r5, [r1, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
    1a42:	f043 0317 	orr.w	r3, r3, #23
    1a46:	f88d 3000 	strb.w	r3, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a4a:	b35d      	cbz	r5, 1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a4c:	2201      	movs	r2, #1
    1a4e:	688b      	ldr	r3, [r1, #8]
    1a50:	4610      	mov	r0, r2
    1a52:	4669      	mov	r1, sp
    1a54:	47a8      	blx	r5
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1a56:	bb18      	cbnz	r0, 1aa0 <ICM_20948_i2c_master_enable+0xb0>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a58:	6822      	ldr	r2, [r4, #0]
    1a5a:	f88d 0007 	strb.w	r0, [sp, #7]
    1a5e:	6815      	ldr	r5, [r2, #0]
    1a60:	b305      	cbz	r5, 1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a62:	6893      	ldr	r3, [r2, #8]
    1a64:	f10d 0107 	add.w	r1, sp, #7
    1a68:	2201      	movs	r2, #1
    1a6a:	207f      	movs	r0, #127	; 0x7f
    1a6c:	47a8      	blx	r5
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    1a6e:	b9b8      	cbnz	r0, 1aa0 <ICM_20948_i2c_master_enable+0xb0>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1a70:	6823      	ldr	r3, [r4, #0]
    1a72:	685d      	ldr	r5, [r3, #4]
    1a74:	b1b5      	cbz	r5, 1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1a76:	689b      	ldr	r3, [r3, #8]
    1a78:	a901      	add	r1, sp, #4
    1a7a:	2201      	movs	r2, #1
    1a7c:	2003      	movs	r0, #3
    1a7e:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1a80:	b970      	cbnz	r0, 1aa0 <ICM_20948_i2c_master_enable+0xb0>
	{
		return retval;
	}
	if (enable)
	{
		reg.I2C_MST_EN = 1;
    1a82:	f89d 3004 	ldrb.w	r3, [sp, #4]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	if (enable)
    1a86:	b986      	cbnz	r6, 1aaa <ICM_20948_i2c_master_enable+0xba>
	{
		reg.I2C_MST_EN = 1;
	}
	else
	{
		reg.I2C_MST_EN = 0;
    1a88:	f366 1345 	bfi	r3, r6, #5, #1
    1a8c:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a90:	6823      	ldr	r3, [r4, #0]
    1a92:	681c      	ldr	r4, [r3, #0]
    1a94:	b134      	cbz	r4, 1aa4 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a96:	689b      	ldr	r3, [r3, #8]
    1a98:	a901      	add	r1, sp, #4
    1a9a:	2201      	movs	r2, #1
    1a9c:	2003      	movs	r0, #3
    1a9e:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    1aa0:	b002      	add	sp, #8
    1aa2:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1aa4:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    1aa6:	b002      	add	sp, #8
    1aa8:	bd70      	pop	{r4, r5, r6, pc}
	{
		return retval;
	}
	if (enable)
	{
		reg.I2C_MST_EN = 1;
    1aaa:	f043 0320 	orr.w	r3, r3, #32
    1aae:	f88d 3004 	strb.w	r3, [sp, #4]
    1ab2:	e7ed      	b.n	1a90 <ICM_20948_i2c_master_enable+0xa0>

00001ab4 <ICM_20948_i2c_master_reset>:

	return retval;
}

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
    1ab4:	b530      	push	{r4, r5, lr}
    1ab6:	b083      	sub	sp, #12
    1ab8:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1aba:	6803      	ldr	r3, [r0, #0]
    1abc:	f88d 2007 	strb.w	r2, [sp, #7]
    1ac0:	681d      	ldr	r5, [r3, #0]
    1ac2:	b305      	cbz	r5, 1b06 <ICM_20948_i2c_master_reset+0x52>
    1ac4:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1ac6:	689b      	ldr	r3, [r3, #8]
    1ac8:	2201      	movs	r2, #1
    1aca:	f10d 0107 	add.w	r1, sp, #7
    1ace:	207f      	movs	r0, #127	; 0x7f
    1ad0:	47a8      	blx	r5
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    1ad2:	b9c8      	cbnz	r0, 1b08 <ICM_20948_i2c_master_reset+0x54>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1ad4:	6823      	ldr	r3, [r4, #0]
    1ad6:	685d      	ldr	r5, [r3, #4]
    1ad8:	b1ad      	cbz	r5, 1b06 <ICM_20948_i2c_master_reset+0x52>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1ada:	689b      	ldr	r3, [r3, #8]
    1adc:	a901      	add	r1, sp, #4
    1ade:	2201      	movs	r2, #1
    1ae0:	2003      	movs	r0, #3
    1ae2:	47a8      	blx	r5
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1ae4:	b980      	cbnz	r0, 1b08 <ICM_20948_i2c_master_reset+0x54>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ae6:	6822      	ldr	r2, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
    1ae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1aec:	6814      	ldr	r4, [r2, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
    1aee:	f043 0302 	orr.w	r3, r3, #2
    1af2:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1af6:	b134      	cbz	r4, 1b06 <ICM_20948_i2c_master_reset+0x52>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1af8:	6893      	ldr	r3, [r2, #8]
    1afa:	a901      	add	r1, sp, #4
    1afc:	2201      	movs	r2, #1
    1afe:	2003      	movs	r0, #3
    1b00:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1b02:	b003      	add	sp, #12
    1b04:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1b06:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1b08:	b003      	add	sp, #12
    1b0a:	bd30      	pop	{r4, r5, pc}

00001b0c <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
    1b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b10:	b08b      	sub	sp, #44	; 0x2c
    1b12:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    1b16:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
    1b1a:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
    1b1e:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
    1b22:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
    1b26:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
    1b2a:	9401      	str	r4, [sp, #4]

	uint8_t slv_addr_reg;
	uint8_t slv_reg_reg;
	uint8_t slv_ctrl_reg;

	switch (slave)
    1b2c:	2903      	cmp	r1, #3
    1b2e:	d86f      	bhi.n	1c10 <ICM_20948_i2c_master_configure_slave+0x104>
    1b30:	e8df f001 	tbb	[pc, r1]
    1b34:	585e6402 	.word	0x585e6402
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
    1b38:	2105      	movs	r1, #5
    1b3a:	9104      	str	r1, [sp, #16]

	switch (slave)
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
    1b3c:	2104      	movs	r1, #4
    1b3e:	9102      	str	r1, [sp, #8]
	uint8_t slv_ctrl_reg;

	switch (slave)
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
    1b40:	2703      	movs	r7, #3
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1b42:	2430      	movs	r4, #48	; 0x30
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b44:	6801      	ldr	r1, [r0, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1b46:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b4a:	680d      	ldr	r5, [r1, #0]
    1b4c:	2d00      	cmp	r5, #0
    1b4e:	d05b      	beq.n	1c08 <ICM_20948_i2c_master_configure_slave+0xfc>
    1b50:	9305      	str	r3, [sp, #20]
    1b52:	9203      	str	r2, [sp, #12]
    1b54:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1b56:	688b      	ldr	r3, [r1, #8]
    1b58:	2201      	movs	r2, #1
    1b5a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    1b5e:	207f      	movs	r0, #127	; 0x7f
    1b60:	47a8      	blx	r5
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
	if (retval != ICM_20948_Stat_Ok)
    1b62:	2800      	cmp	r0, #0
    1b64:	d13b      	bne.n	1bde <ICM_20948_i2c_master_configure_slave+0xd2>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
    1b66:	f89d 301c 	ldrb.w	r3, [sp, #28]
    1b6a:	9a03      	ldr	r2, [sp, #12]
    1b6c:	f362 0306 	bfi	r3, r2, #0, #7
    1b70:	f88d 301c 	strb.w	r3, [sp, #28]
	if (Rw)
    1b74:	b126      	cbz	r6, 1b80 <ICM_20948_i2c_master_configure_slave+0x74>
	{
		address.RNW = 1;
    1b76:	b2db      	uxtb	r3, r3
    1b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1b7c:	f88d 301c 	strb.w	r3, [sp, #28]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	681d      	ldr	r5, [r3, #0]
    1b84:	2d00      	cmp	r5, #0
    1b86:	d03f      	beq.n	1c08 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1b88:	689b      	ldr	r3, [r3, #8]
    1b8a:	4638      	mov	r0, r7
    1b8c:	2201      	movs	r2, #1
    1b8e:	a907      	add	r1, sp, #28
    1b90:	47a8      	blx	r5
	if (Rw)
	{
		address.RNW = 1;
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
	if (retval != ICM_20948_Stat_Ok)
    1b92:	bb20      	cbnz	r0, 1bde <ICM_20948_i2c_master_configure_slave+0xd2>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b94:	6823      	ldr	r3, [r4, #0]
		return retval;
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
    1b96:	f89d 2014 	ldrb.w	r2, [sp, #20]
    1b9a:	f88d 2020 	strb.w	r2, [sp, #32]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b9e:	681d      	ldr	r5, [r3, #0]
    1ba0:	2d00      	cmp	r5, #0
    1ba2:	d031      	beq.n	1c08 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1ba4:	689b      	ldr	r3, [r3, #8]
    1ba6:	9802      	ldr	r0, [sp, #8]
    1ba8:	2201      	movs	r2, #1
    1baa:	a908      	add	r1, sp, #32
    1bac:	47a8      	blx	r5

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
	if (retval != ICM_20948_Stat_Ok)
    1bae:	b9b0      	cbnz	r0, 1bde <ICM_20948_i2c_master_configure_slave+0xd2>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
    1bb0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bb4:	6822      	ldr	r2, [r4, #0]
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
    1bb6:	9901      	ldr	r1, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bb8:	6814      	ldr	r4, [r2, #0]
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
    1bba:	f36b 0303 	bfi	r3, fp, #0, #4
	ctrl.EN = enable;
    1bbe:	f36a 13c7 	bfi	r3, sl, #7, #1
	ctrl.REG_DIS = data_only;
    1bc2:	f369 1345 	bfi	r3, r9, #5, #1
	ctrl.GRP = grp;
    1bc6:	f368 1304 	bfi	r3, r8, #4, #1
	ctrl.BYTE_SW = swap;
    1bca:	f361 1386 	bfi	r3, r1, #6, #1
    1bce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bd2:	b1cc      	cbz	r4, 1c08 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1bd4:	6893      	ldr	r3, [r2, #8]
    1bd6:	9804      	ldr	r0, [sp, #16]
    1bd8:	2201      	movs	r2, #1
    1bda:	a909      	add	r1, sp, #36	; 0x24
    1bdc:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    1bde:	b00b      	add	sp, #44	; 0x2c
    1be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
    1be4:	2111      	movs	r1, #17
    1be6:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
    1be8:	2110      	movs	r1, #16
    1bea:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
    1bec:	270f      	movs	r7, #15
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
		break;
    1bee:	e7a8      	b.n	1b42 <ICM_20948_i2c_master_configure_slave+0x36>
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
    1bf0:	210d      	movs	r1, #13
    1bf2:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
    1bf4:	210c      	movs	r1, #12
    1bf6:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
    1bf8:	270b      	movs	r7, #11
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
    1bfa:	e7a2      	b.n	1b42 <ICM_20948_i2c_master_configure_slave+0x36>
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
    1bfc:	2109      	movs	r1, #9
    1bfe:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
    1c00:	2108      	movs	r1, #8
    1c02:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
    1c04:	2707      	movs	r7, #7
    1c06:	e79c      	b.n	1b42 <ICM_20948_i2c_master_configure_slave+0x36>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c08:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    1c0a:	b00b      	add	sp, #44	; 0x2c
    1c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
		break;
	default:
		return ICM_20948_Stat_ParamErr;
    1c10:	2003      	movs	r0, #3
    1c12:	e7e4      	b.n	1bde <ICM_20948_i2c_master_configure_slave+0xd2>

00001c14 <ICM_20948_get_agmt>:
}

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
	if (pagmt == NULL)
    1c14:	2900      	cmp	r1, #0
    1c16:	f000 80bb 	beq.w	1d90 <ICM_20948_get_agmt+0x17c>
	return retval;
}

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
    1c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c1c:	b08b      	sub	sp, #44	; 0x2c
    1c1e:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1c20:	6803      	ldr	r3, [r0, #0]
    1c22:	f88d 200f 	strb.w	r2, [sp, #15]
    1c26:	681d      	ldr	r5, [r3, #0]
    1c28:	460c      	mov	r4, r1
    1c2a:	4606      	mov	r6, r0
    1c2c:	2d00      	cmp	r5, #0
    1c2e:	f000 80c8 	beq.w	1dc2 <ICM_20948_get_agmt+0x1ae>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1c32:	689b      	ldr	r3, [r3, #8]
    1c34:	2201      	movs	r2, #1
    1c36:	f10d 010f 	add.w	r1, sp, #15
    1c3a:	207f      	movs	r0, #127	; 0x7f
    1c3c:	47a8      	blx	r5
    1c3e:	6833      	ldr	r3, [r6, #0]
    1c40:	4605      	mov	r5, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1c42:	685f      	ldr	r7, [r3, #4]
    1c44:	2f00      	cmp	r7, #0
    1c46:	f000 80ba 	beq.w	1dbe <ICM_20948_get_agmt+0x1aa>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1c4a:	689b      	ldr	r3, [r3, #8]
    1c4c:	2217      	movs	r2, #23
    1c4e:	a904      	add	r1, sp, #16
    1c50:	202d      	movs	r0, #45	; 0x2d
    1c52:	47b8      	blx	r7
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    1c54:	f89d 3013 	ldrb.w	r3, [sp, #19]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    1c58:	f89d e014 	ldrb.w	lr, [sp, #20]
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    1c5c:	f89d 7012 	ldrb.w	r7, [sp, #18]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    1c60:	f89d 1015 	ldrb.w	r1, [sp, #21]

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    1c64:	f89d c010 	ldrb.w	ip, [sp, #16]
    1c68:	f89d 2011 	ldrb.w	r2, [sp, #17]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    1c6c:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    1c70:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    1c74:	f89d 3017 	ldrb.w	r3, [sp, #23]
    1c78:	f89d e016 	ldrb.w	lr, [sp, #22]
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    1c7c:	8067      	strh	r7, [r4, #2]

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    1c7e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    1c82:	ea43 230e 	orr.w	r3, r3, lr, lsl #8

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    1c86:	8022      	strh	r2, [r4, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    1c88:	f89d e018 	ldrb.w	lr, [sp, #24]
    1c8c:	f89d 2019 	ldrb.w	r2, [sp, #25]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    1c90:	f89d 701b 	ldrb.w	r7, [sp, #27]
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    1c94:	80a1      	strh	r1, [r4, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    1c96:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    1c9a:	f89d e01a 	ldrb.w	lr, [sp, #26]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    1c9e:	f89d 101d 	ldrb.w	r1, [sp, #29]

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    1ca2:	80e3      	strh	r3, [r4, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    1ca4:	ea47 2e0e 	orr.w	lr, r7, lr, lsl #8

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    1ca8:	f89d 701c 	ldrb.w	r7, [sp, #28]

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    1cac:	f89d 301f 	ldrb.w	r3, [sp, #31]
	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    1cb0:	8122      	strh	r2, [r4, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    1cb2:	ea41 2707 	orr.w	r7, r1, r7, lsl #8

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    1cb6:	f89d 1020 	ldrb.w	r1, [sp, #32]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    1cba:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    1cbe:	f8a4 e00a 	strh.w	lr, [r4, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    1cc2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    1cc6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    1cca:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    1cce:	8267      	strh	r7, [r4, #18]

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    1cd0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    1cd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
    1cd8:	f89d 701e 	ldrb.w	r7, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    1cdc:	81e2      	strh	r2, [r4, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    1cde:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
    1ce2:	7567      	strb	r7, [r4, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    1ce4:	81a1      	strh	r1, [r4, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    1ce6:	8223      	strh	r3, [r4, #16]
	pagmt->magStat2 = buff[22];
    1ce8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    1cec:	75a3      	strb	r3, [r4, #22]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cee:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1cf0:	2220      	movs	r2, #32
    1cf2:	f88d 200e 	strb.w	r2, [sp, #14]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cf6:	681f      	ldr	r7, [r3, #0]
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
    1cf8:	4305      	orrs	r5, r0
    1cfa:	b2ed      	uxtb	r5, r5
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cfc:	2f00      	cmp	r7, #0
    1cfe:	d05c      	beq.n	1dba <ICM_20948_get_agmt+0x1a6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1d00:	689b      	ldr	r3, [r3, #8]
    1d02:	2201      	movs	r2, #1
    1d04:	f10d 010e 	add.w	r1, sp, #14
    1d08:	207f      	movs	r0, #127	; 0x7f
    1d0a:	47b8      	blx	r7
    1d0c:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d0e:	685f      	ldr	r7, [r3, #4]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
    1d10:	4305      	orrs	r5, r0
    1d12:	b2ed      	uxtb	r5, r5
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d14:	2f00      	cmp	r7, #0
    1d16:	d04e      	beq.n	1db6 <ICM_20948_get_agmt+0x1a2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1d18:	689b      	ldr	r3, [r3, #8]
    1d1a:	2201      	movs	r2, #1
    1d1c:	a901      	add	r1, sp, #4
    1d1e:	2014      	movs	r0, #20
    1d20:	47b8      	blx	r7
    1d22:	6833      	ldr	r3, [r6, #0]

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    1d24:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1d28:	7d21      	ldrb	r1, [r4, #20]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1d2a:	2720      	movs	r7, #32
    1d2c:	f88d 700d 	strb.w	r7, [sp, #13]

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    1d30:	f3c2 0241 	ubfx	r2, r2, #1, #2
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d34:	681f      	ldr	r7, [r3, #0]
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
    1d36:	4305      	orrs	r5, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    1d38:	f362 0101 	bfi	r1, r2, #0, #2
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
    1d3c:	b2ed      	uxtb	r5, r5
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    1d3e:	7521      	strb	r1, [r4, #20]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d40:	2f00      	cmp	r7, #0
    1d42:	d036      	beq.n	1db2 <ICM_20948_get_agmt+0x19e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1d44:	689b      	ldr	r3, [r3, #8]
    1d46:	2201      	movs	r2, #1
    1d48:	f10d 010d 	add.w	r1, sp, #13
    1d4c:	207f      	movs	r0, #127	; 0x7f
    1d4e:	47b8      	blx	r7
    1d50:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d52:	685f      	ldr	r7, [r3, #4]
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
    1d54:	4305      	orrs	r5, r0
    1d56:	b2ed      	uxtb	r5, r5
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d58:	b1e7      	cbz	r7, 1d94 <ICM_20948_get_agmt+0x180>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1d5a:	2201      	movs	r2, #1
    1d5c:	689b      	ldr	r3, [r3, #8]
    1d5e:	4610      	mov	r0, r2
    1d60:	a902      	add	r1, sp, #8
    1d62:	47b8      	blx	r7
    1d64:	6832      	ldr	r2, [r6, #0]
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1d66:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1d6a:	7d21      	ldrb	r1, [r4, #20]
    1d6c:	6856      	ldr	r6, [r2, #4]
    1d6e:	f3c3 0341 	ubfx	r3, r3, #1, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    1d72:	4328      	orrs	r0, r5
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1d74:	f363 0183 	bfi	r1, r3, #2, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    1d78:	b2c5      	uxtb	r5, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1d7a:	7521      	strb	r1, [r4, #20]
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d7c:	b31e      	cbz	r6, 1dc6 <ICM_20948_get_agmt+0x1b2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1d7e:	6893      	ldr	r3, [r2, #8]
    1d80:	a903      	add	r1, sp, #12
    1d82:	2201      	movs	r2, #1
    1d84:	2015      	movs	r0, #21
    1d86:	47b0      	blx	r6
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    1d88:	4328      	orrs	r0, r5
    1d8a:	b2c0      	uxtb	r0, r0

	return retval;
}
    1d8c:	b00b      	add	sp, #44	; 0x2c
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
	if (pagmt == NULL)
	{
		return ICM_20948_Stat_ParamErr;
    1d90:	2003      	movs	r0, #3
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));

	return retval;
}
    1d92:	4770      	bx	lr
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1d94:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1d98:	7d22      	ldrb	r2, [r4, #20]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    1d9a:	f045 0502 	orr.w	r5, r5, #2

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d9e:	2002      	movs	r0, #2
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1da0:	f3c3 0341 	ubfx	r3, r3, #1, #2
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    1da4:	4328      	orrs	r0, r5
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1da6:	f363 0283 	bfi	r2, r3, #2, #2
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    1daa:	b2c0      	uxtb	r0, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    1dac:	7522      	strb	r2, [r4, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));

	return retval;
}
    1dae:	b00b      	add	sp, #44	; 0x2c
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1db2:	2002      	movs	r0, #2
    1db4:	e7cd      	b.n	1d52 <ICM_20948_get_agmt+0x13e>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1db6:	2002      	movs	r0, #2
    1db8:	e7b4      	b.n	1d24 <ICM_20948_get_agmt+0x110>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1dba:	2002      	movs	r0, #2
    1dbc:	e7a7      	b.n	1d0e <ICM_20948_get_agmt+0xfa>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1dbe:	2002      	movs	r0, #2
    1dc0:	e748      	b.n	1c54 <ICM_20948_get_agmt+0x40>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1dc2:	2502      	movs	r5, #2
    1dc4:	e73d      	b.n	1c42 <ICM_20948_get_agmt+0x2e>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1dc6:	2002      	movs	r0, #2
    1dc8:	e7de      	b.n	1d88 <ICM_20948_get_agmt+0x174>
    1dca:	bf00      	nop

00001dcc <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    1dcc:	2000      	movs	r0, #0
    1dce:	4770      	bx	lr

00001dd0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1dd0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    1dd4:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
	}
    1dd8:	1a10      	subs	r0, r2, r0
    1dda:	4770      	bx	lr

00001ddc <TwoWire::peek()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1ddc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    1de0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    1de4:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    1de6:	bf86      	itte	hi
    1de8:	181b      	addhi	r3, r3, r0
    1dea:	7e18      	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1dec:	f04f 30ff 	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    1df0:	4770      	bx	lr
    1df2:	bf00      	nop

00001df4 <TwoWire::flush()>:
	virtual void flush(void) {
    1df4:	4770      	bx	lr
    1df6:	bf00      	nop

00001df8 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1df8:	b538      	push	{r3, r4, r5, lr}
    1dfa:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    1dfc:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
    1e00:	b190      	cbz	r0, 1e28 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1e02:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1e06:	4614      	mov	r4, r2
    1e08:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    1e0c:	4294      	cmp	r4, r2
    1e0e:	d80c      	bhi.n	1e2a <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    1e10:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    1e14:	4418      	add	r0, r3
    1e16:	4622      	mov	r2, r4
    1e18:	f000 f9b0 	bl	217c <memcpy>
		txBufferLength += quantity;
    1e1c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1e20:	4423      	add	r3, r4
    1e22:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    1e26:	4620      	mov	r0, r4
		return quantity;
	}
	return 0;
}
    1e28:	bd38      	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1e2a:	2001      	movs	r0, #1
    1e2c:	4614      	mov	r4, r2
    1e2e:	7128      	strb	r0, [r5, #4]
    1e30:	e7ee      	b.n	1e10 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    1e32:	bf00      	nop

00001e34 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    1e34:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    1e38:	b16b      	cbz	r3, 1e56 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1e3a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    1e3e:	2b20      	cmp	r3, #32
    1e40:	d807      	bhi.n	1e52 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1e42:	18c2      	adds	r2, r0, r3
    1e44:	3301      	adds	r3, #1
    1e46:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    1e4a:	2001      	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1e4c:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
    1e50:	4770      	bx	lr
    1e52:	2301      	movs	r3, #1
    1e54:	7103      	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    1e56:	2000      	movs	r0, #0
    1e58:	4770      	bx	lr
    1e5a:	bf00      	nop

00001e5c <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    1e5c:	b538      	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1e5e:	6902      	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    1e60:	78d4      	ldrb	r4, [r2, #3]
    1e62:	b2e4      	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    1e64:	06e1      	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    1e66:	4605      	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    1e68:	d524      	bpl.n	1eb4 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    1e6a:	2310      	movs	r3, #16
    1e6c:	70d3      	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    1e6e:	0663      	lsls	r3, r4, #25
    1e70:	d51f      	bpl.n	1eb2 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    1e72:	f004 0404 	and.w	r4, r4, #4
    1e76:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d05a      	beq.n	1f34 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    1e7e:	4942      	ldr	r1, [pc, #264]	; (1f88 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    1e80:	6e6a      	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    1e82:	2300      	movs	r3, #0
    1e84:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    1e86:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    1e8a:	2a00      	cmp	r2, #0
    1e8c:	d066      	beq.n	1f5c <TwoWire::isr()+0x100>
				user_onRequest();
    1e8e:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    1e90:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    1e94:	2b00      	cmp	r3, #0
    1e96:	d061      	beq.n	1f5c <TwoWire::isr()+0x100>
    1e98:	692b      	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1e9a:	22d0      	movs	r2, #208	; 0xd0
    1e9c:	709a      	strb	r2, [r3, #2]
    1e9e:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    1ea0:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    1ea4:	711a      	strb	r2, [r3, #4]
    1ea6:	692b      	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    1ea8:	2201      	movs	r2, #1
    1eaa:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    1eae:	2202      	movs	r2, #2
    1eb0:	70da      	strb	r2, [r3, #3]
    1eb2:	bd38      	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    1eb4:	f004 0340 	and.w	r3, r4, #64	; 0x40
    1eb8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d1d8      	bne.n	1e72 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    1ec0:	7993      	ldrb	r3, [r2, #6]
    1ec2:	b2db      	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    1ec4:	f003 0160 	and.w	r1, r3, #96	; 0x60
    1ec8:	2960      	cmp	r1, #96	; 0x60
    1eca:	d04e      	beq.n	1f6a <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    1ecc:	7893      	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    1ece:	f003 0310 	and.w	r3, r3, #16
    1ed2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    1ed6:	b1b3      	cbz	r3, 1f06 <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    1ed8:	f014 0401 	ands.w	r4, r4, #1
    1edc:	d137      	bne.n	1f4e <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    1ede:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    1ee2:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1ee6:	4299      	cmp	r1, r3
    1ee8:	d94b      	bls.n	1f82 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    1eea:	1c59      	adds	r1, r3, #1
    1eec:	442b      	add	r3, r5
    1eee:	f885 105c 	strb.w	r1, [r5, #92]	; 0x5c
    1ef2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    1ef6:	7113      	strb	r3, [r2, #4]
    1ef8:	692b      	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1efa:	22d0      	movs	r2, #208	; 0xd0
    1efc:	709a      	strb	r2, [r3, #2]
    1efe:	692b      	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    1f00:	2202      	movs	r2, #2
    1f02:	70da      	strb	r2, [r3, #3]
    1f04:	e7d5      	b.n	1eb2 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    1f06:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    1f0a:	7993      	ldrb	r3, [r2, #6]
    1f0c:	f043 0320 	orr.w	r3, r3, #32
    1f10:	7193      	strb	r3, [r2, #6]
    1f12:	692b      	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1f14:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    1f18:	791a      	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1f1a:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    1f1c:	b2d2      	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1f1e:	d8c6      	bhi.n	1eae <TwoWire::isr()+0x52>
    1f20:	4819      	ldr	r0, [pc, #100]	; (1f88 <TwoWire::isr()+0x12c>)
    1f22:	7800      	ldrb	r0, [r0, #0]
    1f24:	2800      	cmp	r0, #0
    1f26:	d0c2      	beq.n	1eae <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    1f28:	1868      	adds	r0, r5, r1
    1f2a:	3101      	adds	r1, #1
    1f2c:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
    1f30:	7602      	strb	r2, [r0, #24]
    1f32:	e7bc      	b.n	1eae <TwoWire::isr()+0x52>
    1f34:	692a      	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    1f36:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1f3a:	23c0      	movs	r3, #192	; 0xc0
    1f3c:	7093      	strb	r3, [r2, #2]
    1f3e:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1f40:	4a11      	ldr	r2, [pc, #68]	; (1f88 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    1f42:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1f44:	2101      	movs	r1, #1
    1f46:	7011      	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    1f48:	2202      	movs	r2, #2
    1f4a:	70da      	strb	r2, [r3, #3]
    1f4c:	e7b1      	b.n	1eb2 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1f4e:	23c0      	movs	r3, #192	; 0xc0
    1f50:	7093      	strb	r3, [r2, #2]
    1f52:	692b      	ldr	r3, [r5, #16]
			data = port().D;
    1f54:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    1f56:	2202      	movs	r2, #2
    1f58:	70da      	strb	r2, [r3, #3]
    1f5a:	e7aa      	b.n	1eb2 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1f5c:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    1f5e:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1f60:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    1f64:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
    1f68:	e796      	b.n	1e98 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    1f6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    1f6e:	7193      	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    1f70:	6eab      	ldr	r3, [r5, #104]	; 0x68
    1f72:	b123      	cbz	r3, 1f7e <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    1f74:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    1f78:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    1f7c:	4798      	blx	r3
    1f7e:	692a      	ldr	r2, [r5, #16]
    1f80:	e7a4      	b.n	1ecc <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    1f82:	7114      	strb	r4, [r2, #4]
    1f84:	e7b8      	b.n	1ef8 <TwoWire::isr()+0x9c>
    1f86:	bf00      	nop
    1f88:	1fff1298 	.word	0x1fff1298

00001f8c <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    1f8c:	4801      	ldr	r0, [pc, #4]	; (1f94 <i2c0_isr+0x8>)
    1f8e:	f7ff bf65 	b.w	1e5c <TwoWire::isr()>
    1f92:	bf00      	nop
    1f94:	1fff079c 	.word	0x1fff079c

00001f98 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    1f98:	4801      	ldr	r0, [pc, #4]	; (1fa0 <i2c1_isr+0x8>)
    1f9a:	f7ff bf5f 	b.w	1e5c <TwoWire::isr()>
    1f9e:	bf00      	nop
    1fa0:	1fff0808 	.word	0x1fff0808

00001fa4 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    1fa4:	4801      	ldr	r0, [pc, #4]	; (1fac <i2c2_isr+0x8>)
    1fa6:	f7ff bf59 	b.w	1e5c <TwoWire::isr()>
    1faa:	bf00      	nop
    1fac:	1fff0730 	.word	0x1fff0730

00001fb0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1fb0:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1fb2:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1fb4:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1fb6:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1fb8:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1fba:	d003      	beq.n	1fc4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1fc0:	f001 bff0 	b.w	3fa4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1fc4:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1fca:	4718      	bx	r3

00001fcc <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1fcc:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1fce:	4b46      	ldr	r3, [pc, #280]	; (20e8 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1fd0:	4a46      	ldr	r2, [pc, #280]	; (20ec <_spi_dma_rxISR0()+0x120>)
    1fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
    1fd4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    1fd6:	7901      	ldrb	r1, [r0, #4]
    1fd8:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1fda:	4945      	ldr	r1, [pc, #276]	; (20f0 <_spi_dma_rxISR0()+0x124>)
    1fdc:	7922      	ldrb	r2, [r4, #4]
    1fde:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    1fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1fe2:	7900      	ldrb	r0, [r0, #4]
    1fe4:	7008      	strb	r0, [r1, #0]
    1fe6:	2a00      	cmp	r2, #0
    1fe8:	d046      	beq.n	2078 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    1fea:	6859      	ldr	r1, [r3, #4]
    1fec:	68c9      	ldr	r1, [r1, #12]
    1fee:	428a      	cmp	r2, r1
    1ff0:	d83e      	bhi.n	2070 <_spi_dma_rxISR0()+0xa4>
    1ff2:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1ff4:	8bcc      	ldrh	r4, [r1, #30]
    1ff6:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    1ff8:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1ffc:	d465      	bmi.n	20ca <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    1ffe:	f3c0 000e 	ubfx	r0, r0, #0, #15
    2002:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2004:	8bc8      	ldrh	r0, [r1, #30]
    2006:	b280      	uxth	r0, r0
    2008:	82c8      	strh	r0, [r1, #22]
    200a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    200c:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    200e:	8bc8      	ldrh	r0, [r1, #30]
    2010:	0400      	lsls	r0, r0, #16
    2012:	d452      	bmi.n	20ba <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    2014:	f3c2 000e 	ubfx	r0, r2, #0, #15
    2018:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    201a:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    201c:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    201e:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2020:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2024:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2026:	bf18      	it	ne
    2028:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    202a:	631c      	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    202c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    202e:	482e      	ldr	r0, [pc, #184]	; (20e8 <_spi_dma_rxISR0()+0x11c>)
    2030:	6809      	ldr	r1, [r1, #0]
    2032:	680d      	ldr	r5, [r1, #0]
    2034:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    2038:	42a5      	cmp	r5, r4
    203a:	d036      	beq.n	20aa <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    203c:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    203e:	68c4      	ldr	r4, [r0, #12]
    2040:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2044:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2046:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2048:	bf15      	itete	ne
    204a:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    204c:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    204e:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2050:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2052:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2056:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2058:	6344      	str	r4, [r0, #52]	; 0x34
    205a:	6b99      	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    205c:	4b25      	ldr	r3, [pc, #148]	; (20f4 <_spi_dma_rxISR0()+0x128>)
    205e:	7909      	ldrb	r1, [r1, #4]
    2060:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    2062:	4921      	ldr	r1, [pc, #132]	; (20e8 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    2064:	b112      	cbz	r2, 206c <_spi_dma_rxISR0()+0xa0>
    2066:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    2068:	7912      	ldrb	r2, [r2, #4]
    206a:	701a      	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    206c:	bcf0      	pop	{r4, r5, r6, r7}
    206e:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2070:	1a52      	subs	r2, r2, r1
    2072:	631a      	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2074:	2201      	movs	r2, #1
    2076:	e7d9      	b.n	202c <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2078:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    207a:	6819      	ldr	r1, [r3, #0]
    207c:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    207e:	4c1e      	ldr	r4, [pc, #120]	; (20f8 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2080:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2082:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2084:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2086:	682d      	ldr	r5, [r5, #0]
    2088:	4e1c      	ldr	r6, [pc, #112]	; (20fc <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    208a:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    208e:	2703      	movs	r7, #3
    2090:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2092:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2094:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
    2098:	d11f      	bne.n	20da <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    209a:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    209c:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    209e:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    20a0:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    20a2:	d01e      	beq.n	20e2 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    20a4:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    20a6:	f001 bf7d 	b.w	3fa4 <EventResponder::triggerEventNotImmediate()>
    20aa:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    20ac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    20b0:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    20b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    20b6:	6348      	str	r0, [r1, #52]	; 0x34
    20b8:	e7cf      	b.n	205a <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    20ba:	8bcc      	ldrh	r4, [r1, #30]
    20bc:	f3c2 0008 	ubfx	r0, r2, #0, #9
    20c0:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    20c4:	4320      	orrs	r0, r4
    20c6:	83c8      	strh	r0, [r1, #30]
    20c8:	e7a7      	b.n	201a <_spi_dma_rxISR0()+0x4e>
    20ca:	8bcc      	ldrh	r4, [r1, #30]
    20cc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    20d0:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    20d4:	4320      	orrs	r0, r4
    20d6:	83c8      	strh	r0, [r1, #30]
    20d8:	e794      	b.n	2004 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    20da:	462b      	mov	r3, r5
    20dc:	4611      	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    20de:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    20e0:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    20e2:	6883      	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    20e4:	bcf0      	pop	{r4, r5, r6, r7}
    20e6:	4718      	bx	r3
    20e8:	1fff0874 	.word	0x1fff0874
    20ec:	4000801f 	.word	0x4000801f
    20f0:	4000801c 	.word	0x4000801c
    20f4:	4000801b 	.word	0x4000801b
    20f8:	ff0f0000 	.word	0xff0f0000
    20fc:	00001fb1 	.word	0x00001fb1

00002100 <SPIClass::begin()>:
    2100:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    2104:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2106:	681c      	ldr	r4, [r3, #0]
    2108:	6859      	ldr	r1, [r3, #4]
    210a:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    210c:	4f16      	ldr	r7, [pc, #88]	; (2168 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    210e:	4e17      	ldr	r6, [pc, #92]	; (216c <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2110:	4329      	orrs	r1, r5
    2112:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    2114:	4d16      	ldr	r5, [pc, #88]	; (2170 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    2116:	4917      	ldr	r1, [pc, #92]	; (2174 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    2118:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    211a:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    211c:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    211e:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    2120:	7a41      	ldrb	r1, [r0, #9]
    2122:	4a15      	ldr	r2, [pc, #84]	; (2178 <SPIClass::begin()+0x78>)
    2124:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    2126:	310c      	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    2128:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    212c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    2130:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    2134:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    2136:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2138:	7a01      	ldrb	r1, [r0, #8]
    213a:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    213c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2140:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    2142:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2144:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    2148:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    214a:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    214c:	7a81      	ldrb	r1, [r0, #10]
    214e:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    2150:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2154:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    2158:	6c59      	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    215a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    215e:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2160:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    2162:	6019      	str	r1, [r3, #0]
}
    2164:	4770      	bx	lr
    2166:	bf00      	nop
    2168:	001f4001 	.word	0x001f4001
    216c:	38001001 	.word	0x38001001
    2170:	78001001 	.word	0x78001001
    2174:	801f0000 	.word	0x801f0000
    2178:	00005ee0 	.word	0x00005ee0

0000217c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    217c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    217e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2182:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2186:	d16d      	bne.n	2264 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2188:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    218a:	d341      	bcc.n	2210 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    218c:	f851 3b04 	ldr.w	r3, [r1], #4
    2190:	f840 3b04 	str.w	r3, [r0], #4
    2194:	f851 3b04 	ldr.w	r3, [r1], #4
    2198:	f840 3b04 	str.w	r3, [r0], #4
    219c:	f851 3b04 	ldr.w	r3, [r1], #4
    21a0:	f840 3b04 	str.w	r3, [r0], #4
    21a4:	f851 3b04 	ldr.w	r3, [r1], #4
    21a8:	f840 3b04 	str.w	r3, [r0], #4
    21ac:	f851 3b04 	ldr.w	r3, [r1], #4
    21b0:	f840 3b04 	str.w	r3, [r0], #4
    21b4:	f851 3b04 	ldr.w	r3, [r1], #4
    21b8:	f840 3b04 	str.w	r3, [r0], #4
    21bc:	f851 3b04 	ldr.w	r3, [r1], #4
    21c0:	f840 3b04 	str.w	r3, [r0], #4
    21c4:	f851 3b04 	ldr.w	r3, [r1], #4
    21c8:	f840 3b04 	str.w	r3, [r0], #4
    21cc:	f851 3b04 	ldr.w	r3, [r1], #4
    21d0:	f840 3b04 	str.w	r3, [r0], #4
    21d4:	f851 3b04 	ldr.w	r3, [r1], #4
    21d8:	f840 3b04 	str.w	r3, [r0], #4
    21dc:	f851 3b04 	ldr.w	r3, [r1], #4
    21e0:	f840 3b04 	str.w	r3, [r0], #4
    21e4:	f851 3b04 	ldr.w	r3, [r1], #4
    21e8:	f840 3b04 	str.w	r3, [r0], #4
    21ec:	f851 3b04 	ldr.w	r3, [r1], #4
    21f0:	f840 3b04 	str.w	r3, [r0], #4
    21f4:	f851 3b04 	ldr.w	r3, [r1], #4
    21f8:	f840 3b04 	str.w	r3, [r0], #4
    21fc:	f851 3b04 	ldr.w	r3, [r1], #4
    2200:	f840 3b04 	str.w	r3, [r0], #4
    2204:	f851 3b04 	ldr.w	r3, [r1], #4
    2208:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    220c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    220e:	d2bd      	bcs.n	218c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2210:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2212:	d311      	bcc.n	2238 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2214:	f851 3b04 	ldr.w	r3, [r1], #4
    2218:	f840 3b04 	str.w	r3, [r0], #4
    221c:	f851 3b04 	ldr.w	r3, [r1], #4
    2220:	f840 3b04 	str.w	r3, [r0], #4
    2224:	f851 3b04 	ldr.w	r3, [r1], #4
    2228:	f840 3b04 	str.w	r3, [r0], #4
    222c:	f851 3b04 	ldr.w	r3, [r1], #4
    2230:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2234:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2236:	d2ed      	bcs.n	2214 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2238:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    223a:	d305      	bcc.n	2248 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    223c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2240:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2244:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2246:	d2f9      	bcs.n	223c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2248:	3204      	adds	r2, #4
	beq	.Ldone
    224a:	d008      	beq.n	225e <memcpy+0xe2>

	lsls	r2, r2, #31
    224c:	07d2      	lsls	r2, r2, #31
	itt ne
    224e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2250:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2254:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2258:	d301      	bcc.n	225e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    225a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    225c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    225e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2260:	4770      	bx	lr
    2262:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2264:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2266:	d313      	bcc.n	2290 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2268:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    226a:	d08d      	beq.n	2188 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    226c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2270:	d08a      	beq.n	2188 <memcpy+0xc>

	rsb	r3, #4
    2272:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2276:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2278:	07db      	lsls	r3, r3, #31
	itt ne
    227a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    227c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2280:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2284:	d380      	bcc.n	2188 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2286:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    228a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    228e:	e77b      	b.n	2188 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2290:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2292:	d3d9      	bcc.n	2248 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2294:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2296:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    229a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    229e:	d2f9      	bcs.n	2294 <memcpy+0x118>

	ldrb	r3, [r1]
    22a0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    22a2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    22a4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    22a6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    22a8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    22aa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    22ac:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    22ae:	4770      	bx	lr

000022b0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    22b0:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    22b2:	4c10      	ldr	r4, [pc, #64]	; (22f4 <fault_isr+0x44>)
    22b4:	e008      	b.n	22c8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    22b6:	6823      	ldr	r3, [r4, #0]
    22b8:	0559      	lsls	r1, r3, #21
    22ba:	d40d      	bmi.n	22d8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    22bc:	6823      	ldr	r3, [r4, #0]
    22be:	051a      	lsls	r2, r3, #20
    22c0:	d40f      	bmi.n	22e2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    22c2:	6823      	ldr	r3, [r4, #0]
    22c4:	04db      	lsls	r3, r3, #19
    22c6:	d411      	bmi.n	22ec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    22c8:	6823      	ldr	r3, [r4, #0]
    22ca:	0358      	lsls	r0, r3, #13
    22cc:	d5f3      	bpl.n	22b6 <fault_isr+0x6>
    22ce:	f000 feeb 	bl	30a8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    22d2:	6823      	ldr	r3, [r4, #0]
    22d4:	0559      	lsls	r1, r3, #21
    22d6:	d5f1      	bpl.n	22bc <fault_isr+0xc>
    22d8:	f000 fd86 	bl	2de8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    22dc:	6823      	ldr	r3, [r4, #0]
    22de:	051a      	lsls	r2, r3, #20
    22e0:	d5ef      	bpl.n	22c2 <fault_isr+0x12>
    22e2:	f000 f809 	bl	22f8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    22e6:	6823      	ldr	r3, [r4, #0]
    22e8:	04db      	lsls	r3, r3, #19
    22ea:	d5ed      	bpl.n	22c8 <fault_isr+0x18>
    22ec:	f000 f804 	bl	22f8 <unused_isr>
    22f0:	e7ea      	b.n	22c8 <fault_isr+0x18>
    22f2:	bf00      	nop
    22f4:	40048034 	.word	0x40048034

000022f8 <unused_isr>:
	}
}

void unused_isr(void)
{
    22f8:	b508      	push	{r3, lr}
	fault_isr();
    22fa:	f7ff ffd9 	bl	22b0 <fault_isr>
    22fe:	bf00      	nop

00002300 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2300:	4b01      	ldr	r3, [pc, #4]	; (2308 <startup_early_hook+0x8>)
    2302:	2210      	movs	r2, #16
    2304:	801a      	strh	r2, [r3, #0]
    2306:	4770      	bx	lr
    2308:	40052000 	.word	0x40052000

0000230c <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    230c:	4770      	bx	lr
    230e:	bf00      	nop

00002310 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    2310:	4909      	ldr	r1, [pc, #36]	; (2338 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2312:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    2314:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    2316:	b130      	cbz	r0, 2326 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2318:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    231a:	4418      	add	r0, r3
    231c:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    2320:	4290      	cmp	r0, r2
    2322:	d202      	bcs.n	232a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    2324:	6008      	str	r0, [r1, #0]
	}
	return prev;
    2326:	4618      	mov	r0, r3
}
    2328:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    232a:	f002 fe61 	bl	4ff0 <__errno>
    232e:	230c      	movs	r3, #12
    2330:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    2332:	f04f 30ff 	mov.w	r0, #4294967295
    2336:	bd08      	pop	{r3, pc}
    2338:	1fff08b4 	.word	0x1fff08b4

0000233c <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    233c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2340:	b970      	cbnz	r0, 2360 <nvic_execution_priority+0x24>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2342:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    2346:	b96b      	cbnz	r3, 2364 <nvic_execution_priority+0x28>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2348:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    234c:	b95a      	cbnz	r2, 2366 <nvic_execution_priority+0x2a>

#pragma GCC diagnostic pop

int nvic_execution_priority(void)
{
	uint32_t priority=256;
    234e:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2352:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2356:	b12b      	cbz	r3, 2364 <nvic_execution_priority+0x28>
    2358:	4298      	cmp	r0, r3
    235a:	bf28      	it	cs
    235c:	4618      	movcs	r0, r3
	return priority;
    235e:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    2360:	f04f 30ff 	mov.w	r0, #4294967295
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    2364:	4770      	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    2366:	2a0f      	cmp	r2, #15
    2368:	d801      	bhi.n	236e <nvic_execution_priority+0x32>
    236a:	4618      	mov	r0, r3
    236c:	e7f1      	b.n	2352 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    236e:	4b01      	ldr	r3, [pc, #4]	; (2374 <nvic_execution_priority+0x38>)
    2370:	5cd0      	ldrb	r0, [r2, r3]
    2372:	e7ee      	b.n	2352 <nvic_execution_priority+0x16>
    2374:	e000e3f0 	.word	0xe000e3f0

00002378 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    2378:	4a08      	ldr	r2, [pc, #32]	; (239c <kinetis_hsrun_disable+0x24>)
    237a:	7813      	ldrb	r3, [r2, #0]
    237c:	2b80      	cmp	r3, #128	; 0x80
    237e:	d001      	beq.n	2384 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    2380:	2000      	movs	r0, #0
}
    2382:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2384:	4906      	ldr	r1, [pc, #24]	; (23a0 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    2386:	4b07      	ldr	r3, [pc, #28]	; (23a4 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    2388:	4807      	ldr	r0, [pc, #28]	; (23a8 <kinetis_hsrun_disable+0x30>)
    238a:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    238c:	2100      	movs	r1, #0
    238e:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2390:	7813      	ldrb	r3, [r2, #0]
    2392:	2b80      	cmp	r3, #128	; 0x80
    2394:	d0fc      	beq.n	2390 <kinetis_hsrun_disable+0x18>
		return 1;
    2396:	2001      	movs	r0, #1
    2398:	4770      	bx	lr
    239a:	bf00      	nop
    239c:	4007e003 	.word	0x4007e003
    23a0:	40048044 	.word	0x40048044
    23a4:	4007e001 	.word	0x4007e001
    23a8:	22280000 	.word	0x22280000

000023ac <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    23ac:	4a09      	ldr	r2, [pc, #36]	; (23d4 <kinetis_hsrun_enable+0x28>)
    23ae:	7813      	ldrb	r3, [r2, #0]
    23b0:	2b01      	cmp	r3, #1
    23b2:	d001      	beq.n	23b8 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    23b4:	2000      	movs	r0, #0
}
    23b6:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    23b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    23bc:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    23c0:	2160      	movs	r1, #96	; 0x60
    23c2:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    23c4:	7813      	ldrb	r3, [r2, #0]
    23c6:	2b80      	cmp	r3, #128	; 0x80
    23c8:	d1fc      	bne.n	23c4 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    23ca:	4b03      	ldr	r3, [pc, #12]	; (23d8 <kinetis_hsrun_enable+0x2c>)
    23cc:	4a03      	ldr	r2, [pc, #12]	; (23dc <kinetis_hsrun_enable+0x30>)
    23ce:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    23d0:	2001      	movs	r0, #1
    23d2:	4770      	bx	lr
    23d4:	4007e003 	.word	0x4007e003
    23d8:	40048044 	.word	0x40048044
    23dc:	02060000 	.word	0x02060000

000023e0 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    23e0:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    23e2:	4b11      	ldr	r3, [pc, #68]	; (2428 <digitalWrite.part.1+0x48>)
    23e4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    23e8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    23ec:	b134      	cbz	r4, 23fc <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    23ee:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    23f0:	b179      	cbz	r1, 2412 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    23f2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    23f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    23fa:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    23fc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2400:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2402:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2404:	b951      	cbnz	r1, 241c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2406:	f022 0202 	bic.w	r2, r2, #2
    240a:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    240c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2410:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2412:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2416:	f85d 4b04 	ldr.w	r4, [sp], #4
    241a:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    241c:	f042 0203 	orr.w	r2, r2, #3
    2420:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2422:	f85d 4b04 	ldr.w	r4, [sp], #4
    2426:	4770      	bx	lr
    2428:	00005ee0 	.word	0x00005ee0

0000242c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    242c:	4a1c      	ldr	r2, [pc, #112]	; (24a0 <pinMode.part.2+0x74>)
    242e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2432:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2434:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2436:	d011      	beq.n	245c <pinMode.part.2+0x30>
    2438:	2904      	cmp	r1, #4
    243a:	d01b      	beq.n	2474 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    243c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    2440:	2200      	movs	r2, #0
    2442:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    2446:	b129      	cbz	r1, 2454 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    2448:	2902      	cmp	r1, #2
    244a:	d020      	beq.n	248e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    244c:	2903      	cmp	r1, #3
    244e:	d022      	beq.n	2496 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2450:	601a      	str	r2, [r3, #0]
    2452:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2454:	f44f 7280 	mov.w	r2, #256	; 0x100
    2458:	601a      	str	r2, [r3, #0]
    245a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    245c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2460:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2464:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2468:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    246a:	681a      	ldr	r2, [r3, #0]
    246c:	f022 0220 	bic.w	r2, r2, #32
    2470:	601a      	str	r2, [r3, #0]
    2472:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2474:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2478:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    247c:	2001      	movs	r0, #1
    247e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2482:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    2484:	681a      	ldr	r2, [r3, #0]
    2486:	f042 0220 	orr.w	r2, r2, #32
    248a:	601a      	str	r2, [r3, #0]
    248c:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    248e:	f240 1203 	movw	r2, #259	; 0x103
    2492:	601a      	str	r2, [r3, #0]
    2494:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2496:	f44f 7281 	mov.w	r2, #258	; 0x102
    249a:	601a      	str	r2, [r3, #0]
    249c:	4770      	bx	lr
    249e:	bf00      	nop
    24a0:	00005ee0 	.word	0x00005ee0

000024a4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    24a4:	b430      	push	{r4, r5}
	RTC_SR = 0;
    24a6:	4b05      	ldr	r3, [pc, #20]	; (24bc <rtc_set+0x18>)
	RTC_TPR = 0;
    24a8:	4d05      	ldr	r5, [pc, #20]	; (24c0 <rtc_set+0x1c>)
	RTC_TSR = t;
    24aa:	4c06      	ldr	r4, [pc, #24]	; (24c4 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24ac:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    24ae:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    24b0:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    24b2:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    24b4:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    24b6:	6019      	str	r1, [r3, #0]
}
    24b8:	bc30      	pop	{r4, r5}
    24ba:	4770      	bx	lr
    24bc:	4003d014 	.word	0x4003d014
    24c0:	4003d004 	.word	0x4003d004
    24c4:	4003d000 	.word	0x4003d000

000024c8 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    24c8:	283f      	cmp	r0, #63	; 0x3f
    24ca:	d801      	bhi.n	24d0 <digitalWrite+0x8>
    24cc:	f7ff bf88 	b.w	23e0 <digitalWrite.part.1>
    24d0:	4770      	bx	lr
    24d2:	bf00      	nop

000024d4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    24d4:	283f      	cmp	r0, #63	; 0x3f
    24d6:	d801      	bhi.n	24dc <pinMode+0x8>
    24d8:	f7ff bfa8 	b.w	242c <pinMode.part.2>
    24dc:	4770      	bx	lr
    24de:	bf00      	nop

000024e0 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    24e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24e4:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    24e6:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    24e8:	4f22      	ldr	r7, [pc, #136]	; (2574 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    24ea:	4b23      	ldr	r3, [pc, #140]	; (2578 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    24ec:	4a23      	ldr	r2, [pc, #140]	; (257c <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    24ee:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    24f0:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    24f2:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    24f4:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    24f6:	0152      	lsls	r2, r2, #5
    24f8:	d502      	bpl.n	2500 <delay+0x20>
    24fa:	2b32      	cmp	r3, #50	; 0x32
    24fc:	bf88      	it	hi
    24fe:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2500:	b3b5      	cbz	r5, 2570 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2502:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    2506:	f203 331f 	addw	r3, r3, #799	; 0x31f
    250a:	4e1d      	ldr	r6, [pc, #116]	; (2580 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    250c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2578 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2510:	f8df 8068 	ldr.w	r8, [pc, #104]	; 257c <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2514:	089b      	lsrs	r3, r3, #2
    2516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    251a:	fba6 1303 	umull	r1, r3, r6, r3
    251e:	fb02 f404 	mul.w	r4, r2, r4
    2522:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2526:	b672      	cpsid	i
	current = SYST_CVR;
    2528:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    252c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    252e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    2532:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2534:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    2538:	f203 331f 	addw	r3, r3, #799	; 0x31f
    253c:	089b      	lsrs	r3, r3, #2
    253e:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2542:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2546:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    254a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    254e:	d002      	beq.n	2556 <delay+0x76>
    2550:	2932      	cmp	r1, #50	; 0x32
    2552:	bf88      	it	hi
    2554:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2556:	fb00 3302 	mla	r3, r0, r2, r3
    255a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    255e:	d304      	bcc.n	256a <delay+0x8a>
				ms--;
				if (ms == 0) return;
    2560:	3d01      	subs	r5, #1
    2562:	d005      	beq.n	2570 <delay+0x90>
				start += 1000;
    2564:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    2568:	e7dd      	b.n	2526 <delay+0x46>
			}
			yield();
    256a:	f001 ff53 	bl	4414 <yield>
		}
    256e:	e7da      	b.n	2526 <delay+0x46>
    2570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2574:	1fff129c 	.word	0x1fff129c
    2578:	e000e018 	.word	0xe000e018
    257c:	e000ed04 	.word	0xe000ed04
    2580:	16c16c17 	.word	0x16c16c17

00002584 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    2584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2586:	4b4e      	ldr	r3, [pc, #312]	; (26c0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    2588:	484e      	ldr	r0, [pc, #312]	; (26c4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    258a:	f8df c15c 	ldr.w	ip, [pc, #348]	; 26e8 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    258e:	4c4e      	ldr	r4, [pc, #312]	; (26c8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2590:	494e      	ldr	r1, [pc, #312]	; (26cc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2592:	f8df e158 	ldr.w	lr, [pc, #344]	; 26ec <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2596:	4e4e      	ldr	r6, [pc, #312]	; (26d0 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2598:	4d4e      	ldr	r5, [pc, #312]	; (26d4 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    259a:	4f4f      	ldr	r7, [pc, #316]	; (26d8 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    259c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    25a0:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    25a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    25a6:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    25a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    25ac:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    25ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25b2:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    25b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    25b8:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    25ba:	2200      	movs	r2, #0
    25bc:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25be:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    25c0:	f64e 70ff 	movw	r0, #61439	; 0xefff
    25c4:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    25c8:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    25cc:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    25ce:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    25d2:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    25d4:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    25d6:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    25d8:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    25dc:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    25de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    25e2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    25e4:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    25e8:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    25ea:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    25ee:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    25f2:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    25f6:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    25fa:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    25fe:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2600:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2604:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2606:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2608:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    260a:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    260e:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2610:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2612:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2614:	4c31      	ldr	r4, [pc, #196]	; (26dc <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2616:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2618:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    261a:	2109      	movs	r1, #9
    261c:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    261e:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2622:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2626:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2628:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    262a:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    262c:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    262e:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    2630:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2632:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2636:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    263a:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    263e:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2640:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    2644:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2646:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    2648:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    264a:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    264c:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2650:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    2652:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    2656:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    265a:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    265c:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    2660:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    2664:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2666:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2668:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    266c:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    266e:	481c      	ldr	r0, [pc, #112]	; (26e0 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    2670:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    2674:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    2676:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2678:	4c1a      	ldr	r4, [pc, #104]	; (26e4 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    267a:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    267e:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    2682:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    2686:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    268a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    268e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    2692:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2694:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2698:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    269c:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    269e:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    26a0:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    26a2:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    26a4:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    26a6:	f001 ff2b 	bl	4500 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    26aa:	2019      	movs	r0, #25
    26ac:	f7ff ff18 	bl	24e0 <delay>
	usb_init();
    26b0:	f001 fa60 	bl	3b74 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    26b4:	f240 1013 	movw	r0, #275	; 0x113
}
    26b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    26bc:	f7ff bf10 	b.w	24e0 <delay>
    26c0:	e000e104 	.word	0xe000e104
    26c4:	40038004 	.word	0x40038004
    26c8:	40038014 	.word	0x40038014
    26cc:	4003801c 	.word	0x4003801c
    26d0:	40038024 	.word	0x40038024
    26d4:	4003802c 	.word	0x4003802c
    26d8:	40038034 	.word	0x40038034
    26dc:	40038000 	.word	0x40038000
    26e0:	40048004 	.word	0x40048004
    26e4:	400c9000 	.word	0x400c9000
    26e8:	40038008 	.word	0x40038008
    26ec:	4003800c 	.word	0x4003800c

000026f0 <serial_putchar.part.0>:
#else
	return 0;
#endif
}

void serial_putchar(uint32_t c)
    26f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
    26f4:	4b21      	ldr	r3, [pc, #132]	; (277c <serial_putchar.part.0+0x8c>)
    26f6:	681b      	ldr	r3, [r3, #0]
#else
	return 0;
#endif
}

void serial_putchar(uint32_t c)
    26f8:	4607      	mov	r7, r0
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
    26fa:	b10b      	cbz	r3, 2700 <serial_putchar.part.0+0x10>
    26fc:	2201      	movs	r2, #1
    26fe:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    2700:	f8df 9088 	ldr.w	r9, [pc, #136]	; 278c <serial_putchar.part.0+0x9c>
    2704:	4d1e      	ldr	r5, [pc, #120]	; (2780 <serial_putchar.part.0+0x90>)
    2706:	f899 4000 	ldrb.w	r4, [r9]
    270a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2790 <serial_putchar.part.0+0xa0>
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART0_S1 & UART_S1_TDRE)) {
    270e:	4e1d      	ldr	r6, [pc, #116]	; (2784 <serial_putchar.part.0+0x94>)
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    2710:	3401      	adds	r4, #1
    2712:	2c3f      	cmp	r4, #63	; 0x3f
    2714:	bf8a      	itet	hi
    2716:	f04f 0a00 	movhi.w	sl, #0
    271a:	fa5f fa84 	uxtbls.w	sl, r4
    271e:	4654      	movhi	r4, sl
	while (tx_buffer_tail == head) {
    2720:	46ab      	mov	fp, r5
    2722:	782b      	ldrb	r3, [r5, #0]
    2724:	42a3      	cmp	r3, r4
    2726:	d116      	bne.n	2756 <serial_putchar.part.0+0x66>
		int priority = nvic_execution_priority();
    2728:	f7ff fe08 	bl	233c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    272c:	2840      	cmp	r0, #64	; 0x40
    272e:	dc1f      	bgt.n	2770 <serial_putchar.part.0+0x80>
			if ((UART0_S1 & UART_S1_TDRE)) {
    2730:	7933      	ldrb	r3, [r6, #4]
    2732:	061b      	lsls	r3, r3, #24
    2734:	d5f5      	bpl.n	2722 <serial_putchar.part.0+0x32>
				uint32_t tail = tx_buffer_tail;
    2736:	f89b 3000 	ldrb.w	r3, [fp]
				if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    273a:	3301      	adds	r3, #1
    273c:	2b3f      	cmp	r3, #63	; 0x3f
    273e:	bf86      	itte	hi
    2740:	2200      	movhi	r2, #0
    2742:	4613      	movhi	r3, r2
    2744:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    2746:	f818 3003 	ldrb.w	r3, [r8, r3]
    274a:	b2db      	uxtb	r3, r3
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
    274c:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    274e:	702a      	strb	r2, [r5, #0]

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
    2750:	782b      	ldrb	r3, [r5, #0]
    2752:	42a3      	cmp	r3, r4
    2754:	d0e8      	beq.n	2728 <serial_putchar.part.0+0x38>
		} else if (priority >= 256) {
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    2756:	490c      	ldr	r1, [pc, #48]	; (2788 <serial_putchar.part.0+0x98>)
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <serial_putchar.part.0+0x94>)
			}
		} else if (priority >= 256) {
			yield();
		}
	}
	tx_buffer[head] = c;
    275a:	b2ff      	uxtb	r7, r7
    275c:	f808 7004 	strb.w	r7, [r8, r4]
	transmitting = 1;
    2760:	2001      	movs	r0, #1
	tx_buffer_head = head;
	UART0_C2 = C2_TX_ACTIVE;
    2762:	22bc      	movs	r2, #188	; 0xbc
		} else if (priority >= 256) {
			yield();
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    2764:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    2766:	f889 a000 	strb.w	sl, [r9]
	UART0_C2 = C2_TX_ACTIVE;
    276a:	70da      	strb	r2, [r3, #3]
    276c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = tx_buffer[tail];
				if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART0_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    2770:	28ff      	cmp	r0, #255	; 0xff
    2772:	ddd6      	ble.n	2722 <serial_putchar.part.0+0x32>
			yield();
    2774:	f001 fe4e 	bl	4414 <yield>
    2778:	e7d3      	b.n	2722 <serial_putchar.part.0+0x32>
    277a:	bf00      	nop
    277c:	1fff1330 	.word	0x1fff1330
    2780:	1fff132d 	.word	0x1fff132d
    2784:	4006a000 	.word	0x4006a000
    2788:	1fff132c 	.word	0x1fff132c
    278c:	1fff1334 	.word	0x1fff1334
    2790:	1fff12a8 	.word	0x1fff12a8

00002794 <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    2794:	4a32      	ldr	r2, [pc, #200]	; (2860 <serial_begin+0xcc>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    2796:	4933      	ldr	r1, [pc, #204]	; (2864 <serial_begin+0xd0>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    2798:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
    279a:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    279c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    27a0:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    27a2:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    27a4:	4f30      	ldr	r7, [pc, #192]	; (2868 <serial_begin+0xd4>)
	rx_buffer_tail = 0;
    27a6:	4e31      	ldr	r6, [pc, #196]	; (286c <serial_begin+0xd8>)
	tx_buffer_head = 0;
    27a8:	4d31      	ldr	r5, [pc, #196]	; (2870 <serial_begin+0xdc>)
	tx_buffer_tail = 0;
    27aa:	4c32      	ldr	r4, [pc, #200]	; (2874 <serial_begin+0xe0>)
	transmitting = 0;
    27ac:	4932      	ldr	r1, [pc, #200]	; (2878 <serial_begin+0xe4>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    27ae:	2300      	movs	r3, #0
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    27b0:	2a15      	cmp	r2, #21
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    27b2:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    27b4:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    27b6:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    27b8:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    27ba:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    27bc:	d045      	beq.n	284a <serial_begin+0xb6>
    27be:	2a1b      	cmp	r2, #27
    27c0:	d03e      	beq.n	2840 <serial_begin+0xac>
    27c2:	b382      	cbz	r2, 2826 <serial_begin+0x92>
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    27c4:	4b2d      	ldr	r3, [pc, #180]	; (287c <serial_begin+0xe8>)
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	2b05      	cmp	r3, #5
    27ca:	d034      	beq.n	2836 <serial_begin+0xa2>
    27cc:	2b1a      	cmp	r3, #26
    27ce:	d041      	beq.n	2854 <serial_begin+0xc0>
    27d0:	2b01      	cmp	r3, #1
    27d2:	d01b      	beq.n	280c <serial_begin+0x78>
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    27d4:	281f      	cmp	r0, #31
    27d6:	d81f      	bhi.n	2818 <serial_begin+0x84>
    27d8:	2000      	movs	r0, #0
    27da:	4602      	mov	r2, r0
    27dc:	2501      	movs	r5, #1
	UART0_BDH = (divisor >> 13) & 0x1F;
    27de:	4b28      	ldr	r3, [pc, #160]	; (2880 <serial_begin+0xec>)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    27e0:	4c28      	ldr	r4, [pc, #160]	; (2884 <serial_begin+0xf0>)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
    27e2:	701a      	strb	r2, [r3, #0]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    27e4:	4928      	ldr	r1, [pc, #160]	; (2888 <serial_begin+0xf4>)
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
    27e6:	705d      	strb	r5, [r3, #1]
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    27e8:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    27ea:	f04f 0e02 	mov.w	lr, #2
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    27ee:	2788      	movs	r7, #136	; 0x88
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    27f0:	263c      	movs	r6, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    27f2:	2540      	movs	r5, #64	; 0x40
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    27f4:	7298      	strb	r0, [r3, #10]
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    27f6:	709a      	strb	r2, [r3, #2]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    27f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    27fc:	f883 e013 	strb.w	lr, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    2800:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    2802:	741f      	strb	r7, [r3, #16]
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    2804:	70de      	strb	r6, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    2806:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    2808:	6008      	str	r0, [r1, #0]
    280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    280c:	4b1f      	ldr	r3, [pc, #124]	; (288c <serial_begin+0xf8>)
    280e:	f44f 7251 	mov.w	r2, #836	; 0x344
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    2812:	281f      	cmp	r0, #31
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    2814:	601a      	str	r2, [r3, #0]
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    2816:	d9df      	bls.n	27d8 <serial_begin+0x44>
    2818:	f3c0 3244 	ubfx	r2, r0, #13, #5
    281c:	f3c0 1547 	ubfx	r5, r0, #5, #8
    2820:	f000 001f 	and.w	r0, r0, #31
    2824:	e7db      	b.n	27de <serial_begin+0x4a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2826:	4b1a      	ldr	r3, [pc, #104]	; (2890 <serial_begin+0xfc>)
    2828:	f240 3213 	movw	r2, #787	; 0x313
    282c:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    282e:	4b13      	ldr	r3, [pc, #76]	; (287c <serial_begin+0xe8>)
    2830:	781b      	ldrb	r3, [r3, #0]
    2832:	2b05      	cmp	r3, #5
    2834:	d1ca      	bne.n	27cc <serial_begin+0x38>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    2836:	4b17      	ldr	r3, [pc, #92]	; (2894 <serial_begin+0x100>)
    2838:	f44f 7251 	mov.w	r2, #836	; 0x344
    283c:	601a      	str	r2, [r3, #0]
    283e:	e7c9      	b.n	27d4 <serial_begin+0x40>
		#if defined(KINETISL)
		case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); break;
		case 25: CORE_PIN25_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(4); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2840:	4b15      	ldr	r3, [pc, #84]	; (2898 <serial_begin+0x104>)
    2842:	f240 3213 	movw	r2, #787	; 0x313
    2846:	601a      	str	r2, [r3, #0]
    2848:	e7bc      	b.n	27c4 <serial_begin+0x30>
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    284a:	4b14      	ldr	r3, [pc, #80]	; (289c <serial_begin+0x108>)
    284c:	f240 3213 	movw	r2, #787	; 0x313
    2850:	601a      	str	r2, [r3, #0]
    2852:	e7b7      	b.n	27c4 <serial_begin+0x30>
		#if defined(KINETISL)
		case 4:  CORE_PIN4_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); break;
		case 24: CORE_PIN24_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(4); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    2854:	4b12      	ldr	r3, [pc, #72]	; (28a0 <serial_begin+0x10c>)
    2856:	f44f 7251 	mov.w	r2, #836	; 0x344
    285a:	601a      	str	r2, [r3, #0]
    285c:	e7ba      	b.n	27d4 <serial_begin+0x40>
    285e:	bf00      	nop
    2860:	40048034 	.word	0x40048034
    2864:	1fff12e8 	.word	0x1fff12e8
    2868:	1fff12a4 	.word	0x1fff12a4
    286c:	1fff12a5 	.word	0x1fff12a5
    2870:	1fff1334 	.word	0x1fff1334
    2874:	1fff132d 	.word	0x1fff132d
    2878:	1fff132c 	.word	0x1fff132c
    287c:	1fff08b8 	.word	0x1fff08b8
    2880:	4006a000 	.word	0x4006a000
    2884:	e000e41f 	.word	0xe000e41f
    2888:	e000e100 	.word	0xe000e100
    288c:	4004a044 	.word	0x4004a044
    2890:	4004a040 	.word	0x4004a040
    2894:	4004c01c 	.word	0x4004c01c
    2898:	4004903c 	.word	0x4004903c
    289c:	4004c018 	.word	0x4004c018
    28a0:	40049038 	.word	0x40049038

000028a4 <serial_format>:

void serial_format(uint32_t format)
{
	uint8_t c;

	c = UART0_C1;
    28a4:	4b19      	ldr	r3, [pc, #100]	; (290c <serial_format+0x68>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
    28a6:	4919      	ldr	r1, [pc, #100]	; (290c <serial_format+0x68>)

void serial_format(uint32_t format)
{
	uint8_t c;

	c = UART0_C1;
    28a8:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    28aa:	f003 02ec 	and.w	r2, r3, #236	; 0xec
    28ae:	f000 0303 	and.w	r3, r0, #3
    28b2:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    28b4:	0742      	lsls	r2, r0, #29
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    28b6:	f000 020f 	and.w	r2, r0, #15
{
	uint8_t c;

	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    28ba:	bf48      	it	mi
    28bc:	f043 0310 	orrmi.w	r3, r3, #16
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    28c0:	2a04      	cmp	r2, #4
	uint8_t c;

	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
    28c2:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    28c4:	d01c      	beq.n	2900 <serial_format+0x5c>
	c = UART0_S2 & ~0x10;
    28c6:	4b11      	ldr	r3, [pc, #68]	; (290c <serial_format+0x68>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
    28c8:	4a10      	ldr	r2, [pc, #64]	; (290c <serial_format+0x68>)
	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
    28ca:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    28cc:	06c1      	lsls	r1, r0, #27
	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
    28ce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    28d2:	bf48      	it	mi
    28d4:	f043 0310 	orrmi.w	r3, r3, #16
	UART0_S2 = c;
    28d8:	7153      	strb	r3, [r2, #5]
	c = UART0_C3 & ~0x10;
    28da:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    28dc:	0682      	lsls	r2, r0, #26
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
	c = UART0_C3 & ~0x10;
    28de:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
	UART0_C3 = c;
    28e2:	4a0a      	ldr	r2, [pc, #40]	; (290c <serial_format+0x68>)
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART0_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART0_S2 = c;
	c = UART0_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
    28e4:	bf48      	it	mi
    28e6:	f043 0310 	orrmi.w	r3, r3, #16
	UART0_C3 = c;
    28ea:	7193      	strb	r3, [r2, #6]
	UART0_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    28ec:	05c3      	lsls	r3, r0, #23
    28ee:	d506      	bpl.n	28fe <serial_format+0x5a>
		uint8_t bdl = UART0_BDL;
    28f0:	7853      	ldrb	r3, [r2, #1]
		UART0_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    28f2:	7811      	ldrb	r1, [r2, #0]
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART0_BDL;
    28f4:	b2db      	uxtb	r3, r3
		UART0_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    28f6:	f041 0120 	orr.w	r1, r1, #32
    28fa:	7011      	strb	r1, [r2, #0]
		UART0_BDL = bdl;		// Says BDH not acted on until BDL is written
    28fc:	7053      	strb	r3, [r2, #1]
    28fe:	4770      	bx	lr

	c = UART0_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART0_C1 = c;
	if ((format & 0x0F) == 0x04) UART0_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    2900:	798b      	ldrb	r3, [r1, #6]
    2902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2906:	718b      	strb	r3, [r1, #6]
    2908:	e7dd      	b.n	28c6 <serial_format+0x22>
    290a:	bf00      	nop
    290c:	4006a000 	.word	0x4006a000

00002910 <serial_end>:
#endif
}

void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2910:	4b2a      	ldr	r3, [pc, #168]	; (29bc <serial_end+0xac>)
    2912:	681b      	ldr	r3, [r3, #0]
    2914:	055b      	lsls	r3, r3, #21
    2916:	d536      	bpl.n	2986 <serial_end+0x76>
	}
#endif
}

void serial_end(void)
{
    2918:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
    291a:	4c29      	ldr	r4, [pc, #164]	; (29c0 <serial_end+0xb0>)
    291c:	7823      	ldrb	r3, [r4, #0]
    291e:	b123      	cbz	r3, 292a <serial_end+0x1a>
    2920:	f001 fd78 	bl	4414 <yield>
    2924:	7823      	ldrb	r3, [r4, #0]
    2926:	2b00      	cmp	r3, #0
    2928:	d1fa      	bne.n	2920 <serial_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    292a:	4826      	ldr	r0, [pc, #152]	; (29c4 <serial_end+0xb4>)
	UART0_C2 = 0;
    292c:	4a26      	ldr	r2, [pc, #152]	; (29c8 <serial_end+0xb8>)
	switch (rx_pin_num) {
    292e:	4b27      	ldr	r3, [pc, #156]	; (29cc <serial_end+0xbc>)

void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    2930:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
	UART0_C2 = 0;
    2934:	2100      	movs	r1, #0

void serial_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
    2936:	6004      	str	r4, [r0, #0]
	UART0_C2 = 0;
    2938:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	2b15      	cmp	r3, #21
    293e:	d023      	beq.n	2988 <serial_end+0x78>
    2940:	2b1b      	cmp	r3, #27
    2942:	d035      	beq.n	29b0 <serial_end+0xa0>
    2944:	b91b      	cbnz	r3, 294e <serial_end+0x3e>
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    2946:	4b22      	ldr	r3, [pc, #136]	; (29d0 <serial_end+0xc0>)
    2948:	f240 1203 	movw	r2, #259	; 0x103
    294c:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
	}
	switch (tx_pin_num & 127) {
    294e:	4b21      	ldr	r3, [pc, #132]	; (29d4 <serial_end+0xc4>)
    2950:	781b      	ldrb	r3, [r3, #0]
    2952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2956:	2b05      	cmp	r3, #5
    2958:	d020      	beq.n	299c <serial_end+0x8c>
    295a:	2b1a      	cmp	r3, #26
    295c:	d023      	beq.n	29a6 <serial_end+0x96>
    295e:	2b01      	cmp	r3, #1
    2960:	d103      	bne.n	296a <serial_end+0x5a>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    2962:	4b1d      	ldr	r3, [pc, #116]	; (29d8 <serial_end+0xc8>)
    2964:	f240 1203 	movw	r2, #259	; 0x103
    2968:	601a      	str	r2, [r3, #0]
	}
	UART0_S1;
	UART0_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    296a:	4a1c      	ldr	r2, [pc, #112]	; (29dc <serial_end+0xcc>)
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
	}
	UART0_S1;
    296c:	4b16      	ldr	r3, [pc, #88]	; (29c8 <serial_end+0xb8>)
	UART0_D; // clear leftover error status
	rx_buffer_head = 0;
    296e:	481c      	ldr	r0, [pc, #112]	; (29e0 <serial_end+0xd0>)
	rx_buffer_tail = 0;
    2970:	491c      	ldr	r1, [pc, #112]	; (29e4 <serial_end+0xd4>)
	if (rts_pin) rts_deassert();
    2972:	6812      	ldr	r2, [r2, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
	}
	UART0_S1;
    2974:	791c      	ldrb	r4, [r3, #4]
	UART0_D; // clear leftover error status
    2976:	79db      	ldrb	r3, [r3, #7]
	rx_buffer_head = 0;
    2978:	2300      	movs	r3, #0
    297a:	7003      	strb	r3, [r0, #0]
	rx_buffer_tail = 0;
    297c:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_deassert();
    297e:	b10a      	cbz	r2, 2984 <serial_end+0x74>
    2980:	2301      	movs	r3, #1
    2982:	7013      	strb	r3, [r2, #0]
    2984:	bd10      	pop	{r4, pc}
    2986:	4770      	bx	lr
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART0_STATUS);
	UART0_C2 = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    2988:	4b17      	ldr	r3, [pc, #92]	; (29e8 <serial_end+0xd8>)
    298a:	f240 1203 	movw	r2, #259	; 0x103
    298e:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
	}
	switch (tx_pin_num & 127) {
    2990:	4b10      	ldr	r3, [pc, #64]	; (29d4 <serial_end+0xc4>)
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2998:	2b05      	cmp	r3, #5
    299a:	d1de      	bne.n	295a <serial_end+0x4a>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    299c:	4b13      	ldr	r3, [pc, #76]	; (29ec <serial_end+0xdc>)
    299e:	f240 1203 	movw	r2, #259	; 0x103
    29a2:	601a      	str	r2, [r3, #0]
    29a4:	e7e1      	b.n	296a <serial_end+0x5a>
		#if defined(KINETISL)
		case 4:  CORE_PIN4_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		case 24: CORE_PIN24_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    29a6:	4b12      	ldr	r3, [pc, #72]	; (29f0 <serial_end+0xe0>)
    29a8:	f240 1203 	movw	r2, #259	; 0x103
    29ac:	601a      	str	r2, [r3, #0]
    29ae:	e7dc      	b.n	296a <serial_end+0x5a>
		#if defined(KINETISL)
		case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		case 25: CORE_PIN25_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break;
    29b0:	4b10      	ldr	r3, [pc, #64]	; (29f4 <serial_end+0xe4>)
    29b2:	f240 1203 	movw	r2, #259	; 0x103
    29b6:	601a      	str	r2, [r3, #0]
    29b8:	e7c9      	b.n	294e <serial_end+0x3e>
    29ba:	bf00      	nop
    29bc:	40048034 	.word	0x40048034
    29c0:	1fff132c 	.word	0x1fff132c
    29c4:	e000e180 	.word	0xe000e180
    29c8:	4006a000 	.word	0x4006a000
    29cc:	1fff12e8 	.word	0x1fff12e8
    29d0:	4004a040 	.word	0x4004a040
    29d4:	1fff08b8 	.word	0x1fff08b8
    29d8:	4004a044 	.word	0x4004a044
    29dc:	1fff12a0 	.word	0x1fff12a0
    29e0:	1fff12a4 	.word	0x1fff12a4
    29e4:	1fff12a5 	.word	0x1fff12a5
    29e8:	4004c018 	.word	0x4004c018
    29ec:	4004c01c 	.word	0x4004c01c
    29f0:	40049038 	.word	0x40049038
    29f4:	4004903c 	.word	0x4004903c

000029f8 <serial_set_transmit_pin>:
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
}

void serial_set_transmit_pin(uint8_t pin)
{
    29f8:	4a0a      	ldr	r2, [pc, #40]	; (2a24 <serial_set_transmit_pin+0x2c>)
    29fa:	b538      	push	{r3, r4, r5, lr}
    29fc:	4605      	mov	r5, r0
	while (transmitting) ;
    29fe:	7813      	ldrb	r3, [r2, #0]
    2a00:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    2a04:	2b00      	cmp	r3, #0
    2a06:	d1fa      	bne.n	29fe <serial_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    2a08:	2101      	movs	r1, #1
    2a0a:	4628      	mov	r0, r5
    2a0c:	f7ff fd62 	bl	24d4 <pinMode>
	digitalWrite(pin, LOW);
    2a10:	4621      	mov	r1, r4
    2a12:	4628      	mov	r0, r5
    2a14:	f7ff fd58 	bl	24c8 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    2a18:	4a03      	ldr	r2, [pc, #12]	; (2a28 <serial_set_transmit_pin+0x30>)
    2a1a:	4b04      	ldr	r3, [pc, #16]	; (2a2c <serial_set_transmit_pin+0x34>)
    2a1c:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    2a20:	601a      	str	r2, [r3, #0]
    2a22:	bd38      	pop	{r3, r4, r5, pc}
    2a24:	1fff132c 	.word	0x1fff132c
    2a28:	00005ee0 	.word	0x00005ee0
    2a2c:	1fff1330 	.word	0x1fff1330

00002a30 <serial_set_tx>:

void serial_set_tx(uint8_t pin, uint8_t opendrain)
{
	uint32_t cfg;

	if (opendrain) pin |= 128;
    2a30:	b109      	cbz	r1, 2a36 <serial_set_tx+0x6>
    2a32:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    2a36:	4a1e      	ldr	r2, [pc, #120]	; (2ab0 <serial_set_tx+0x80>)
    2a38:	7813      	ldrb	r3, [r2, #0]
    2a3a:	4298      	cmp	r0, r3
    2a3c:	d01b      	beq.n	2a76 <serial_set_tx+0x46>
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}

void serial_set_tx(uint8_t pin, uint8_t opendrain)
{
    2a3e:	b410      	push	{r4}
	uint32_t cfg;

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    2a40:	4c1c      	ldr	r4, [pc, #112]	; (2ab4 <serial_set_tx+0x84>)
    2a42:	6824      	ldr	r4, [r4, #0]
    2a44:	0564      	lsls	r4, r4, #21
    2a46:	d513      	bpl.n	2a70 <serial_set_tx+0x40>
		switch (tx_pin_num & 127) {
    2a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a4c:	2b05      	cmp	r3, #5
    2a4e:	d02a      	beq.n	2aa6 <serial_set_tx+0x76>
    2a50:	2b1a      	cmp	r3, #26
    2a52:	d024      	beq.n	2a9e <serial_set_tx+0x6e>
    2a54:	2b01      	cmp	r3, #1
    2a56:	d014      	beq.n	2a82 <serial_set_tx+0x52>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    2a58:	2900      	cmp	r1, #0
		}
		switch (pin & 127) {
    2a5a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    2a5e:	bf14      	ite	ne
    2a60:	2360      	movne	r3, #96	; 0x60
    2a62:	2344      	moveq	r3, #68	; 0x44
		}
		switch (pin & 127) {
    2a64:	2905      	cmp	r1, #5
    2a66:	d015      	beq.n	2a94 <serial_set_tx+0x64>
    2a68:	291a      	cmp	r1, #26
    2a6a:	d00e      	beq.n	2a8a <serial_set_tx+0x5a>
    2a6c:	2901      	cmp	r1, #1
    2a6e:	d003      	beq.n	2a78 <serial_set_tx+0x48>
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    2a70:	7010      	strb	r0, [r2, #0]
}
    2a72:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a76:	4770      	bx	lr
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 1:  CORE_PIN1_CONFIG = cfg | PORT_PCR_MUX(3); break;
    2a78:	490f      	ldr	r1, [pc, #60]	; (2ab8 <serial_set_tx+0x88>)
    2a7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2a7e:	600b      	str	r3, [r1, #0]
    2a80:	e7f6      	b.n	2a70 <serial_set_tx+0x40>

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
		switch (tx_pin_num & 127) {
			case 1:  CORE_PIN1_CONFIG = 0; break; // PTB17
    2a82:	4b0d      	ldr	r3, [pc, #52]	; (2ab8 <serial_set_tx+0x88>)
    2a84:	2400      	movs	r4, #0
    2a86:	601c      	str	r4, [r3, #0]
    2a88:	e7e6      	b.n	2a58 <serial_set_tx+0x28>
			#if defined(KINETISL)
			case 4:  CORE_PIN4_CONFIG = cfg | PORT_PCR_MUX(2); break;
			case 24: CORE_PIN24_CONFIG = cfg | PORT_PCR_MUX(4); break;
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = cfg | PORT_PCR_MUX(3); break;
    2a8a:	490c      	ldr	r1, [pc, #48]	; (2abc <serial_set_tx+0x8c>)
    2a8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2a90:	600b      	str	r3, [r1, #0]
    2a92:	e7ed      	b.n	2a70 <serial_set_tx+0x40>
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 1:  CORE_PIN1_CONFIG = cfg | PORT_PCR_MUX(3); break;
			case 5:  CORE_PIN5_CONFIG = cfg | PORT_PCR_MUX(3); break;
    2a94:	490a      	ldr	r1, [pc, #40]	; (2ac0 <serial_set_tx+0x90>)
    2a96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    2a9a:	600b      	str	r3, [r1, #0]
    2a9c:	e7e8      	b.n	2a70 <serial_set_tx+0x40>
			#if defined(KINETISL)
			case 4:  CORE_PIN4_CONFIG = 0; break; // PTA2
			case 24: CORE_PIN24_CONFIG = 0; break; // PTE20
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 26: CORE_PIN26_CONFIG = 0; break; //PTA14
    2a9e:	4b07      	ldr	r3, [pc, #28]	; (2abc <serial_set_tx+0x8c>)
    2aa0:	2400      	movs	r4, #0
    2aa2:	601c      	str	r4, [r3, #0]
    2aa4:	e7d8      	b.n	2a58 <serial_set_tx+0x28>
	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
		switch (tx_pin_num & 127) {
			case 1:  CORE_PIN1_CONFIG = 0; break; // PTB17
			case 5:  CORE_PIN5_CONFIG = 0; break; // PTD7
    2aa6:	4b06      	ldr	r3, [pc, #24]	; (2ac0 <serial_set_tx+0x90>)
    2aa8:	2400      	movs	r4, #0
    2aaa:	601c      	str	r4, [r3, #0]
    2aac:	e7d4      	b.n	2a58 <serial_set_tx+0x28>
    2aae:	bf00      	nop
    2ab0:	1fff08b8 	.word	0x1fff08b8
    2ab4:	40048034 	.word	0x40048034
    2ab8:	4004a044 	.word	0x4004a044
    2abc:	40049038 	.word	0x40049038
    2ac0:	4004c01c 	.word	0x4004c01c

00002ac4 <serial_set_rx>:
	tx_pin_num = pin;
}

void serial_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
    2ac4:	4a17      	ldr	r2, [pc, #92]	; (2b24 <serial_set_rx+0x60>)
    2ac6:	7813      	ldrb	r3, [r2, #0]
    2ac8:	4283      	cmp	r3, r0
    2aca:	d00e      	beq.n	2aea <serial_set_rx+0x26>
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
    2acc:	4916      	ldr	r1, [pc, #88]	; (2b28 <serial_set_rx+0x64>)
    2ace:	6809      	ldr	r1, [r1, #0]
    2ad0:	0549      	lsls	r1, r1, #21
    2ad2:	d509      	bpl.n	2ae8 <serial_set_rx+0x24>
		switch (rx_pin_num) {
    2ad4:	2b15      	cmp	r3, #21
    2ad6:	d020      	beq.n	2b1a <serial_set_rx+0x56>
    2ad8:	2b1b      	cmp	r3, #27
    2ada:	d01a      	beq.n	2b12 <serial_set_rx+0x4e>
    2adc:	b15b      	cbz	r3, 2af6 <serial_set_rx+0x32>
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
			#endif
		}
		switch (pin) {
    2ade:	2815      	cmp	r0, #21
    2ae0:	d00d      	beq.n	2afe <serial_set_rx+0x3a>
    2ae2:	281b      	cmp	r0, #27
    2ae4:	d010      	beq.n	2b08 <serial_set_rx+0x44>
    2ae6:	b108      	cbz	r0, 2aec <serial_set_rx+0x28>
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    2ae8:	7010      	strb	r0, [r2, #0]
    2aea:	4770      	bx	lr
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
			#endif
		}
		switch (pin) {
			case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2aec:	4b0f      	ldr	r3, [pc, #60]	; (2b2c <serial_set_rx+0x68>)
    2aee:	f240 3113 	movw	r1, #787	; 0x313
    2af2:	6019      	str	r1, [r3, #0]
    2af4:	e7f8      	b.n	2ae8 <serial_set_rx+0x24>
void serial_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
		switch (rx_pin_num) {
			case 0:  CORE_PIN0_CONFIG = 0; break; // PTB16
    2af6:	490d      	ldr	r1, [pc, #52]	; (2b2c <serial_set_rx+0x68>)
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
			#endif
		}
		switch (pin) {
    2af8:	2815      	cmp	r0, #21
void serial_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
		switch (rx_pin_num) {
			case 0:  CORE_PIN0_CONFIG = 0; break; // PTB16
    2afa:	600b      	str	r3, [r1, #0]
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
			#endif
		}
		switch (pin) {
    2afc:	d1f1      	bne.n	2ae2 <serial_set_rx+0x1e>
			case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2afe:	4b0c      	ldr	r3, [pc, #48]	; (2b30 <serial_set_rx+0x6c>)
    2b00:	f240 3113 	movw	r1, #787	; 0x313
    2b04:	6019      	str	r1, [r3, #0]
    2b06:	e7ef      	b.n	2ae8 <serial_set_rx+0x24>
			#if defined(KINETISL)
			case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); break;
			case 25: CORE_PIN25_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(4); break;
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    2b08:	4b0a      	ldr	r3, [pc, #40]	; (2b34 <serial_set_rx+0x70>)
    2b0a:	f240 3113 	movw	r1, #787	; 0x313
    2b0e:	6019      	str	r1, [r3, #0]
    2b10:	e7ea      	b.n	2ae8 <serial_set_rx+0x24>
			#if defined(KINETISL)
			case 3:  CORE_PIN3_CONFIG = 0; break; // PTA1
			case 25: CORE_PIN25_CONFIG = 0; break; // PTE21
			#endif
			#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
			case 27: CORE_PIN27_CONFIG = 0; break; // PTA15
    2b12:	4b08      	ldr	r3, [pc, #32]	; (2b34 <serial_set_rx+0x70>)
    2b14:	2100      	movs	r1, #0
    2b16:	6019      	str	r1, [r3, #0]
    2b18:	e7e1      	b.n	2ade <serial_set_rx+0x1a>
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART0)) {
		switch (rx_pin_num) {
			case 0:  CORE_PIN0_CONFIG = 0; break; // PTB16
			case 21: CORE_PIN21_CONFIG = 0; break; // PTD6
    2b1a:	4b05      	ldr	r3, [pc, #20]	; (2b30 <serial_set_rx+0x6c>)
    2b1c:	2100      	movs	r1, #0
    2b1e:	6019      	str	r1, [r3, #0]
    2b20:	e7dd      	b.n	2ade <serial_set_rx+0x1a>
    2b22:	bf00      	nop
    2b24:	1fff12e8 	.word	0x1fff12e8
    2b28:	40048034 	.word	0x40048034
    2b2c:	4004a040 	.word	0x4004a040
    2b30:	4004c018 	.word	0x4004c018
    2b34:	4004903c 	.word	0x4004903c

00002b38 <serial_set_rts>:



int serial_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    2b38:	4b0d      	ldr	r3, [pc, #52]	; (2b70 <serial_set_rts+0x38>)
    2b3a:	681b      	ldr	r3, [r3, #0]
    2b3c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
    2b40:	d005      	beq.n	2b4e <serial_set_rts+0x16>
	if (pin < CORE_NUM_DIGITAL) {
    2b42:	283f      	cmp	r0, #63	; 0x3f
    2b44:	d905      	bls.n	2b52 <serial_set_rts+0x1a>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    2b46:	4b0b      	ldr	r3, [pc, #44]	; (2b74 <serial_set_rts+0x3c>)
    2b48:	2000      	movs	r0, #0
    2b4a:	6018      	str	r0, [r3, #0]
		return 0;
    2b4c:	4770      	bx	lr



int serial_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    2b4e:	4618      	mov	r0, r3
    2b50:	4770      	bx	lr
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    2b52:	4b09      	ldr	r3, [pc, #36]	; (2b78 <serial_set_rts+0x40>)
}



int serial_set_rts(uint8_t pin)
{
    2b54:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    2b56:	4c07      	ldr	r4, [pc, #28]	; (2b74 <serial_set_rts+0x3c>)
    2b58:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    2b5c:	6023      	str	r3, [r4, #0]
		#if defined(KINETISL)
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
    2b5e:	2101      	movs	r1, #1
    2b60:	f7ff fcb8 	bl	24d4 <pinMode>
		rts_assert();
    2b64:	6823      	ldr	r3, [r4, #0]
    2b66:	2200      	movs	r2, #0
    2b68:	701a      	strb	r2, [r3, #0]
		UART0_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART0_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    2b6a:	2001      	movs	r0, #1
    2b6c:	bd10      	pop	{r4, pc}
    2b6e:	bf00      	nop
    2b70:	40048034 	.word	0x40048034
    2b74:	1fff12a0 	.word	0x1fff12a0
    2b78:	00005ee0 	.word	0x00005ee0

00002b7c <serial_set_cts>:
}

int serial_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
    2b7c:	4b0f      	ldr	r3, [pc, #60]	; (2bbc <serial_set_cts+0x40>)
    2b7e:	681b      	ldr	r3, [r3, #0]
    2b80:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
    2b84:	d008      	beq.n	2b98 <serial_set_cts+0x1c>
	if (pin == 18) {
    2b86:	2812      	cmp	r0, #18
    2b88:	d008      	beq.n	2b9c <serial_set_cts+0x20>
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else if (pin == 20) {
    2b8a:	2814      	cmp	r0, #20
    2b8c:	d011      	beq.n	2bb2 <serial_set_cts+0x36>
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART0_MODEM &= ~UART_MODEM_TXCTSE;
    2b8e:	4a0c      	ldr	r2, [pc, #48]	; (2bc0 <serial_set_cts+0x44>)
    2b90:	7b53      	ldrb	r3, [r2, #13]
    2b92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2b96:	7353      	strb	r3, [r2, #13]
		return 0;
    2b98:	2000      	movs	r0, #0
    2b9a:	4770      	bx	lr
int serial_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
	if (pin == 18) {
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    2b9c:	4b09      	ldr	r3, [pc, #36]	; (2bc4 <serial_set_cts+0x48>)
    2b9e:	f240 3202 	movw	r2, #770	; 0x302
    2ba2:	601a      	str	r2, [r3, #0]
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else {
		UART0_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART0_MODEM |= UART_MODEM_TXCTSE;
    2ba4:	4a06      	ldr	r2, [pc, #24]	; (2bc0 <serial_set_cts+0x44>)
    2ba6:	7b53      	ldrb	r3, [r2, #13]
    2ba8:	f043 0301 	orr.w	r3, r3, #1
    2bac:	7353      	strb	r3, [r2, #13]
	return 1;
    2bae:	2001      	movs	r0, #1
    2bb0:	4770      	bx	lr
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return 0;
	if (pin == 18) {
		CORE_PIN18_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
	} else if (pin == 20) {
		CORE_PIN20_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    2bb2:	4b05      	ldr	r3, [pc, #20]	; (2bc8 <serial_set_cts+0x4c>)
    2bb4:	f240 3202 	movw	r2, #770	; 0x302
    2bb8:	601a      	str	r2, [r3, #0]
    2bba:	e7f3      	b.n	2ba4 <serial_set_cts+0x28>
    2bbc:	40048034 	.word	0x40048034
    2bc0:	4006a000 	.word	0x4006a000
    2bc4:	4004a00c 	.word	0x4004a00c
    2bc8:	4004c014 	.word	0x4004c014

00002bcc <serial_putchar>:

void serial_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2bcc:	4b03      	ldr	r3, [pc, #12]	; (2bdc <serial_putchar+0x10>)
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	055b      	lsls	r3, r3, #21
    2bd2:	d501      	bpl.n	2bd8 <serial_putchar+0xc>
    2bd4:	f7ff bd8c 	b.w	26f0 <serial_putchar.part.0>
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	40048034 	.word	0x40048034

00002be0 <serial_write>:
	UART0_C2 = C2_TX_ACTIVE;
}

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
    2be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2be4:	4b29      	ldr	r3, [pc, #164]	; (2c8c <serial_write+0xac>)
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	055a      	lsls	r2, r3, #21
    2bea:	d548      	bpl.n	2c7e <serial_write+0x9e>
	if (transmit_pin) transmit_assert();
    2bec:	4b28      	ldr	r3, [pc, #160]	; (2c90 <serial_write+0xb0>)
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	4605      	mov	r5, r0
    2bf2:	b10b      	cbz	r3, 2bf8 <serial_write+0x18>
    2bf4:	2201      	movs	r2, #1
    2bf6:	701a      	strb	r2, [r3, #0]

#ifdef HAS_KINETISK_UART0_FIFO
void serial_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
    2bf8:	eb05 0a01 	add.w	sl, r5, r1
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
    2bfc:	4555      	cmp	r5, sl
    2bfe:	d240      	bcs.n	2c82 <serial_write+0xa2>
    2c00:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2ca0 <serial_write+0xc0>
    2c04:	4c23      	ldr	r4, [pc, #140]	; (2c94 <serial_write+0xb4>)
    2c06:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2ca4 <serial_write+0xc4>
		head = tx_buffer_head;
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
			UART0_C2 = C2_TX_ACTIVE;
    2c0a:	4f23      	ldr	r7, [pc, #140]	; (2c98 <serial_write+0xb8>)
    2c0c:	e00a      	b.n	2c24 <serial_write+0x44>
				} else if (priority >= 256) {
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
    2c0e:	f815 2b01 	ldrb.w	r2, [r5], #1
    2c12:	f809 200b 	strb.w	r2, [r9, fp]
		transmitting = 1;
    2c16:	4a21      	ldr	r2, [pc, #132]	; (2c9c <serial_write+0xbc>)
    2c18:	2301      	movs	r3, #1
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
    2c1a:	45aa      	cmp	sl, r5
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		tx_buffer[head] = *p++;
		transmitting = 1;
    2c1c:	7013      	strb	r3, [r2, #0]
		tx_buffer_head = head;
    2c1e:	f888 6000 	strb.w	r6, [r8]
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
    2c22:	d02e      	beq.n	2c82 <serial_write+0xa2>
		head = tx_buffer_head;
    2c24:	f898 3000 	ldrb.w	r3, [r8]
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
    2c28:	7822      	ldrb	r2, [r4, #0]

	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	if (transmit_pin) transmit_assert();
	while (p < end) {
		head = tx_buffer_head;
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
    2c2a:	f103 0b01 	add.w	fp, r3, #1
    2c2e:	f1bb 0f3f 	cmp.w	fp, #63	; 0x3f
    2c32:	bf86      	itte	hi
    2c34:	2600      	movhi	r6, #0
    2c36:	46b3      	movhi	fp, r6
    2c38:	fa5f f68b 	uxtbls.w	r6, fp
		if (tx_buffer_tail == head) {
    2c3c:	4593      	cmp	fp, r2
    2c3e:	d1e6      	bne.n	2c0e <serial_write+0x2e>
			UART0_C2 = C2_TX_ACTIVE;
    2c40:	22bc      	movs	r2, #188	; 0xbc
    2c42:	70fa      	strb	r2, [r7, #3]
    2c44:	e005      	b.n	2c52 <serial_write+0x72>
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
    2c46:	793a      	ldrb	r2, [r7, #4]
    2c48:	0613      	lsls	r3, r2, #24
    2c4a:	d40b      	bmi.n	2c64 <serial_write+0x84>
						tx_buffer_tail = tail;
					}
				} else if (priority >= 256) {
					yield();
				}
			} while (tx_buffer_tail == head);
    2c4c:	7822      	ldrb	r2, [r4, #0]
    2c4e:	4593      	cmp	fp, r2
    2c50:	d1dd      	bne.n	2c0e <serial_write+0x2e>
		head = tx_buffer_head;
		if (++head >= SERIAL1_TX_BUFFER_SIZE) head = 0;
		if (tx_buffer_tail == head) {
			UART0_C2 = C2_TX_ACTIVE;
			do {
				int priority = nvic_execution_priority();
    2c52:	f7ff fb73 	bl	233c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    2c56:	2840      	cmp	r0, #64	; 0x40
    2c58:	ddf5      	ble.n	2c46 <serial_write+0x66>
						n = tx_buffer[tail];
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
						tx_buffer_tail = tail;
					}
				} else if (priority >= 256) {
    2c5a:	28ff      	cmp	r0, #255	; 0xff
    2c5c:	ddf6      	ble.n	2c4c <serial_write+0x6c>
					yield();
    2c5e:	f001 fbd9 	bl	4414 <yield>
    2c62:	e7f3      	b.n	2c4c <serial_write+0x6c>
			UART0_C2 = C2_TX_ACTIVE;
			do {
				int priority = nvic_execution_priority();
				if (priority <= IRQ_PRIORITY) {
					if ((UART0_S1 & UART_S1_TDRE)) {
						uint32_t tail = tx_buffer_tail;
    2c64:	7822      	ldrb	r2, [r4, #0]
						if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    2c66:	3201      	adds	r2, #1
    2c68:	2a3f      	cmp	r2, #63	; 0x3f
    2c6a:	bf86      	itte	hi
    2c6c:	2100      	movhi	r1, #0
    2c6e:	460a      	movhi	r2, r1
    2c70:	b2d1      	uxtbls	r1, r2
						n = tx_buffer[tail];
    2c72:	f819 2002 	ldrb.w	r2, [r9, r2]
    2c76:	b2d2      	uxtb	r2, r2
						if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
						UART0_D = n;
    2c78:	71fa      	strb	r2, [r7, #7]
						tx_buffer_tail = tail;
    2c7a:	7021      	strb	r1, [r4, #0]
    2c7c:	e7e6      	b.n	2c4c <serial_write+0x6c>
    2c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		tx_buffer[head] = *p++;
		transmitting = 1;
		tx_buffer_head = head;
	}
	UART0_C2 = C2_TX_ACTIVE;
    2c82:	4b05      	ldr	r3, [pc, #20]	; (2c98 <serial_write+0xb8>)
    2c84:	22bc      	movs	r2, #188	; 0xbc
    2c86:	70da      	strb	r2, [r3, #3]
    2c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c8c:	40048034 	.word	0x40048034
    2c90:	1fff1330 	.word	0x1fff1330
    2c94:	1fff132d 	.word	0x1fff132d
    2c98:	4006a000 	.word	0x4006a000
    2c9c:	1fff132c 	.word	0x1fff132c
    2ca0:	1fff1334 	.word	0x1fff1334
    2ca4:	1fff12a8 	.word	0x1fff12a8

00002ca8 <serial_flush>:
	while (count-- > 0) serial_putchar(*p++);
}
#endif

void serial_flush(void)
{
    2ca8:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    2caa:	4c04      	ldr	r4, [pc, #16]	; (2cbc <serial_flush+0x14>)
    2cac:	7823      	ldrb	r3, [r4, #0]
    2cae:	b123      	cbz	r3, 2cba <serial_flush+0x12>
    2cb0:	f001 fbb0 	bl	4414 <yield>
    2cb4:	7823      	ldrb	r3, [r4, #0]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d1fa      	bne.n	2cb0 <serial_flush+0x8>
    2cba:	bd10      	pop	{r4, pc}
    2cbc:	1fff132c 	.word	0x1fff132c

00002cc0 <serial_write_buffer_free>:
int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
	tail = tx_buffer_tail;
    2cc0:	4a06      	ldr	r2, [pc, #24]	; (2cdc <serial_write_buffer_free+0x1c>)

int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2cc2:	4b07      	ldr	r3, [pc, #28]	; (2ce0 <serial_write_buffer_free+0x20>)
    2cc4:	781b      	ldrb	r3, [r3, #0]
	tail = tx_buffer_tail;
    2cc6:	7810      	ldrb	r0, [r2, #0]

int serial_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    2cc8:	b2db      	uxtb	r3, r3
	tail = tx_buffer_tail;
    2cca:	b2c0      	uxtb	r0, r0
	if (head >= tail) return SERIAL1_TX_BUFFER_SIZE - 1 - head + tail;
    2ccc:	4283      	cmp	r3, r0
    2cce:	bf2c      	ite	cs
    2cd0:	303f      	addcs	r0, #63	; 0x3f
	return tail - head - 1;
    2cd2:	f100 30ff 	addcc.w	r0, r0, #4294967295
    2cd6:	1ac0      	subs	r0, r0, r3
}
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	1fff132d 	.word	0x1fff132d
    2ce0:	1fff1334 	.word	0x1fff1334

00002ce4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ce4:	4a05      	ldr	r2, [pc, #20]	; (2cfc <serial_available+0x18>)
	tail = rx_buffer_tail;
    2ce6:	4b06      	ldr	r3, [pc, #24]	; (2d00 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2ce8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    2cea:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2cec:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    2cee:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    2cf0:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    2cf2:	bf38      	it	cc
    2cf4:	3040      	addcc	r0, #64	; 0x40
    2cf6:	1ac0      	subs	r0, r0, r3
}
    2cf8:	4770      	bx	lr
    2cfa:	bf00      	nop
    2cfc:	1fff12a4 	.word	0x1fff12a4
    2d00:	1fff12a5 	.word	0x1fff12a5

00002d04 <serial_getchar>:

int serial_getchar(void)
{
    2d04:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2d06:	4b15      	ldr	r3, [pc, #84]	; (2d5c <serial_getchar+0x58>)
	tail = rx_buffer_tail;
    2d08:	4c15      	ldr	r4, [pc, #84]	; (2d60 <serial_getchar+0x5c>)
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2d0a:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    2d0c:	7823      	ldrb	r3, [r4, #0]
int serial_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    2d0e:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    2d10:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    2d12:	429a      	cmp	r2, r3
    2d14:	d01e      	beq.n	2d54 <serial_getchar+0x50>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    2d16:	3301      	adds	r3, #1
    2d18:	2b3f      	cmp	r3, #63	; 0x3f
    2d1a:	d90e      	bls.n	2d3a <serial_getchar+0x36>
	c = rx_buffer[tail];
    2d1c:	4911      	ldr	r1, [pc, #68]	; (2d64 <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    2d1e:	4b12      	ldr	r3, [pc, #72]	; (2d68 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2d20:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    2d22:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    2d24:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2d26:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    2d28:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    2d2a:	b121      	cbz	r1, 2d36 <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2d2c:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    2d2e:	2b1a      	cmp	r3, #26
    2d30:	dc01      	bgt.n	2d36 <serial_getchar+0x32>
    2d32:	2300      	movs	r3, #0
    2d34:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    2d36:	bc30      	pop	{r4, r5}
    2d38:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2d3a:	480a      	ldr	r0, [pc, #40]	; (2d64 <serial_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    2d3c:	490a      	ldr	r1, [pc, #40]	; (2d68 <serial_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2d3e:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    2d40:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    2d42:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    2d44:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    2d46:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    2d48:	2900      	cmp	r1, #0
    2d4a:	d0f4      	beq.n	2d36 <serial_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    2d4c:	429a      	cmp	r2, r3
		else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2d4e:	bf38      	it	cc
    2d50:	3240      	addcc	r2, #64	; 0x40
    2d52:	e7eb      	b.n	2d2c <serial_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2d54:	f04f 30ff 	mov.w	r0, #4294967295
    2d58:	e7ed      	b.n	2d36 <serial_getchar+0x32>
    2d5a:	bf00      	nop
    2d5c:	1fff12a4 	.word	0x1fff12a4
    2d60:	1fff12a5 	.word	0x1fff12a5
    2d64:	1fff12ec 	.word	0x1fff12ec
    2d68:	1fff12a0 	.word	0x1fff12a0

00002d6c <serial_peek>:

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d6c:	4a08      	ldr	r2, [pc, #32]	; (2d90 <serial_peek+0x24>)
	tail = rx_buffer_tail;
    2d6e:	4b09      	ldr	r3, [pc, #36]	; (2d94 <serial_peek+0x28>)

int serial_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    2d70:	7812      	ldrb	r2, [r2, #0]
	tail = rx_buffer_tail;
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    2d76:	429a      	cmp	r2, r3
    2d78:	d007      	beq.n	2d8a <serial_peek+0x1e>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
    2d7a:	3301      	adds	r3, #1
    2d7c:	2b40      	cmp	r3, #64	; 0x40
    2d7e:	bf28      	it	cs
    2d80:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    2d82:	4a05      	ldr	r2, [pc, #20]	; (2d98 <serial_peek+0x2c>)
    2d84:	5cd0      	ldrb	r0, [r2, r3]
    2d86:	b2c0      	uxtb	r0, r0
    2d88:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    2d8a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    2d8e:	4770      	bx	lr
    2d90:	1fff12a4 	.word	0x1fff12a4
    2d94:	1fff12a5 	.word	0x1fff12a5
    2d98:	1fff12ec 	.word	0x1fff12ec

00002d9c <serial_clear>:

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
    2d9c:	4b0d      	ldr	r3, [pc, #52]	; (2dd4 <serial_clear+0x38>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	055b      	lsls	r3, r3, #21
    2da2:	d516      	bpl.n	2dd2 <serial_clear+0x36>
	if (++tail >= SERIAL1_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}

void serial_clear(void)
{
    2da4:	b430      	push	{r4, r5}
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2da6:	4b0c      	ldr	r3, [pc, #48]	; (2dd8 <serial_clear+0x3c>)
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    2da8:	4c0c      	ldr	r4, [pc, #48]	; (2ddc <serial_clear+0x40>)

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2daa:	78da      	ldrb	r2, [r3, #3]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
	if (rts_pin) rts_assert();
    2dac:	480c      	ldr	r0, [pc, #48]	; (2de0 <serial_clear+0x44>)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    2dae:	490d      	ldr	r1, [pc, #52]	; (2de4 <serial_clear+0x48>)

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2db0:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2db4:	2540      	movs	r5, #64	; 0x40

void serial_clear(void)
{
#ifdef HAS_KINETISK_UART0_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2db6:	70da      	strb	r2, [r3, #3]
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2db8:	745d      	strb	r5, [r3, #17]
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    2dba:	78da      	ldrb	r2, [r3, #3]
    2dbc:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    2dc0:	70da      	strb	r2, [r3, #3]
#endif
	rx_buffer_head = rx_buffer_tail;
    2dc2:	7823      	ldrb	r3, [r4, #0]
	if (rts_pin) rts_assert();
    2dc4:	6802      	ldr	r2, [r0, #0]
	if (!(SIM_SCGC4 & SIM_SCGC4_UART0)) return;
	UART0_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
	UART0_CFIFO = UART_CFIFO_RXFLUSH;
	UART0_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    2dc6:	b2db      	uxtb	r3, r3
    2dc8:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    2dca:	b10a      	cbz	r2, 2dd0 <serial_clear+0x34>
    2dcc:	2300      	movs	r3, #0
    2dce:	7013      	strb	r3, [r2, #0]
}
    2dd0:	bc30      	pop	{r4, r5}
    2dd2:	4770      	bx	lr
    2dd4:	40048034 	.word	0x40048034
    2dd8:	4006a000 	.word	0x4006a000
    2ddc:	1fff12a5 	.word	0x1fff12a5
    2de0:	1fff12a0 	.word	0x1fff12a0
    2de4:	1fff12a4 	.word	0x1fff12a4

00002de8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    2de8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    2dea:	4b38      	ldr	r3, [pc, #224]	; (2ecc <uart0_status_isr+0xe4>)
    2dec:	791a      	ldrb	r2, [r3, #4]
    2dee:	f012 0f30 	tst.w	r2, #48	; 0x30
    2df2:	d02c      	beq.n	2e4e <uart0_status_isr+0x66>
		__disable_irq();
    2df4:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    2df6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    2df8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    2dfc:	2900      	cmp	r1, #0
    2dfe:	d03d      	beq.n	2e7c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    2e00:	b662      	cpsie	i
			head = rx_buffer_head;
    2e02:	4f33      	ldr	r7, [pc, #204]	; (2ed0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    2e04:	4933      	ldr	r1, [pc, #204]	; (2ed4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e06:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    2e08:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e0a:	4e33      	ldr	r6, [pc, #204]	; (2ed8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e0c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    2e0e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    2e10:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    2e12:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2e14:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e16:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    2e18:	bf28      	it	cs
    2e1a:	2300      	movcs	r3, #0
				if (newhead != tail) {
    2e1c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    2e1e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    2e22:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    2e24:	bf1c      	itt	ne
    2e26:	54f1      	strbne	r1, [r6, r3]
    2e28:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    2e2a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    2e2e:	d1f0      	bne.n	2e12 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    2e30:	4b2a      	ldr	r3, [pc, #168]	; (2edc <uart0_status_isr+0xf4>)
    2e32:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    2e34:	b2c2      	uxtb	r2, r0
    2e36:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    2e38:	b14b      	cbz	r3, 2e4e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    2e3a:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2e3c:	bf36      	itet	cc
    2e3e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    2e42:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    2e44:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    2e46:	2827      	cmp	r0, #39	; 0x27
    2e48:	bfc4      	itt	gt
    2e4a:	2201      	movgt	r2, #1
    2e4c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    2e4e:	491f      	ldr	r1, [pc, #124]	; (2ecc <uart0_status_isr+0xe4>)
    2e50:	78ca      	ldrb	r2, [r1, #3]
    2e52:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2e54:	0615      	lsls	r5, r2, #24
    2e56:	d416      	bmi.n	2e86 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    2e58:	0652      	lsls	r2, r2, #25
    2e5a:	d50d      	bpl.n	2e78 <uart0_status_isr+0x90>
    2e5c:	4b1b      	ldr	r3, [pc, #108]	; (2ecc <uart0_status_isr+0xe4>)
    2e5e:	791b      	ldrb	r3, [r3, #4]
    2e60:	065b      	lsls	r3, r3, #25
    2e62:	d509      	bpl.n	2e78 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    2e64:	4b1e      	ldr	r3, [pc, #120]	; (2ee0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e66:	491f      	ldr	r1, [pc, #124]	; (2ee4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    2e68:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    2e6a:	2200      	movs	r2, #0
    2e6c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    2e6e:	b103      	cbz	r3, 2e72 <uart0_status_isr+0x8a>
    2e70:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    2e72:	4b16      	ldr	r3, [pc, #88]	; (2ecc <uart0_status_isr+0xe4>)
    2e74:	223c      	movs	r2, #60	; 0x3c
    2e76:	70da      	strb	r2, [r3, #3]
	}
}
    2e78:	bcf0      	pop	{r4, r5, r6, r7}
    2e7a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2e7c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    2e7e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    2e80:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    2e82:	b662      	cpsie	i
    2e84:	e7e3      	b.n	2e4e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    2e86:	790b      	ldrb	r3, [r1, #4]
    2e88:	061c      	lsls	r4, r3, #24
    2e8a:	d5e5      	bpl.n	2e58 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    2e8c:	4b16      	ldr	r3, [pc, #88]	; (2ee8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    2e8e:	4e17      	ldr	r6, [pc, #92]	; (2eec <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e90:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    2e92:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    2e94:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    2e96:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    2e98:	429c      	cmp	r4, r3
    2e9a:	d00e      	beq.n	2eba <uart0_status_isr+0xd2>
    2e9c:	4d14      	ldr	r5, [pc, #80]	; (2ef0 <uart0_status_isr+0x108>)
    2e9e:	e001      	b.n	2ea4 <uart0_status_isr+0xbc>
    2ea0:	42a3      	cmp	r3, r4
    2ea2:	d00a      	beq.n	2eba <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    2ea4:	3301      	adds	r3, #1
    2ea6:	2b40      	cmp	r3, #64	; 0x40
    2ea8:	bf28      	it	cs
    2eaa:	2300      	movcs	r3, #0
			avail = UART0_S1;
    2eac:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    2eae:	5ce8      	ldrb	r0, [r5, r3]
    2eb0:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    2eb2:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    2eb4:	7d08      	ldrb	r0, [r1, #20]
    2eb6:	2807      	cmp	r0, #7
    2eb8:	d9f2      	bls.n	2ea0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    2eba:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2ebc:	4903      	ldr	r1, [pc, #12]	; (2ecc <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    2ebe:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    2ec0:	790b      	ldrb	r3, [r1, #4]
    2ec2:	0618      	lsls	r0, r3, #24
    2ec4:	bf44      	itt	mi
    2ec6:	237c      	movmi	r3, #124	; 0x7c
    2ec8:	70cb      	strbmi	r3, [r1, #3]
    2eca:	e7c5      	b.n	2e58 <uart0_status_isr+0x70>
    2ecc:	4006a000 	.word	0x4006a000
    2ed0:	1fff12a4 	.word	0x1fff12a4
    2ed4:	1fff12a5 	.word	0x1fff12a5
    2ed8:	1fff12ec 	.word	0x1fff12ec
    2edc:	1fff12a0 	.word	0x1fff12a0
    2ee0:	1fff1330 	.word	0x1fff1330
    2ee4:	1fff132c 	.word	0x1fff132c
    2ee8:	1fff1334 	.word	0x1fff1334
    2eec:	1fff132d 	.word	0x1fff132d
    2ef0:	1fff12a8 	.word	0x1fff12a8

00002ef4 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2ef4:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2ef6:	2b03      	cmp	r3, #3
    2ef8:	d814      	bhi.n	2f24 <usb_rx+0x30>
	__disable_irq();
    2efa:	b672      	cpsid	i
	ret = rx_first[endpoint];
    2efc:	490a      	ldr	r1, [pc, #40]	; (2f28 <usb_rx+0x34>)
    2efe:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2f02:	b168      	cbz	r0, 2f20 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2f04:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2f06:	4c09      	ldr	r4, [pc, #36]	; (2f2c <usb_rx+0x38>)
    2f08:	8805      	ldrh	r5, [r0, #0]
    2f0a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2f0e:	6846      	ldr	r6, [r0, #4]
    2f10:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2f14:	1b52      	subs	r2, r2, r5
    2f16:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2f1a:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2f1c:	bc70      	pop	{r4, r5, r6}
    2f1e:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2f20:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2f22:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2f24:	2000      	movs	r0, #0
    2f26:	4770      	bx	lr
    2f28:	1fff1390 	.word	0x1fff1390
    2f2c:	1fff1498 	.word	0x1fff1498

00002f30 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2f30:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2f32:	2803      	cmp	r0, #3
    2f34:	d80b      	bhi.n	2f4e <usb_tx_packet_count+0x1e>
	__disable_irq();
    2f36:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2f38:	4b07      	ldr	r3, [pc, #28]	; (2f58 <usb_tx_packet_count+0x28>)
    2f3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2f3e:	b143      	cbz	r3, 2f52 <usb_tx_packet_count+0x22>
    2f40:	2000      	movs	r0, #0
    2f42:	685b      	ldr	r3, [r3, #4]
    2f44:	3001      	adds	r0, #1
    2f46:	2b00      	cmp	r3, #0
    2f48:	d1fb      	bne.n	2f42 <usb_tx_packet_count+0x12>
	__enable_irq();
    2f4a:	b662      	cpsie	i
	return count;
    2f4c:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2f4e:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2f50:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2f52:	4618      	mov	r0, r3
    2f54:	e7f9      	b.n	2f4a <usb_tx_packet_count+0x1a>
    2f56:	bf00      	nop
    2f58:	1fff13e4 	.word	0x1fff13e4

00002f5c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2f5c:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2f5e:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f60:	4a2b      	ldr	r2, [pc, #172]	; (3010 <usb_rx_memory+0xb4>)
    2f62:	7813      	ldrb	r3, [r2, #0]
    2f64:	071d      	lsls	r5, r3, #28
    2f66:	d506      	bpl.n	2f76 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f68:	4b2a      	ldr	r3, [pc, #168]	; (3014 <usb_rx_memory+0xb8>)
    2f6a:	6a19      	ldr	r1, [r3, #32]
    2f6c:	2900      	cmp	r1, #0
    2f6e:	d036      	beq.n	2fde <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f70:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2f72:	2900      	cmp	r1, #0
    2f74:	d041      	beq.n	2ffa <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f76:	7853      	ldrb	r3, [r2, #1]
    2f78:	071c      	lsls	r4, r3, #28
    2f7a:	d506      	bpl.n	2f8a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f7c:	4b25      	ldr	r3, [pc, #148]	; (3014 <usb_rx_memory+0xb8>)
    2f7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2f80:	2900      	cmp	r1, #0
    2f82:	d03e      	beq.n	3002 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f84:	6c99      	ldr	r1, [r3, #72]	; 0x48
    2f86:	2900      	cmp	r1, #0
    2f88:	d039      	beq.n	2ffe <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f8a:	7893      	ldrb	r3, [r2, #2]
    2f8c:	0719      	lsls	r1, r3, #28
    2f8e:	d505      	bpl.n	2f9c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2f90:	4b20      	ldr	r3, [pc, #128]	; (3014 <usb_rx_memory+0xb8>)
    2f92:	6e19      	ldr	r1, [r3, #96]	; 0x60
    2f94:	2900      	cmp	r1, #0
    2f96:	d036      	beq.n	3006 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2f98:	6e99      	ldr	r1, [r3, #104]	; 0x68
    2f9a:	b189      	cbz	r1, 2fc0 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2f9c:	78d3      	ldrb	r3, [r2, #3]
    2f9e:	071b      	lsls	r3, r3, #28
    2fa0:	d507      	bpl.n	2fb2 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fa2:	4b1c      	ldr	r3, [pc, #112]	; (3014 <usb_rx_memory+0xb8>)
    2fa4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2fa8:	b37a      	cbz	r2, 300a <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2fae:	2111      	movs	r1, #17
    2fb0:	b13a      	cbz	r2, 2fc2 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2fb2:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2fb4:	4b18      	ldr	r3, [pc, #96]	; (3018 <usb_rx_memory+0xbc>)
    2fb6:	2200      	movs	r2, #0
    2fb8:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2fba:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2fbc:	f000 be62 	b.w	3c84 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2fc0:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2fc2:	4c15      	ldr	r4, [pc, #84]	; (3018 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2fc4:	4d15      	ldr	r5, [pc, #84]	; (301c <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    2fc6:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2fc8:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2fcc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2fd0:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2fd2:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2fd4:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2fd6:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2fd8:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2fda:	bc30      	pop	{r4, r5}
    2fdc:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2fde:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2fe0:	4c0d      	ldr	r4, [pc, #52]	; (3018 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2fe2:	4d0f      	ldr	r5, [pc, #60]	; (3020 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    2fe4:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2fe6:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2fee:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2ff0:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2ff2:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2ff4:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2ff6:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2ff8:	e7ef      	b.n	2fda <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2ffa:	2105      	movs	r1, #5
    2ffc:	e7e1      	b.n	2fc2 <usb_rx_memory+0x66>
    2ffe:	2109      	movs	r1, #9
    3000:	e7df      	b.n	2fc2 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3002:	2208      	movs	r2, #8
    3004:	e7ec      	b.n	2fe0 <usb_rx_memory+0x84>
    3006:	220c      	movs	r2, #12
    3008:	e7ea      	b.n	2fe0 <usb_rx_memory+0x84>
    300a:	2210      	movs	r2, #16
    300c:	e7e8      	b.n	2fe0 <usb_rx_memory+0x84>
    300e:	bf00      	nop
    3010:	00006178 	.word	0x00006178
    3014:	1fff0000 	.word	0x1fff0000
    3018:	1fff140d 	.word	0x1fff140d
    301c:	004000c8 	.word	0x004000c8
    3020:	00400088 	.word	0x00400088

00003024 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3024:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3026:	2b03      	cmp	r3, #3
    3028:	d81d      	bhi.n	3066 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    302a:	4a1b      	ldr	r2, [pc, #108]	; (3098 <usb_tx+0x74>)
    302c:	0140      	lsls	r0, r0, #5
    302e:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3032:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3034:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3036:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3038:	4c18      	ldr	r4, [pc, #96]	; (309c <usb_tx+0x78>)
    303a:	5ce2      	ldrb	r2, [r4, r3]
    303c:	2a03      	cmp	r2, #3
    303e:	d81b      	bhi.n	3078 <usb_tx+0x54>
    3040:	e8df f002 	tbb	[pc, r2]
    3044:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3048:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    304a:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    304c:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    304e:	f010 0f08 	tst.w	r0, #8
    3052:	bf14      	ite	ne
    3054:	23c8      	movne	r3, #200	; 0xc8
    3056:	2388      	moveq	r3, #136	; 0x88
    3058:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    305c:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    305e:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3060:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3062:	b662      	cpsie	i
}
    3064:	bc30      	pop	{r4, r5}
    3066:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3068:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    306a:	2202      	movs	r2, #2
		break;
    306c:	e7ed      	b.n	304a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    306e:	2205      	movs	r2, #5
    3070:	e7eb      	b.n	304a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3072:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3074:	2204      	movs	r2, #4
		break;
    3076:	e7e8      	b.n	304a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3078:	4a09      	ldr	r2, [pc, #36]	; (30a0 <usb_tx+0x7c>)
    307a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    307e:	b138      	cbz	r0, 3090 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3080:	4a08      	ldr	r2, [pc, #32]	; (30a4 <usb_tx+0x80>)
    3082:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    3086:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    308c:	b662      	cpsie	i
		return;
    308e:	e7e9      	b.n	3064 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    3094:	4a03      	ldr	r2, [pc, #12]	; (30a4 <usb_tx+0x80>)
    3096:	e7f7      	b.n	3088 <usb_tx+0x64>
    3098:	1fff0000 	.word	0x1fff0000
    309c:	1fff141c 	.word	0x1fff141c
    30a0:	1fff13e4 	.word	0x1fff13e4
    30a4:	1fff13f4 	.word	0x1fff13f4

000030a8 <usb_isr>:
}



void usb_isr(void)
{
    30a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    30ac:	f8df b318 	ldr.w	fp, [pc, #792]	; 33c8 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    30b0:	f8df a318 	ldr.w	sl, [pc, #792]	; 33cc <usb_isr+0x324>
}



void usb_isr(void)
{
    30b4:	b087      	sub	sp, #28
    30b6:	e044      	b.n	3142 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    30b8:	4fae      	ldr	r7, [pc, #696]	; (3374 <usb_isr+0x2cc>)
    30ba:	ea4f 0893 	mov.w	r8, r3, lsr #2
    30be:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    30c2:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    30c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    30c8:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    30cc:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    30ce:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    30d2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    30d6:	2b00      	cmp	r3, #0
    30d8:	f040 8104 	bne.w	32e4 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    30dc:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    30e0:	0c1b      	lsrs	r3, r3, #16
    30e2:	b299      	uxth	r1, r3
    30e4:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    30e8:	2b00      	cmp	r3, #0
    30ea:	f000 80f2 	beq.w	32d2 <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    30ee:	4ba2      	ldr	r3, [pc, #648]	; (3378 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    30f0:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    30f4:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    30f8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    30fc:	2a00      	cmp	r2, #0
    30fe:	f000 816e 	beq.w	33de <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3102:	4d9e      	ldr	r5, [pc, #632]	; (337c <usb_isr+0x2d4>)
    3104:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    3108:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    310a:	4c9d      	ldr	r4, [pc, #628]	; (3380 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    310c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3110:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    3114:	4419      	add	r1, r3
    3116:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    311a:	f000 fd93 	bl	3c44 <usb_malloc>
					if (packet) {
    311e:	2800      	cmp	r0, #0
    3120:	f000 8156 	beq.w	33d0 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3124:	4a97      	ldr	r2, [pc, #604]	; (3384 <usb_isr+0x2dc>)
    3126:	4b98      	ldr	r3, [pc, #608]	; (3388 <usb_isr+0x2e0>)
    3128:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    312c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3130:	bf18      	it	ne
    3132:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3134:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3138:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    313c:	2308      	movs	r3, #8
    313e:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3142:	f89b 4000 	ldrb.w	r4, [fp]
    3146:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3148:	0761      	lsls	r1, r4, #29
    314a:	d51b      	bpl.n	3184 <usb_isr+0xdc>
		if (usb_configuration) {
    314c:	4b8f      	ldr	r3, [pc, #572]	; (338c <usb_isr+0x2e4>)
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	b1ab      	cbz	r3, 317e <usb_isr+0xd6>
			t = usb_reboot_timer;
    3152:	498f      	ldr	r1, [pc, #572]	; (3390 <usb_isr+0x2e8>)
    3154:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    3156:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    315a:	b12a      	cbz	r2, 3168 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    315c:	3b01      	subs	r3, #1
    315e:	b2db      	uxtb	r3, r3
    3160:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3162:	2b00      	cmp	r3, #0
    3164:	f000 84ef 	beq.w	3b46 <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3168:	498a      	ldr	r1, [pc, #552]	; (3394 <usb_isr+0x2ec>)
    316a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    316c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3170:	b12a      	cbz	r2, 317e <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    3172:	3b01      	subs	r3, #1
    3174:	b2db      	uxtb	r3, r3
    3176:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3178:	2b00      	cmp	r3, #0
    317a:	f000 80f7 	beq.w	336c <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    317e:	2304      	movs	r3, #4
    3180:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3184:	f004 0308 	and.w	r3, r4, #8
    3188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    318c:	2b00      	cmp	r3, #0
    318e:	f000 80d6 	beq.w	333e <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    3192:	f89a 3000 	ldrb.w	r3, [sl]
    3196:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3198:	091e      	lsrs	r6, r3, #4
    319a:	d18d      	bne.n	30b8 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    319c:	089c      	lsrs	r4, r3, #2
    319e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 3374 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31a2:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    31a6:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31aa:	f3c2 0283 	ubfx	r2, r2, #2, #4
    31ae:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    31b0:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    31b2:	2a0c      	cmp	r2, #12
    31b4:	d87e      	bhi.n	32b4 <usb_isr+0x20c>
    31b6:	e8df f002 	tbb	[pc, r2]
    31ba:	8181      	.short	0x8181
    31bc:	7d7d7d7d 	.word	0x7d7d7d7d
    31c0:	7d477d7d 	.word	0x7d477d7d
    31c4:	7d7d      	.short	0x7d7d
    31c6:	07          	.byte	0x07
    31c7:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    31c8:	6808      	ldr	r0, [r1, #0]
    31ca:	4d73      	ldr	r5, [pc, #460]	; (3398 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    31cc:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    31ce:	4f73      	ldr	r7, [pc, #460]	; (339c <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    31d0:	4e73      	ldr	r6, [pc, #460]	; (33a0 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    31d2:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31d4:	b281      	uxth	r1, r0
    31d6:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    31da:	4b6a      	ldr	r3, [pc, #424]	; (3384 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    31dc:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    31de:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    31e2:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31e4:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    31e6:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    31ea:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    31ec:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    31f0:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    31f4:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    31f8:	4c5e      	ldr	r4, [pc, #376]	; (3374 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    31fa:	f200 80f4 	bhi.w	33e6 <usb_isr+0x33e>
    31fe:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    3202:	f080 8378 	bcs.w	38f6 <usb_isr+0x84e>
    3206:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    320a:	f000 8362 	beq.w	38d2 <usb_isr+0x82a>
    320e:	f200 8287 	bhi.w	3720 <usb_isr+0x678>
    3212:	2980      	cmp	r1, #128	; 0x80
    3214:	f000 82ec 	beq.w	37f0 <usb_isr+0x748>
    3218:	2982      	cmp	r1, #130	; 0x82
    321a:	f040 831e 	bne.w	385a <usb_isr+0x7b2>
    321e:	88a9      	ldrh	r1, [r5, #4]
    3220:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    3224:	2904      	cmp	r1, #4
    3226:	f200 8318 	bhi.w	385a <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    322a:	485e      	ldr	r0, [pc, #376]	; (33a4 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    322c:	4c5e      	ldr	r4, [pc, #376]	; (33a8 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    322e:	0089      	lsls	r1, r1, #2
    3230:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3232:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3234:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3236:	7802      	ldrb	r2, [r0, #0]
    3238:	0793      	lsls	r3, r2, #30
    323a:	f140 8379 	bpl.w	3930 <usb_isr+0x888>
    323e:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    3242:	f04f 0e02 	mov.w	lr, #2
    3246:	e2d8      	b.n	37fa <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3248:	4f54      	ldr	r7, [pc, #336]	; (339c <usb_isr+0x2f4>)
    324a:	683a      	ldr	r2, [r7, #0]
		if (data) {
    324c:	b342      	cbz	r2, 32a0 <usb_isr+0x1f8>
			size = ep0_tx_len;
    324e:	4b57      	ldr	r3, [pc, #348]	; (33ac <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3250:	4e53      	ldr	r6, [pc, #332]	; (33a0 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3252:	4957      	ldr	r1, [pc, #348]	; (33b0 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    3254:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3256:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3258:	780d      	ldrb	r5, [r1, #0]
    325a:	2840      	cmp	r0, #64	; 0x40
    325c:	4686      	mov	lr, r0
    325e:	f045 0802 	orr.w	r8, r5, #2
    3262:	bf28      	it	cs
    3264:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3268:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    326a:	f084 0401 	eor.w	r4, r4, #1
    326e:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3270:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3274:	bf0c      	ite	eq
    3276:	2488      	moveq	r4, #136	; 0x88
    3278:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    327a:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    327e:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3280:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3284:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3288:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    328a:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    328c:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3290:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3292:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3294:	b918      	cbnz	r0, 329e <usb_isr+0x1f6>
    3296:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    329a:	bf18      	it	ne
    329c:	2200      	movne	r2, #0
    329e:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    32a0:	4b3d      	ldr	r3, [pc, #244]	; (3398 <usb_isr+0x2f0>)
    32a2:	881a      	ldrh	r2, [r3, #0]
    32a4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    32a8:	d104      	bne.n	32b4 <usb_isr+0x20c>
			setup.bRequest = 0;
    32aa:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    32ac:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    32ae:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    32b0:	4b40      	ldr	r3, [pc, #256]	; (33b4 <usb_isr+0x30c>)
    32b2:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    32b4:	4a40      	ldr	r2, [pc, #256]	; (33b8 <usb_isr+0x310>)
    32b6:	2301      	movs	r3, #1
    32b8:	7013      	strb	r3, [r2, #0]
    32ba:	e73f      	b.n	313c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    32bc:	4a36      	ldr	r2, [pc, #216]	; (3398 <usb_isr+0x2f0>)
    32be:	8815      	ldrh	r5, [r2, #0]
    32c0:	f242 0021 	movw	r0, #8225	; 0x2021
    32c4:	4285      	cmp	r5, r0
    32c6:	f000 81ff 	beq.w	36c8 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    32ca:	4a2e      	ldr	r2, [pc, #184]	; (3384 <usb_isr+0x2dc>)
    32cc:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
    32d0:	e7f0      	b.n	32b4 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    32d2:	4a2c      	ldr	r2, [pc, #176]	; (3384 <usb_isr+0x2dc>)
    32d4:	4b2c      	ldr	r3, [pc, #176]	; (3388 <usb_isr+0x2e0>)
    32d6:	f019 0f08 	tst.w	r9, #8
    32da:	bf18      	it	ne
    32dc:	4613      	movne	r3, r2
    32de:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    32e2:	e72b      	b.n	313c <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    32e4:	f000 fcce 	bl	3c84 <usb_free>
				packet = tx_first[endpoint];
    32e8:	4a34      	ldr	r2, [pc, #208]	; (33bc <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    32ea:	4935      	ldr	r1, [pc, #212]	; (33c0 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    32ec:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    32f0:	2b00      	cmp	r3, #0
    32f2:	f000 81b6 	beq.w	3662 <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    32f6:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    32f8:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    32fa:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    32fe:	f103 0208 	add.w	r2, r3, #8
    3302:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    3306:	2c03      	cmp	r4, #3
    3308:	d805      	bhi.n	3316 <usb_isr+0x26e>
    330a:	e8df f004 	tbb	[pc, r4]
    330e:	0f12      	.short	0x0f12
    3310:	0215      	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    3312:	2204      	movs	r2, #4
    3314:	558a      	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    3316:	881a      	ldrh	r2, [r3, #0]
    3318:	f019 0f08 	tst.w	r9, #8
    331c:	bf0c      	ite	eq
    331e:	2388      	moveq	r3, #136	; 0x88
    3320:	23c8      	movne	r3, #200	; 0xc8
    3322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    3326:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    332a:	e707      	b.n	313c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    332c:	2202      	movs	r2, #2
    332e:	558a      	strb	r2, [r1, r6]
						break;
    3330:	e7f1      	b.n	3316 <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3332:	2203      	movs	r2, #3
    3334:	558a      	strb	r2, [r1, r6]
						break;
    3336:	e7ee      	b.n	3316 <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3338:	2205      	movs	r2, #5
    333a:	558a      	strb	r2, [r1, r6]
						break;
    333c:	e7eb      	b.n	3316 <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    333e:	07e0      	lsls	r0, r4, #31
    3340:	f100 821a 	bmi.w	3778 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3344:	0621      	lsls	r1, r4, #24
    3346:	f100 8249 	bmi.w	37dc <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    334a:	07a2      	lsls	r2, r4, #30
    334c:	d506      	bpl.n	335c <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    334e:	4a1d      	ldr	r2, [pc, #116]	; (33c4 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3350:	491d      	ldr	r1, [pc, #116]	; (33c8 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3352:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3354:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3356:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    3358:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    335a:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    335c:	06e3      	lsls	r3, r4, #27
    335e:	d502      	bpl.n	3366 <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3360:	4b19      	ldr	r3, [pc, #100]	; (33c8 <usb_isr+0x320>)
    3362:	2210      	movs	r2, #16
    3364:	701a      	strb	r2, [r3, #0]
	}

}
    3366:	b007      	add	sp, #28
    3368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    336c:	f000 fdf6 	bl	3f5c <usb_serial_flush_callback>
    3370:	e705      	b.n	317e <usb_isr+0xd6>
    3372:	bf00      	nop
    3374:	1fff0000 	.word	0x1fff0000
    3378:	1fff1390 	.word	0x1fff1390
    337c:	1fff133c 	.word	0x1fff133c
    3380:	1fff1498 	.word	0x1fff1498
    3384:	004000c8 	.word	0x004000c8
    3388:	00400088 	.word	0x00400088
    338c:	1fff1418 	.word	0x1fff1418
    3390:	1fff13a1 	.word	0x1fff13a1
    3394:	1fff1420 	.word	0x1fff1420
    3398:	1fff1404 	.word	0x1fff1404
    339c:	1fff1338 	.word	0x1fff1338
    33a0:	1fff13a0 	.word	0x1fff13a0
    33a4:	400720c0 	.word	0x400720c0
    33a8:	1fff1410 	.word	0x1fff1410
    33ac:	1fff134c 	.word	0x1fff134c
    33b0:	1fff140c 	.word	0x1fff140c
    33b4:	40072098 	.word	0x40072098
    33b8:	40072094 	.word	0x40072094
    33bc:	1fff13e4 	.word	0x1fff13e4
    33c0:	1fff141c 	.word	0x1fff141c
    33c4:	40072088 	.word	0x40072088
    33c8:	40072080 	.word	0x40072080
    33cc:	40072090 	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    33d0:	4aab      	ldr	r2, [pc, #684]	; (3680 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    33d2:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    33d6:	7813      	ldrb	r3, [r2, #0]
    33d8:	3301      	adds	r3, #1
    33da:	7013      	strb	r3, [r2, #0]
    33dc:	e6ae      	b.n	313c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    33de:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    33e2:	4da8      	ldr	r5, [pc, #672]	; (3684 <usb_isr+0x5dc>)
    33e4:	e691      	b.n	310a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33e6:	f242 0021 	movw	r0, #8225	; 0x2021
    33ea:	4281      	cmp	r1, r0
    33ec:	f000 8135 	beq.w	365a <usb_isr+0x5b2>
    33f0:	f200 81af 	bhi.w	3752 <usb_isr+0x6aa>
    33f4:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    33f8:	f000 821b 	beq.w	3832 <usb_isr+0x78a>
    33fc:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    3400:	f040 822b 	bne.w	385a <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3404:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3406:	49a0      	ldr	r1, [pc, #640]	; (3688 <usb_isr+0x5e0>)
    3408:	78a8      	ldrb	r0, [r5, #2]
    340a:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    340c:	0612      	lsls	r2, r2, #24
    340e:	f100 8345 	bmi.w	3a9c <usb_isr+0x9f4>
    3412:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    3416:	499d      	ldr	r1, [pc, #628]	; (368c <usb_isr+0x5e4>)
    3418:	0613      	lsls	r3, r2, #24
    341a:	f100 833a 	bmi.w	3a92 <usb_isr+0x9ea>
    341e:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    3422:	499a      	ldr	r1, [pc, #616]	; (368c <usb_isr+0x5e4>)
    3424:	0615      	lsls	r5, r2, #24
    3426:	f100 832f 	bmi.w	3a88 <usb_isr+0x9e0>
    342a:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    342e:	4997      	ldr	r1, [pc, #604]	; (368c <usb_isr+0x5e4>)
    3430:	0614      	lsls	r4, r2, #24
    3432:	f100 8324 	bmi.w	3a7e <usb_isr+0x9d6>
    3436:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    343a:	4994      	ldr	r1, [pc, #592]	; (368c <usb_isr+0x5e4>)
    343c:	0610      	lsls	r0, r2, #24
    343e:	f100 8319 	bmi.w	3a74 <usb_isr+0x9cc>
    3442:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    3446:	4991      	ldr	r1, [pc, #580]	; (368c <usb_isr+0x5e4>)
    3448:	0612      	lsls	r2, r2, #24
    344a:	f100 830e 	bmi.w	3a6a <usb_isr+0x9c2>
    344e:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    3452:	498e      	ldr	r1, [pc, #568]	; (368c <usb_isr+0x5e4>)
    3454:	0613      	lsls	r3, r2, #24
    3456:	f100 8303 	bmi.w	3a60 <usb_isr+0x9b8>
    345a:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    345e:	498b      	ldr	r1, [pc, #556]	; (368c <usb_isr+0x5e4>)
    3460:	0615      	lsls	r5, r2, #24
    3462:	f100 82f8 	bmi.w	3a56 <usb_isr+0x9ae>
    3466:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    346a:	4988      	ldr	r1, [pc, #544]	; (368c <usb_isr+0x5e4>)
    346c:	0614      	lsls	r4, r2, #24
    346e:	f100 8329 	bmi.w	3ac4 <usb_isr+0xa1c>
    3472:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    3476:	4985      	ldr	r1, [pc, #532]	; (368c <usb_isr+0x5e4>)
    3478:	0610      	lsls	r0, r2, #24
    347a:	f100 831e 	bmi.w	3aba <usb_isr+0xa12>
    347e:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    3482:	4982      	ldr	r1, [pc, #520]	; (368c <usb_isr+0x5e4>)
    3484:	0612      	lsls	r2, r2, #24
    3486:	f100 8313 	bmi.w	3ab0 <usb_isr+0xa08>
    348a:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    348e:	497f      	ldr	r1, [pc, #508]	; (368c <usb_isr+0x5e4>)
    3490:	0613      	lsls	r3, r2, #24
    3492:	f100 8308 	bmi.w	3aa6 <usb_isr+0x9fe>
    3496:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    349a:	497c      	ldr	r1, [pc, #496]	; (368c <usb_isr+0x5e4>)
    349c:	0615      	lsls	r5, r2, #24
    349e:	f100 831c 	bmi.w	3ada <usb_isr+0xa32>
    34a2:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    34a6:	4979      	ldr	r1, [pc, #484]	; (368c <usb_isr+0x5e4>)
    34a8:	0614      	lsls	r4, r2, #24
    34aa:	f100 8310 	bmi.w	3ace <usb_isr+0xa26>
    34ae:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    34b2:	4976      	ldr	r1, [pc, #472]	; (368c <usb_isr+0x5e4>)
    34b4:	0610      	lsls	r0, r2, #24
    34b6:	f100 82c8 	bmi.w	3a4a <usb_isr+0x9a2>
    34ba:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    34be:	4973      	ldr	r1, [pc, #460]	; (368c <usb_isr+0x5e4>)
    34c0:	0612      	lsls	r2, r2, #24
    34c2:	f100 82bc 	bmi.w	3a3e <usb_isr+0x996>
    34c6:	4872      	ldr	r0, [pc, #456]	; (3690 <usb_isr+0x5e8>)
    34c8:	4a72      	ldr	r2, [pc, #456]	; (3694 <usb_isr+0x5ec>)
    34ca:	4973      	ldr	r1, [pc, #460]	; (3698 <usb_isr+0x5f0>)
    34cc:	9001      	str	r0, [sp, #4]
    34ce:	4873      	ldr	r0, [pc, #460]	; (369c <usb_isr+0x5f4>)
    34d0:	4d6c      	ldr	r5, [pc, #432]	; (3684 <usb_isr+0x5dc>)
    34d2:	4c73      	ldr	r4, [pc, #460]	; (36a0 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    34d4:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    34d6:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    34d8:	9605      	str	r6, [sp, #20]
    34da:	9502      	str	r5, [sp, #8]
    34dc:	4680      	mov	r8, r0
    34de:	4617      	mov	r7, r2
    34e0:	460e      	mov	r6, r1
    34e2:	461d      	mov	r5, r3
    34e4:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    34e6:	6838      	ldr	r0, [r7, #0]
			while (p) {
    34e8:	b128      	cbz	r0, 34f6 <usb_isr+0x44e>
				n = p->next;
    34ea:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    34ec:	f000 fbca 	bl	3c84 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    34f0:	4620      	mov	r0, r4
    34f2:	2c00      	cmp	r4, #0
    34f4:	d1f9      	bne.n	34ea <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    34f6:	2300      	movs	r3, #0
    34f8:	603b      	str	r3, [r7, #0]
			rx_last[i] = NULL;
    34fa:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    34fc:	6830      	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    34fe:	461a      	mov	r2, r3
    3500:	2300      	movs	r3, #0
    3502:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3506:	b128      	cbz	r0, 3514 <usb_isr+0x46c>
				n = p->next;
    3508:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    350a:	f000 fbbb 	bl	3c84 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    350e:	4620      	mov	r0, r4
    3510:	2c00      	cmp	r4, #0
    3512:	d1f9      	bne.n	3508 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3514:	2200      	movs	r2, #0
    3516:	6032      	str	r2, [r6, #0]
			tx_last[i] = NULL;
    3518:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    351a:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    351e:	4611      	mov	r1, r2
    3520:	2200      	movs	r2, #0
    3522:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3526:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3528:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    352a:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    352c:	f04f 0100 	mov.w	r1, #0
    3530:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    3534:	2b03      	cmp	r3, #3
    3536:	d809      	bhi.n	354c <usb_isr+0x4a4>
    3538:	e8df f013 	tbh	[pc, r3, lsl #1]
    353c:	0004014b 	.word	0x0004014b
    3540:	0004014b 	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3544:	f04f 0301 	mov.w	r3, #1
    3548:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    354c:	3501      	adds	r5, #1
    354e:	2d04      	cmp	r5, #4
    3550:	f107 0704 	add.w	r7, r7, #4
    3554:	f106 0604 	add.w	r6, r6, #4
    3558:	f108 0801 	add.w	r8, r8, #1
    355c:	d1c3      	bne.n	34e6 <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    355e:	4c51      	ldr	r4, [pc, #324]	; (36a4 <usb_isr+0x5fc>)
			*reg = epconf;
    3560:	4b51      	ldr	r3, [pc, #324]	; (36a8 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3562:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3564:	4d46      	ldr	r5, [pc, #280]	; (3680 <usb_isr+0x5d8>)
    3566:	9f04      	ldr	r7, [sp, #16]
    3568:	9e05      	ldr	r6, [sp, #20]
    356a:	2100      	movs	r1, #0
    356c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    356e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3570:	0713      	lsls	r3, r2, #28
    3572:	f100 824f 	bmi.w	3a14 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3576:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    3578:	494c      	ldr	r1, [pc, #304]	; (36ac <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    357a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 368c <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    357e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3580:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3582:	f04f 0100 	mov.w	r1, #0
    3586:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    358a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    358e:	f100 822b 	bmi.w	39e8 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3592:	4947      	ldr	r1, [pc, #284]	; (36b0 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3594:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    3596:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3598:	2100      	movs	r1, #0
    359a:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    359e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35a2:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35a4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 368c <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35a8:	f100 81dc 	bmi.w	3964 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    35ac:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    35ae:	4941      	ldr	r1, [pc, #260]	; (36b4 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35b0:	4c36      	ldr	r4, [pc, #216]	; (368c <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    35b2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35b4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35b6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35b8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    35bc:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    35c0:	f100 81b9 	bmi.w	3936 <usb_isr+0x88e>
    35c4:	7833      	ldrb	r3, [r6, #0]
    35c6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    35c8:	2100      	movs	r1, #0
    35ca:	f083 0201 	eor.w	r2, r3, #1
    35ce:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    35d2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    35d6:	2000      	movs	r0, #0
    35d8:	9002      	str	r0, [sp, #8]
    35da:	4680      	mov	r8, r0
    35dc:	4684      	mov	ip, r0
    35de:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    35e0:	4935      	ldr	r1, [pc, #212]	; (36b8 <usb_isr+0x610>)
    35e2:	780d      	ldrb	r5, [r1, #0]
    35e4:	f045 0e02 	orr.w	lr, r5, #2
    35e8:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    35ec:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    35ee:	9b01      	ldr	r3, [sp, #4]
    35f0:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    35f2:	9b03      	ldr	r3, [sp, #12]
    35f4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    35f6:	bf0c      	ite	eq
    35f8:	2488      	moveq	r4, #136	; 0x88
    35fa:	24c8      	movne	r4, #200	; 0xc8
    35fc:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3600:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3604:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3608:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    360a:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    360c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 368c <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    3610:	4b2a      	ldr	r3, [pc, #168]	; (36bc <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    3612:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 36b8 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3616:	2800      	cmp	r0, #0
    3618:	f040 8126 	bne.w	3868 <usb_isr+0x7c0>
    361c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    3620:	d11b      	bne.n	365a <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3622:	f044 0c02 	orr.w	ip, r4, #2
    3626:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    362a:	9c02      	ldr	r4, [sp, #8]
    362c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 368c <usb_isr+0x5e4>
    3630:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3632:	2a00      	cmp	r2, #0
    3634:	f040 812e 	bne.w	3894 <usb_isr+0x7ec>
    3638:	0402      	lsls	r2, r0, #16
    363a:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    363e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3642:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3646:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3648:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    364a:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    364c:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    364e:	2840      	cmp	r0, #64	; 0x40
    3650:	d103      	bne.n	365a <usb_isr+0x5b2>
    3652:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3654:	4a1a      	ldr	r2, [pc, #104]	; (36c0 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3656:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3658:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    365a:	4a1a      	ldr	r2, [pc, #104]	; (36c4 <usb_isr+0x61c>)
    365c:	2301      	movs	r3, #1
    365e:	7013      	strb	r3, [r2, #0]
    3660:	e628      	b.n	32b4 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3662:	5d8b      	ldrb	r3, [r1, r6]
    3664:	2b03      	cmp	r3, #3
    3666:	f200 812d 	bhi.w	38c4 <usb_isr+0x81c>
    366a:	a201      	add	r2, pc, #4	; (adr r2, 3670 <usb_isr+0x5c8>)
    366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3670:	0000313d 	.word	0x0000313d
    3674:	0000313d 	.word	0x0000313d
    3678:	000037c7 	.word	0x000037c7
    367c:	000037cd 	.word	0x000037cd
    3680:	1fff140d 	.word	0x1fff140d
    3684:	1fff133c 	.word	0x1fff133c
    3688:	1fff1418 	.word	0x1fff1418
    368c:	1fff0000 	.word	0x1fff0000
    3690:	1fff13f4 	.word	0x1fff13f4
    3694:	1fff1390 	.word	0x1fff1390
    3698:	1fff13e4 	.word	0x1fff13e4
    369c:	1fff141c 	.word	0x1fff141c
    36a0:	1fff1498 	.word	0x1fff1498
    36a4:	00006178 	.word	0x00006178
    36a8:	400720c4 	.word	0x400720c4
    36ac:	400720c8 	.word	0x400720c8
    36b0:	400720cc 	.word	0x400720cc
    36b4:	400720d0 	.word	0x400720d0
    36b8:	1fff140c 	.word	0x1fff140c
    36bc:	1fff13a0 	.word	0x1fff13a0
    36c0:	1fff134c 	.word	0x1fff134c
    36c4:	40072094 	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    36c8:	8892      	ldrh	r2, [r2, #4]
    36ca:	b992      	cbnz	r2, 36f2 <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    36cc:	4ab1      	ldr	r2, [pc, #708]	; (3994 <usb_isr+0x8ec>)
    36ce:	780d      	ldrb	r5, [r1, #0]
    36d0:	7848      	ldrb	r0, [r1, #1]
    36d2:	7015      	strb	r5, [r2, #0]
    36d4:	7050      	strb	r0, [r2, #1]
    36d6:	788d      	ldrb	r5, [r1, #2]
    36d8:	78c8      	ldrb	r0, [r1, #3]
    36da:	7095      	strb	r5, [r2, #2]
    36dc:	70d0      	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    36de:	6810      	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    36e0:	790d      	ldrb	r5, [r1, #4]
    36e2:	7115      	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    36e4:	2886      	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    36e6:	794d      	ldrb	r5, [r1, #5]
    36e8:	7989      	ldrb	r1, [r1, #6]
    36ea:	7155      	strb	r5, [r2, #5]
    36ec:	7191      	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    36ee:	f000 80a5 	beq.w	383c <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36f2:	49a9      	ldr	r1, [pc, #676]	; (3998 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36f4:	4ea9      	ldr	r6, [pc, #676]	; (399c <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    36f6:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36f8:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    36fa:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    36fe:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3700:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3704:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3706:	bf0c      	ite	eq
    3708:	2188      	moveq	r1, #136	; 0x88
    370a:	21c8      	movne	r1, #200	; 0xc8
    370c:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3710:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3714:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3718:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    371a:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    371c:	6051      	str	r1, [r2, #4]
    371e:	e5d4      	b.n	32ca <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3720:	f240 3202 	movw	r2, #770	; 0x302
    3724:	4291      	cmp	r1, r2
    3726:	f040 808d 	bne.w	3844 <usb_isr+0x79c>
    372a:	88a9      	ldrh	r1, [r5, #4]
    372c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3730:	2904      	cmp	r1, #4
    3732:	f200 8092 	bhi.w	385a <usb_isr+0x7b2>
    3736:	886a      	ldrh	r2, [r5, #2]
    3738:	2a00      	cmp	r2, #0
    373a:	f040 808e 	bne.w	385a <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    373e:	4898      	ldr	r0, [pc, #608]	; (39a0 <usb_isr+0x8f8>)
    3740:	f8cd e004 	str.w	lr, [sp, #4]
    3744:	0089      	lsls	r1, r1, #2
    3746:	4408      	add	r0, r1
    3748:	7801      	ldrb	r1, [r0, #0]
    374a:	f041 0102 	orr.w	r1, r1, #2
    374e:	7001      	strb	r1, [r0, #0]
    3750:	e741      	b.n	35d6 <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3752:	f242 2021 	movw	r0, #8737	; 0x2221
    3756:	4281      	cmp	r1, r0
    3758:	d17b      	bne.n	3852 <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    375a:	88a9      	ldrh	r1, [r5, #4]
    375c:	2900      	cmp	r1, #0
    375e:	f040 80e4 	bne.w	392a <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3762:	4b90      	ldr	r3, [pc, #576]	; (39a4 <usb_isr+0x8fc>)
    3764:	4a90      	ldr	r2, [pc, #576]	; (39a8 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3766:	4891      	ldr	r0, [pc, #580]	; (39ac <usb_isr+0x904>)
    3768:	78ac      	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    376a:	681d      	ldr	r5, [r3, #0]
    376c:	6015      	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    376e:	f8cd e004 	str.w	lr, [sp, #4]
    3772:	460a      	mov	r2, r1
    3774:	7004      	strb	r4, [r0, #0]
    3776:	e72e      	b.n	35d6 <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3778:	4b8d      	ldr	r3, [pc, #564]	; (39b0 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    377a:	488e      	ldr	r0, [pc, #568]	; (39b4 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    377c:	4986      	ldr	r1, [pc, #536]	; (3998 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    377e:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3780:	f04f 0e02 	mov.w	lr, #2
    3784:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3788:	4f85      	ldr	r7, [pc, #532]	; (39a0 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    378a:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    378c:	498a      	ldr	r1, [pc, #552]	; (39b8 <usb_isr+0x910>)
    378e:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3790:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3792:	4e8a      	ldr	r6, [pc, #552]	; (39bc <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    3794:	4d8a      	ldr	r5, [pc, #552]	; (39c0 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3796:	4c8b      	ldr	r4, [pc, #556]	; (39c4 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3798:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    379a:	210d      	movs	r1, #13
    379c:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    379e:	21ff      	movs	r1, #255	; 0xff
    37a0:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    37a2:	f8df e240 	ldr.w	lr, [pc, #576]	; 39e4 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    37a6:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    37a8:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    37aa:	4d87      	ldr	r5, [pc, #540]	; (39c8 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    37ac:	4a87      	ldr	r2, [pc, #540]	; (39cc <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    37ae:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    37b2:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    37b4:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    37b6:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    37ba:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    37bc:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    37be:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    37c0:	b007      	add	sp, #28
    37c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    37c6:	2300      	movs	r3, #0
    37c8:	558b      	strb	r3, [r1, r6]
						break;
    37ca:	e4b7      	b.n	313c <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    37cc:	2301      	movs	r3, #1
    37ce:	558b      	strb	r3, [r1, r6]
						break;
    37d0:	e4b4      	b.n	313c <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    37d2:	f04f 0300 	mov.w	r3, #0
    37d6:	f888 3000 	strb.w	r3, [r8]
    37da:	e6b7      	b.n	354c <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37dc:	4970      	ldr	r1, [pc, #448]	; (39a0 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    37de:	4b78      	ldr	r3, [pc, #480]	; (39c0 <usb_isr+0x918>)
    37e0:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    37e2:	200d      	movs	r0, #13
    37e4:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    37e6:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    37e8:	07a2      	lsls	r2, r4, #30
    37ea:	f57f adb7 	bpl.w	335c <usb_isr+0x2b4>
    37ee:	e5ae      	b.n	334e <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    37f0:	4c77      	ldr	r4, [pc, #476]	; (39d0 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    37f2:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    37f6:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    37f8:	7062      	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    37fa:	88ea      	ldrh	r2, [r5, #6]
    37fc:	4572      	cmp	r2, lr
    37fe:	f080 81a3 	bcs.w	3b48 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3802:	4965      	ldr	r1, [pc, #404]	; (3998 <usb_isr+0x8f0>)
    3804:	780d      	ldrb	r5, [r1, #0]
    3806:	2a40      	cmp	r2, #64	; 0x40
    3808:	4694      	mov	ip, r2
    380a:	f045 0e02 	orr.w	lr, r5, #2
    380e:	bf28      	it	cs
    3810:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3814:	eb04 030c 	add.w	r3, r4, ip
    3818:	eb09 00ce 	add.w	r0, r9, lr, lsl #3
    381c:	9302      	str	r3, [sp, #8]
    381e:	2301      	movs	r3, #1
    3820:	6044      	str	r4, [r0, #4]
    3822:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3826:	ebcc 0002 	rsb	r0, ip, r2
    382a:	9301      	str	r3, [sp, #4]
    382c:	2200      	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    382e:	24c8      	movs	r4, #200	; 0xc8
    3830:	e6e4      	b.n	35fc <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3832:	4a68      	ldr	r2, [pc, #416]	; (39d4 <usb_isr+0x92c>)
    3834:	4c66      	ldr	r4, [pc, #408]	; (39d0 <usb_isr+0x928>)
    3836:	7812      	ldrb	r2, [r2, #0]
    3838:	7022      	strb	r2, [r4, #0]
    383a:	e7de      	b.n	37fa <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    383c:	4a66      	ldr	r2, [pc, #408]	; (39d8 <usb_isr+0x930>)
    383e:	210f      	movs	r1, #15
    3840:	7011      	strb	r1, [r2, #0]
    3842:	e756      	b.n	36f2 <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3844:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3848:	d107      	bne.n	385a <usb_isr+0x7b2>
    384a:	2301      	movs	r3, #1
    384c:	2200      	movs	r2, #0
    384e:	9301      	str	r3, [sp, #4]
    3850:	e6c1      	b.n	35d6 <usb_isr+0x52e>
    3852:	f242 3221 	movw	r2, #8993	; 0x2321
    3856:	4291      	cmp	r1, r2
    3858:	d0f7      	beq.n	384a <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    385a:	4a51      	ldr	r2, [pc, #324]	; (39a0 <usb_isr+0x8f8>)
    385c:	230f      	movs	r3, #15
    385e:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3860:	4a54      	ldr	r2, [pc, #336]	; (39b4 <usb_isr+0x90c>)
    3862:	2301      	movs	r3, #1
    3864:	7013      	strb	r3, [r2, #0]
    3866:	e525      	b.n	32b4 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3868:	2840      	cmp	r0, #64	; 0x40
    386a:	f67f aeda 	bls.w	3622 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    386e:	f044 0402 	orr.w	r4, r4, #2
    3872:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    3876:	9e02      	ldr	r6, [sp, #8]
    3878:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    387a:	b1ba      	cbz	r2, 38ac <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    387c:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3880:	4a56      	ldr	r2, [pc, #344]	; (39dc <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    3882:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3884:	4633      	mov	r3, r6
    3886:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3888:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    388c:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    388e:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    3892:	e6df      	b.n	3654 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    3894:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3898:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    389a:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    389c:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    389e:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38a0:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    38a4:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38a6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    38aa:	e6d0      	b.n	364e <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    38ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
    38b0:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    38b2:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38b4:	4a40      	ldr	r2, [pc, #256]	; (39b8 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    38b6:	f888 5000 	strb.w	r5, [r8]
    38ba:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    38bc:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    38be:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    38c2:	e6c7      	b.n	3654 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    38c4:	f019 0f08 	tst.w	r9, #8
    38c8:	bf0c      	ite	eq
    38ca:	2302      	moveq	r3, #2
    38cc:	2303      	movne	r3, #3
    38ce:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    38d0:	e434      	b.n	313c <usb_isr+0x94>
    38d2:	88a9      	ldrh	r1, [r5, #4]
    38d4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    38d8:	2904      	cmp	r1, #4
    38da:	d8be      	bhi.n	385a <usb_isr+0x7b2>
    38dc:	886a      	ldrh	r2, [r5, #2]
    38de:	2a00      	cmp	r2, #0
    38e0:	d1bb      	bne.n	385a <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    38e2:	482f      	ldr	r0, [pc, #188]	; (39a0 <usb_isr+0x8f8>)
    38e4:	f8cd e004 	str.w	lr, [sp, #4]
    38e8:	0089      	lsls	r1, r1, #2
    38ea:	4408      	add	r0, r1
    38ec:	7801      	ldrb	r1, [r0, #0]
    38ee:	f021 0102 	bic.w	r1, r1, #2
    38f2:	7001      	strb	r1, [r0, #0]
    38f4:	e66f      	b.n	35d6 <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    38f6:	4a3a      	ldr	r2, [pc, #232]	; (39e0 <usb_isr+0x938>)
    38f8:	6854      	ldr	r4, [r2, #4]
    38fa:	2c00      	cmp	r4, #0
    38fc:	d0ad      	beq.n	385a <usb_isr+0x7b2>
    38fe:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3900:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    3904:	e003      	b.n	390e <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3906:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3908:	6854      	ldr	r4, [r2, #4]
    390a:	2c00      	cmp	r4, #0
    390c:	d0a5      	beq.n	385a <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    390e:	8813      	ldrh	r3, [r2, #0]
    3910:	4283      	cmp	r3, r0
    3912:	d1f8      	bne.n	3906 <usb_isr+0x85e>
    3914:	8853      	ldrh	r3, [r2, #2]
    3916:	4573      	cmp	r3, lr
    3918:	d1f5      	bne.n	3906 <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    391a:	0a00      	lsrs	r0, r0, #8
    391c:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    391e:	bf0c      	ite	eq
    3920:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    3924:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    3928:	e767      	b.n	37fa <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    392a:	f8cd e004 	str.w	lr, [sp, #4]
    392e:	e652      	b.n	35d6 <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    3930:	f04f 0e02 	mov.w	lr, #2
    3934:	e761      	b.n	37fa <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3936:	f000 f985 	bl	3c44 <usb_malloc>
				if (p) {
    393a:	2800      	cmp	r0, #0
    393c:	f000 80f1 	beq.w	3b22 <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    3940:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3942:	4a1d      	ldr	r2, [pc, #116]	; (39b8 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3944:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3948:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    394c:	f000 f97a 	bl	3c44 <usb_malloc>
				if (p) {
    3950:	2800      	cmp	r0, #0
    3952:	f000 80e0 	beq.w	3b16 <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    3956:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3958:	4a20      	ldr	r2, [pc, #128]	; (39dc <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    395a:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    395e:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    3962:	e62f      	b.n	35c4 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3964:	f000 f96e 	bl	3c44 <usb_malloc>
				if (p) {
    3968:	2800      	cmp	r0, #0
    396a:	f000 80e6 	beq.w	3b3a <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    396e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3970:	4a11      	ldr	r2, [pc, #68]	; (39b8 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3972:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3976:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    397a:	f000 f963 	bl	3c44 <usb_malloc>
				if (p) {
    397e:	2800      	cmp	r0, #0
    3980:	f000 80d5 	beq.w	3b2e <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    3984:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3986:	4a15      	ldr	r2, [pc, #84]	; (39dc <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3988:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    398c:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    3990:	e60c      	b.n	35ac <usb_isr+0x504>
    3992:	bf00      	nop
    3994:	1fff14a0 	.word	0x1fff14a0
    3998:	1fff140c 	.word	0x1fff140c
    399c:	1fff13a0 	.word	0x1fff13a0
    39a0:	400720c0 	.word	0x400720c0
    39a4:	1fff129c 	.word	0x1fff129c
    39a8:	1fff14a8 	.word	0x1fff14a8
    39ac:	1fff1430 	.word	0x1fff1430
    39b0:	1fff0000 	.word	0x1fff0000
    39b4:	40072094 	.word	0x40072094
    39b8:	00400088 	.word	0x00400088
    39bc:	40072088 	.word	0x40072088
    39c0:	40072080 	.word	0x40072080
    39c4:	40072098 	.word	0x40072098
    39c8:	1fff1350 	.word	0x1fff1350
    39cc:	1fff13a4 	.word	0x1fff13a4
    39d0:	1fff1410 	.word	0x1fff1410
    39d4:	1fff1418 	.word	0x1fff1418
    39d8:	1fff13a1 	.word	0x1fff13a1
    39dc:	004000c8 	.word	0x004000c8
    39e0:	0000617c 	.word	0x0000617c
    39e4:	4007208c 	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    39e8:	f000 f92c 	bl	3c44 <usb_malloc>
				if (p) {
    39ec:	2800      	cmp	r0, #0
    39ee:	f000 808c 	beq.w	3b0a <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    39f2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    39f4:	4a5d      	ldr	r2, [pc, #372]	; (3b6c <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    39f6:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    39fa:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    39fe:	f000 f921 	bl	3c44 <usb_malloc>
				if (p) {
    3a02:	2800      	cmp	r0, #0
    3a04:	d07b      	beq.n	3afe <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    3a06:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a08:	4a59      	ldr	r2, [pc, #356]	; (3b70 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3a0a:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a0e:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    3a12:	e5be      	b.n	3592 <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3a14:	f000 f916 	bl	3c44 <usb_malloc>
				if (p) {
    3a18:	2800      	cmp	r0, #0
    3a1a:	d06a      	beq.n	3af2 <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    3a1c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a1e:	4a53      	ldr	r2, [pc, #332]	; (3b6c <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3a20:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3a24:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3a28:	f000 f90c 	bl	3c44 <usb_malloc>
				if (p) {
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d05a      	beq.n	3ae6 <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    3a30:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a32:	4a4f      	ldr	r2, [pc, #316]	; (3b70 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3a34:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3a38:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    3a3c:	e59b      	b.n	3576 <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3a3e:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    3a42:	3808      	subs	r0, #8
    3a44:	f000 f91e 	bl	3c84 <usb_free>
    3a48:	e53d      	b.n	34c6 <usb_isr+0x41e>
    3a4a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    3a4e:	3808      	subs	r0, #8
    3a50:	f000 f918 	bl	3c84 <usb_free>
    3a54:	e531      	b.n	34ba <usb_isr+0x412>
    3a56:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    3a58:	3808      	subs	r0, #8
    3a5a:	f000 f913 	bl	3c84 <usb_free>
    3a5e:	e502      	b.n	3466 <usb_isr+0x3be>
    3a60:	6d48      	ldr	r0, [r1, #84]	; 0x54
    3a62:	3808      	subs	r0, #8
    3a64:	f000 f90e 	bl	3c84 <usb_free>
    3a68:	e4f7      	b.n	345a <usb_isr+0x3b2>
    3a6a:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3a6c:	3808      	subs	r0, #8
    3a6e:	f000 f909 	bl	3c84 <usb_free>
    3a72:	e4ec      	b.n	344e <usb_isr+0x3a6>
    3a74:	6c48      	ldr	r0, [r1, #68]	; 0x44
    3a76:	3808      	subs	r0, #8
    3a78:	f000 f904 	bl	3c84 <usb_free>
    3a7c:	e4e1      	b.n	3442 <usb_isr+0x39a>
    3a7e:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    3a80:	3808      	subs	r0, #8
    3a82:	f000 f8ff 	bl	3c84 <usb_free>
    3a86:	e4d6      	b.n	3436 <usb_isr+0x38e>
    3a88:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3a8a:	3808      	subs	r0, #8
    3a8c:	f000 f8fa 	bl	3c84 <usb_free>
    3a90:	e4cb      	b.n	342a <usb_isr+0x382>
    3a92:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    3a94:	3808      	subs	r0, #8
    3a96:	f000 f8f5 	bl	3c84 <usb_free>
    3a9a:	e4c0      	b.n	341e <usb_isr+0x376>
    3a9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a9e:	3808      	subs	r0, #8
    3aa0:	f000 f8f0 	bl	3c84 <usb_free>
    3aa4:	e4b5      	b.n	3412 <usb_isr+0x36a>
    3aa6:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    3aa8:	3808      	subs	r0, #8
    3aaa:	f000 f8eb 	bl	3c84 <usb_free>
    3aae:	e4f2      	b.n	3496 <usb_isr+0x3ee>
    3ab0:	6f48      	ldr	r0, [r1, #116]	; 0x74
    3ab2:	3808      	subs	r0, #8
    3ab4:	f000 f8e6 	bl	3c84 <usb_free>
    3ab8:	e4e7      	b.n	348a <usb_isr+0x3e2>
    3aba:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    3abc:	3808      	subs	r0, #8
    3abe:	f000 f8e1 	bl	3c84 <usb_free>
    3ac2:	e4dc      	b.n	347e <usb_isr+0x3d6>
    3ac4:	6e48      	ldr	r0, [r1, #100]	; 0x64
    3ac6:	3808      	subs	r0, #8
    3ac8:	f000 f8dc 	bl	3c84 <usb_free>
    3acc:	e4d1      	b.n	3472 <usb_isr+0x3ca>
    3ace:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    3ad2:	3808      	subs	r0, #8
    3ad4:	f000 f8d6 	bl	3c84 <usb_free>
    3ad8:	e4e9      	b.n	34ae <usb_isr+0x406>
    3ada:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    3ade:	3808      	subs	r0, #8
    3ae0:	f000 f8d0 	bl	3c84 <usb_free>
    3ae4:	e4dd      	b.n	34a2 <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3ae6:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3ae8:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3aec:	3201      	adds	r2, #1
    3aee:	702a      	strb	r2, [r5, #0]
    3af0:	e541      	b.n	3576 <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3af2:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3af4:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3af8:	3201      	adds	r2, #1
    3afa:	702a      	strb	r2, [r5, #0]
    3afc:	e794      	b.n	3a28 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3afe:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b00:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3b04:	3201      	adds	r2, #1
    3b06:	702a      	strb	r2, [r5, #0]
    3b08:	e543      	b.n	3592 <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3b0a:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3b0c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    3b10:	3201      	adds	r2, #1
    3b12:	702a      	strb	r2, [r5, #0]
    3b14:	e773      	b.n	39fe <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3b16:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b18:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3b1c:	3201      	adds	r2, #1
    3b1e:	702a      	strb	r2, [r5, #0]
    3b20:	e550      	b.n	35c4 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3b22:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3b24:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    3b28:	3201      	adds	r2, #1
    3b2a:	702a      	strb	r2, [r5, #0]
    3b2c:	e70e      	b.n	394c <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3b2e:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3b30:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    3b34:	3201      	adds	r2, #1
    3b36:	702a      	strb	r2, [r5, #0]
    3b38:	e538      	b.n	35ac <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3b3a:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3b3c:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3b40:	3201      	adds	r2, #1
    3b42:	702a      	strb	r2, [r5, #0]
    3b44:	e719      	b.n	397a <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3b46:	be00      	bkpt	0x0000
    3b48:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    3b4c:	46f4      	mov	ip, lr
    3b4e:	bf28      	it	cs
    3b50:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3b54:	eb04 030c 	add.w	r3, r4, ip
    3b58:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3b5a:	2301      	movs	r3, #1
    3b5c:	ebcc 000e 	rsb	r0, ip, lr
    3b60:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3b64:	2200      	movs	r2, #0
    3b66:	9301      	str	r3, [sp, #4]
    3b68:	e53a      	b.n	35e0 <usb_isr+0x538>
    3b6a:	bf00      	nop
    3b6c:	00400088 	.word	0x00400088
    3b70:	004000c8 	.word	0x004000c8

00003b74 <usb_init>:
}



void usb_init(void)
{
    3b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b78:	4c27      	ldr	r4, [pc, #156]	; (3c18 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3b7a:	f000 fd57 	bl	462c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    3b7e:	2200      	movs	r2, #0
    3b80:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    3b84:	4623      	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    3b86:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    3b88:	605a      	str	r2, [r3, #4]
    3b8a:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    3b8c:	4283      	cmp	r3, r0
		table[i].desc = 0;
    3b8e:	f04f 0100 	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    3b92:	d1f8      	bne.n	3b86 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3b94:	4821      	ldr	r0, [pc, #132]	; (3c1c <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3b96:	4a22      	ldr	r2, [pc, #136]	; (3c20 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3b98:	6803      	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3b9a:	f8df e09c 	ldr.w	lr, [pc, #156]	; 3c38 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3b9e:	4e21      	ldr	r6, [pc, #132]	; (3c24 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3ba0:	4d21      	ldr	r5, [pc, #132]	; (3c28 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3ba2:	4f22      	ldr	r7, [pc, #136]	; (3c2c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3ba4:	f8df c094 	ldr.w	ip, [pc, #148]	; 3c3c <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3ba8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3c40 <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3bb0:	6003      	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3bb2:	6813      	ldr	r3, [r2, #0]
    3bb4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    3bb8:	6013      	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3bba:	2303      	movs	r3, #3
    3bbc:	f88e 3000 	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    3bc0:	23a0      	movs	r3, #160	; 0xa0
    3bc2:	7033      	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3bc4:	f502 22c9 	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3bc8:	f3c4 2307 	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3bcc:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3bd0:	702b      	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3bd2:	3080      	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3bd4:	f3c4 4307 	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3bd8:	3210      	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3bda:	703b      	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3bdc:	0e24      	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3bde:	23ff      	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3be0:	7004      	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3be2:	4d13      	ldr	r5, [pc, #76]	; (3c30 <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3be4:	f88c 3000 	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3be8:	4812      	ldr	r0, [pc, #72]	; (3c34 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3bea:	f888 3000 	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    3bee:	7013      	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3bf0:	2301      	movs	r3, #1
    3bf2:	f806 3cac 	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3bf6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3bfa:	f80e 1c44 	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3bfe:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3c00:	2110      	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    3c02:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3c06:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3c08:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3c0a:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3c0e:	f1ae 0e44 	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c16:	bf00      	nop
    3c18:	1fff0000 	.word	0x1fff0000
    3c1c:	40048034 	.word	0x40048034
    3c20:	4000d800 	.word	0x4000d800
    3c24:	40072140 	.word	0x40072140
    3c28:	4007209c 	.word	0x4007209c
    3c2c:	400720b0 	.word	0x400720b0
    3c30:	e000e435 	.word	0xe000e435
    3c34:	e000e104 	.word	0xe000e104
    3c38:	40072144 	.word	0x40072144
    3c3c:	40072080 	.word	0x40072080
    3c40:	40072088 	.word	0x40072088

00003c44 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3c44:	b672      	cpsid	i
	avail = usb_buffer_available;
    3c46:	480d      	ldr	r0, [pc, #52]	; (3c7c <usb_malloc+0x38>)
    3c48:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3c4a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3c4e:	2b0b      	cmp	r3, #11
    3c50:	dc10      	bgt.n	3c74 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3c52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3c56:	40d9      	lsrs	r1, r3
    3c58:	ea22 0201 	bic.w	r2, r2, r1
    3c5c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3c5e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3c60:	4807      	ldr	r0, [pc, #28]	; (3c80 <usb_malloc+0x3c>)
    3c62:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3c66:	00db      	lsls	r3, r3, #3
    3c68:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3c6a:	2100      	movs	r1, #0
    3c6c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3c6e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3c70:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3c72:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3c74:	b662      	cpsie	i
		return NULL;
    3c76:	2000      	movs	r0, #0
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	1fff08bc 	.word	0x1fff08bc
    3c80:	1fff03d0 	.word	0x1fff03d0

00003c84 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3c84:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <usb_free+0x38>)
    3c86:	4a0e      	ldr	r2, [pc, #56]	; (3cc0 <usb_free+0x3c>)
    3c88:	1ac3      	subs	r3, r0, r3
    3c8a:	fba2 2303 	umull	r2, r3, r2, r3
    3c8e:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3c90:	2b0b      	cmp	r3, #11
    3c92:	d80c      	bhi.n	3cae <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3c94:	4a0b      	ldr	r2, [pc, #44]	; (3cc4 <usb_free+0x40>)
    3c96:	7812      	ldrb	r2, [r2, #0]
    3c98:	b952      	cbnz	r2, 3cb0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3c9a:	b672      	cpsid	i
	usb_buffer_available |= mask;
    3c9c:	480a      	ldr	r0, [pc, #40]	; (3cc8 <usb_free+0x44>)
    3c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3ca2:	6802      	ldr	r2, [r0, #0]
    3ca4:	fa21 f303 	lsr.w	r3, r1, r3
    3ca8:	431a      	orrs	r2, r3
    3caa:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3cac:	b662      	cpsie	i
    3cae:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3cb0:	4a06      	ldr	r2, [pc, #24]	; (3ccc <usb_free+0x48>)
    3cb2:	7812      	ldrb	r2, [r2, #0]
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	d0f0      	beq.n	3c9a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3cb8:	f7ff b950 	b.w	2f5c <usb_rx_memory>
    3cbc:	1fff03d0 	.word	0x1fff03d0
    3cc0:	38e38e39 	.word	0x38e38e39
    3cc4:	1fff140d 	.word	0x1fff140d
    3cc8:	1fff08bc 	.word	0x1fff08bc
    3ccc:	1fff1418 	.word	0x1fff1418

00003cd0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3cd0:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    3cd2:	4d0f      	ldr	r5, [pc, #60]	; (3d10 <usb_serial_getchar+0x40>)
    3cd4:	6828      	ldr	r0, [r5, #0]
    3cd6:	b178      	cbz	r0, 3cf8 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3cd8:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    3cda:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3cdc:	18c1      	adds	r1, r0, r3
    3cde:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    3ce0:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3ce2:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    3ce4:	d202      	bcs.n	3cec <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3ce6:	8043      	strh	r3, [r0, #2]
	}
	return c;
    3ce8:	4620      	mov	r0, r4
}
    3cea:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    3cec:	f7ff ffca 	bl	3c84 <usb_free>
		rx_packet = NULL;
    3cf0:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    3cf2:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3cf4:	602b      	str	r3, [r5, #0]
    3cf6:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3cf8:	4b06      	ldr	r3, [pc, #24]	; (3d14 <usb_serial_getchar+0x44>)
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	b12b      	cbz	r3, 3d0a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3cfe:	2003      	movs	r0, #3
    3d00:	f7ff f8f8 	bl	2ef4 <usb_rx>
    3d04:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    3d06:	2800      	cmp	r0, #0
    3d08:	d1e6      	bne.n	3cd8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3d0a:	f04f 30ff 	mov.w	r0, #4294967295
    3d0e:	bd38      	pop	{r3, r4, r5, pc}
    3d10:	1fff142c 	.word	0x1fff142c
    3d14:	1fff1418 	.word	0x1fff1418

00003d18 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3d18:	b510      	push	{r4, lr}
	if (!rx_packet) {
    3d1a:	4c09      	ldr	r4, [pc, #36]	; (3d40 <usb_serial_peekchar+0x28>)
    3d1c:	6820      	ldr	r0, [r4, #0]
    3d1e:	b118      	cbz	r0, 3d28 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    3d20:	8843      	ldrh	r3, [r0, #2]
    3d22:	4418      	add	r0, r3
    3d24:	7a00      	ldrb	r0, [r0, #8]
}
    3d26:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3d28:	4b06      	ldr	r3, [pc, #24]	; (3d44 <usb_serial_peekchar+0x2c>)
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	b12b      	cbz	r3, 3d3a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    3d2e:	2003      	movs	r0, #3
    3d30:	f7ff f8e0 	bl	2ef4 <usb_rx>
    3d34:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    3d36:	2800      	cmp	r0, #0
    3d38:	d1f2      	bne.n	3d20 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3d3a:	f04f 30ff 	mov.w	r0, #4294967295
    3d3e:	bd10      	pop	{r4, pc}
    3d40:	1fff142c 	.word	0x1fff142c
    3d44:	1fff1418 	.word	0x1fff1418

00003d48 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3d48:	4b04      	ldr	r3, [pc, #16]	; (3d5c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    3d4a:	4a05      	ldr	r2, [pc, #20]	; (3d60 <usb_serial_available+0x18>)
    3d4c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    3d4e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3d50:	b11b      	cbz	r3, 3d5a <usb_serial_available+0x12>
    3d52:	881a      	ldrh	r2, [r3, #0]
    3d54:	885b      	ldrh	r3, [r3, #2]
    3d56:	1ad3      	subs	r3, r2, r3
    3d58:	4418      	add	r0, r3
	return count;
}
    3d5a:	4770      	bx	lr
    3d5c:	1fff142c 	.word	0x1fff142c
    3d60:	1fff1498 	.word	0x1fff1498

00003d64 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3d64:	4b0b      	ldr	r3, [pc, #44]	; (3d94 <usb_serial_flush_input+0x30>)
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	b19b      	cbz	r3, 3d92 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    3d6a:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    3d6c:	4c0a      	ldr	r4, [pc, #40]	; (3d98 <usb_serial_flush_input+0x34>)
    3d6e:	6820      	ldr	r0, [r4, #0]
    3d70:	b148      	cbz	r0, 3d86 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    3d72:	f7ff ff87 	bl	3c84 <usb_free>
		rx_packet = NULL;
    3d76:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3d78:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3d7a:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3d7c:	f7ff f8ba 	bl	2ef4 <usb_rx>
		if (!rx) break;
    3d80:	b130      	cbz	r0, 3d90 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    3d82:	f7ff ff7f 	bl	3c84 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3d86:	2003      	movs	r0, #3
    3d88:	f7ff f8b4 	bl	2ef4 <usb_rx>
		if (!rx) break;
    3d8c:	2800      	cmp	r0, #0
    3d8e:	d1f8      	bne.n	3d82 <usb_serial_flush_input+0x1e>
    3d90:	bd10      	pop	{r4, pc}
    3d92:	4770      	bx	lr
    3d94:	1fff1418 	.word	0x1fff1418
    3d98:	1fff142c 	.word	0x1fff142c

00003d9c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3da0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 3e9c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3da4:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3da6:	2201      	movs	r2, #1
    3da8:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    3dac:	9101      	str	r1, [sp, #4]
    3dae:	b369      	cbz	r1, 3e0c <usb_serial_write+0x70>
    3db0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3ea0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3db4:	4f35      	ldr	r7, [pc, #212]	; (3e8c <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3db6:	9e01      	ldr	r6, [sp, #4]
    3db8:	4683      	mov	fp, r0
		if (!tx_packet) {
    3dba:	f8d8 0000 	ldr.w	r0, [r8]
    3dbe:	b3b0      	cbz	r0, 3e2e <usb_serial_write+0x92>
    3dc0:	4d33      	ldr	r5, [pc, #204]	; (3e90 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    3dc2:	8844      	ldrh	r4, [r0, #2]
    3dc4:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    3dc8:	42b1      	cmp	r1, r6
    3dca:	bf28      	it	cs
    3dcc:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3dce:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3dd2:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3dd4:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3dd8:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    3dda:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3ddc:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    3de0:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    3de4:	b151      	cbz	r1, 3dfc <usb_serial_write+0x60>
    3de6:	3c01      	subs	r4, #1
    3de8:	4422      	add	r2, r4
    3dea:	4459      	add	r1, fp
    3dec:	f81b 4b01 	ldrb.w	r4, [fp], #1
    3df0:	f802 4f01 	strb.w	r4, [r2, #1]!
    3df4:	458b      	cmp	fp, r1
    3df6:	d1f9      	bne.n	3dec <usb_serial_write+0x50>
    3df8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    3dfc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    3e00:	d80b      	bhi.n	3e1a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    3e02:	4a24      	ldr	r2, [pc, #144]	; (3e94 <usb_serial_write+0xf8>)
    3e04:	2105      	movs	r1, #5
    3e06:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3e08:	2e00      	cmp	r6, #0
    3e0a:	d1d6      	bne.n	3dba <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    3e0c:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    3e0e:	2300      	movs	r3, #0
    3e10:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    3e14:	b003      	add	sp, #12
    3e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    3e1a:	2240      	movs	r2, #64	; 0x40
    3e1c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3e1e:	4601      	mov	r1, r0
    3e20:	2004      	movs	r0, #4
    3e22:	f7ff f8ff 	bl	3024 <usb_tx>
			tx_packet = NULL;
    3e26:	2200      	movs	r2, #0
    3e28:	f8c8 2000 	str.w	r2, [r8]
    3e2c:	e7e9      	b.n	3e02 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3e2e:	783a      	ldrb	r2, [r7, #0]
    3e30:	b322      	cbz	r2, 3e7c <usb_serial_write+0xe0>
    3e32:	4c19      	ldr	r4, [pc, #100]	; (3e98 <usb_serial_write+0xfc>)
    3e34:	4d16      	ldr	r5, [pc, #88]	; (3e90 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    3e36:	f04f 0a01 	mov.w	sl, #1
    3e3a:	e007      	b.n	3e4c <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3e3c:	3c01      	subs	r4, #1
    3e3e:	d016      	beq.n	3e6e <usb_serial_write+0xd2>
    3e40:	782a      	ldrb	r2, [r5, #0]
    3e42:	b9a2      	cbnz	r2, 3e6e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    3e44:	f000 fae6 	bl	4414 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3e48:	783a      	ldrb	r2, [r7, #0]
    3e4a:	b1ba      	cbz	r2, 3e7c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    3e4c:	2004      	movs	r0, #4
    3e4e:	f7ff f86f 	bl	2f30 <usb_tx_packet_count>
    3e52:	2807      	cmp	r0, #7
    3e54:	d8f2      	bhi.n	3e3c <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    3e56:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    3e5a:	f7ff fef3 	bl	3c44 <usb_malloc>
    3e5e:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    3e62:	2800      	cmp	r0, #0
    3e64:	d1ad      	bne.n	3dc2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    3e66:	4b0d      	ldr	r3, [pc, #52]	; (3e9c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3e68:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    3e6a:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3e6c:	d1e8      	bne.n	3e40 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    3e6e:	2301      	movs	r3, #1
					return -1;
    3e70:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    3e74:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3e76:	b003      	add	sp, #12
    3e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3e7c:	2300      	movs	r3, #0
					return -1;
    3e7e:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3e82:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3e86:	b003      	add	sp, #12
    3e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e8c:	1fff1418 	.word	0x1fff1418
    3e90:	1fff1428 	.word	0x1fff1428
    3e94:	1fff1420 	.word	0x1fff1420
    3e98:	00014821 	.word	0x00014821
    3e9c:	1fff1421 	.word	0x1fff1421
    3ea0:	1fff1424 	.word	0x1fff1424

00003ea4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3ea4:	b500      	push	{lr}
    3ea6:	b083      	sub	sp, #12
    3ea8:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    3eaa:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3eac:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    3eb0:	4618      	mov	r0, r3
    3eb2:	f7ff ff73 	bl	3d9c <usb_serial_write>
}
    3eb6:	b003      	add	sp, #12
    3eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00003ebc <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    3ebc:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    3ebe:	4d0e      	ldr	r5, [pc, #56]	; (3ef8 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3ec0:	4c0e      	ldr	r4, [pc, #56]	; (3efc <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    3ec2:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3ec4:	2301      	movs	r3, #1
    3ec6:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    3ec8:	b128      	cbz	r0, 3ed6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3eca:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    3ecc:	2300      	movs	r3, #0
    3ece:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3ed0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    3ed4:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3ed6:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <usb_serial_write_buffer_free+0x44>)
    3ed8:	781b      	ldrb	r3, [r3, #0]
    3eda:	b913      	cbnz	r3, 3ee2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    3edc:	2000      	movs	r0, #0
    3ede:	7020      	strb	r0, [r4, #0]
			return 0;
    3ee0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3ee2:	2004      	movs	r0, #4
    3ee4:	f7ff f824 	bl	2f30 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3ee8:	2807      	cmp	r0, #7
    3eea:	d8f7      	bhi.n	3edc <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    3eec:	f7ff feaa 	bl	3c44 <usb_malloc>
    3ef0:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d1e9      	bne.n	3eca <usb_serial_write_buffer_free+0xe>
    3ef6:	e7f1      	b.n	3edc <usb_serial_write_buffer_free+0x20>
    3ef8:	1fff1424 	.word	0x1fff1424
    3efc:	1fff1421 	.word	0x1fff1421
    3f00:	1fff1418 	.word	0x1fff1418

00003f04 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    3f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    3f06:	4b11      	ldr	r3, [pc, #68]	; (3f4c <usb_serial_flush_output+0x48>)
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	b18b      	cbz	r3, 3f30 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    3f0c:	4e10      	ldr	r6, [pc, #64]	; (3f50 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3f0e:	4d11      	ldr	r5, [pc, #68]	; (3f54 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    3f10:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3f12:	2701      	movs	r7, #1
    3f14:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    3f16:	b164      	cbz	r4, 3f32 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    3f18:	4a0f      	ldr	r2, [pc, #60]	; (3f58 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    3f1a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    3f1c:	2700      	movs	r7, #0
    3f1e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3f20:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    3f22:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3f24:	2004      	movs	r0, #4
    3f26:	f7ff f87d 	bl	3024 <usb_tx>
		tx_packet = NULL;
    3f2a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    3f2c:	2300      	movs	r3, #0
    3f2e:	702b      	strb	r3, [r5, #0]
    3f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3f32:	f7ff fe87 	bl	3c44 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3f36:	4b08      	ldr	r3, [pc, #32]	; (3f58 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    3f38:	b128      	cbz	r0, 3f46 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    3f3a:	4601      	mov	r1, r0
    3f3c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3f3e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    3f40:	f7ff f870 	bl	3024 <usb_tx>
    3f44:	e7f2      	b.n	3f2c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3f46:	701f      	strb	r7, [r3, #0]
    3f48:	e7f0      	b.n	3f2c <usb_serial_flush_output+0x28>
    3f4a:	bf00      	nop
    3f4c:	1fff1418 	.word	0x1fff1418
    3f50:	1fff1424 	.word	0x1fff1424
    3f54:	1fff1421 	.word	0x1fff1421
    3f58:	1fff1420 	.word	0x1fff1420

00003f5c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    3f5c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    3f5e:	4b0e      	ldr	r3, [pc, #56]	; (3f98 <usb_serial_flush_callback+0x3c>)
    3f60:	781b      	ldrb	r3, [r3, #0]
    3f62:	b973      	cbnz	r3, 3f82 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    3f64:	4c0d      	ldr	r4, [pc, #52]	; (3f9c <usb_serial_flush_callback+0x40>)
    3f66:	6821      	ldr	r1, [r4, #0]
    3f68:	b161      	cbz	r1, 3f84 <usb_serial_flush_callback+0x28>
    3f6a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    3f6e:	884b      	ldrh	r3, [r1, #2]
    3f70:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3f72:	2004      	movs	r0, #4
    3f74:	f7ff f856 	bl	3024 <usb_tx>
		tx_packet = NULL;
    3f78:	6025      	str	r5, [r4, #0]
    3f7a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3f7c:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <usb_serial_flush_callback+0x44>)
    3f7e:	2201      	movs	r2, #1
    3f80:	701a      	strb	r2, [r3, #0]
    3f82:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3f84:	f7ff fe5e 	bl	3c44 <usb_malloc>
		if (tx) {
    3f88:	2800      	cmp	r0, #0
    3f8a:	d0f7      	beq.n	3f7c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    3f8c:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    3f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    3f92:	2004      	movs	r0, #4
    3f94:	f7ff b846 	b.w	3024 <usb_tx>
    3f98:	1fff1421 	.word	0x1fff1421
    3f9c:	1fff1424 	.word	0x1fff1424
    3fa0:	1fff1420 	.word	0x1fff1420

00003fa4 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    3fa4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3fa6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3faa:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3fac:	7f43      	ldrb	r3, [r0, #29]
    3fae:	b933      	cbnz	r3, 3fbe <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3fb0:	7f01      	ldrb	r1, [r0, #28]
    3fb2:	2901      	cmp	r1, #1
    3fb4:	d008      	beq.n	3fc8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3fb6:	2903      	cmp	r1, #3
    3fb8:	d010      	beq.n	3fdc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3fba:	2301      	movs	r3, #1
    3fbc:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3fbe:	b902      	cbnz	r2, 3fc2 <EventResponder::triggerEventNotImmediate()+0x1e>
    3fc0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    3fc6:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3fc8:	4c11      	ldr	r4, [pc, #68]	; (4010 <EventResponder::triggerEventNotImmediate()+0x6c>)
    3fca:	6821      	ldr	r1, [r4, #0]
    3fcc:	b1a1      	cbz	r1, 3ff8 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3fce:	4911      	ldr	r1, [pc, #68]	; (4014 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3fd0:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3fd2:	680b      	ldr	r3, [r1, #0]
    3fd4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3fd6:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3fd8:	6158      	str	r0, [r3, #20]
    3fda:	e7ee      	b.n	3fba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3fdc:	4c0e      	ldr	r4, [pc, #56]	; (4018 <EventResponder::triggerEventNotImmediate()+0x74>)
    3fde:	6821      	ldr	r1, [r4, #0]
    3fe0:	b181      	cbz	r1, 4004 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3fe2:	490e      	ldr	r1, [pc, #56]	; (401c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3fe4:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3fe6:	680b      	ldr	r3, [r1, #0]
    3fe8:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3fea:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3fec:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3fee:	4b0c      	ldr	r3, [pc, #48]	; (4020 <EventResponder::triggerEventNotImmediate()+0x7c>)
    3ff0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3ff4:	6019      	str	r1, [r3, #0]
    3ff6:	e7e0      	b.n	3fba <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3ff8:	4b06      	ldr	r3, [pc, #24]	; (4014 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3ffa:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3ffc:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3ffe:	6020      	str	r0, [r4, #0]
				lastYield = this;
    4000:	6018      	str	r0, [r3, #0]
    4002:	e7da      	b.n	3fba <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4004:	4b05      	ldr	r3, [pc, #20]	; (401c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4006:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    4008:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    400a:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    400c:	6018      	str	r0, [r3, #0]
    400e:	e7ee      	b.n	3fee <EventResponder::triggerEventNotImmediate()+0x4a>
    4010:	1fff1440 	.word	0x1fff1440
    4014:	1fff143c 	.word	0x1fff143c
    4018:	1fff1434 	.word	0x1fff1434
    401c:	1fff1438 	.word	0x1fff1438
    4020:	e000ed04 	.word	0xe000ed04

00004024 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4024:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4026:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    402a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    402c:	4c0c      	ldr	r4, [pc, #48]	; (4060 <EventResponder::runFromInterrupt()+0x3c>)
    402e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4030:	b180      	cbz	r0, 4054 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4032:	4e0c      	ldr	r6, [pc, #48]	; (4064 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4034:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4036:	6943      	ldr	r3, [r0, #20]
    4038:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    403a:	b173      	cbz	r3, 405a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    403c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    403e:	b902      	cbnz	r2, 4042 <EventResponder::runFromInterrupt()+0x1e>
    4040:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4042:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4044:	6883      	ldr	r3, [r0, #8]
    4046:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4048:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    404c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    404e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    4050:	2800      	cmp	r0, #0
    4052:	d1f0      	bne.n	4036 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4054:	b902      	cbnz	r2, 4058 <EventResponder::runFromInterrupt()+0x34>
    4056:	b662      	cpsie	i
    4058:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    405a:	6033      	str	r3, [r6, #0]
    405c:	e7ef      	b.n	403e <EventResponder::runFromInterrupt()+0x1a>
    405e:	bf00      	nop
    4060:	1fff1434 	.word	0x1fff1434
    4064:	1fff1438 	.word	0x1fff1438

00004068 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4068:	f7ff bfdc 	b.w	4024 <EventResponder::runFromInterrupt()>

0000406c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    406c:	4a02      	ldr	r2, [pc, #8]	; (4078 <systick_isr+0xc>)
    406e:	6813      	ldr	r3, [r2, #0]
    4070:	3301      	adds	r3, #1
    4072:	6013      	str	r3, [r2, #0]
    4074:	4770      	bx	lr
    4076:	bf00      	nop
    4078:	1fff129c 	.word	0x1fff129c

0000407c <HardwareSerial::write(unsigned long)>:
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    407c:	6803      	ldr	r3, [r0, #0]
    407e:	b2c9      	uxtb	r1, r1
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	4718      	bx	r3

00004084 <HardwareSerial::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    4084:	6803      	ldr	r3, [r0, #0]
    4086:	b2c9      	uxtb	r1, r1
    4088:	681b      	ldr	r3, [r3, #0]
    408a:	4718      	bx	r3

0000408c <HardwareSerial::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    408c:	6803      	ldr	r3, [r0, #0]
    408e:	b2c9      	uxtb	r1, r1
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	4718      	bx	r3

00004094 <HardwareSerial::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    4094:	6803      	ldr	r3, [r0, #0]
    4096:	b2c9      	uxtb	r1, r1
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	4718      	bx	r3

0000409c <HardwareSerial::begin(unsigned long)>:
uint8_t _serialEvent1_default __attribute__((weak)) PROGMEM = 0 ;

HardwareSerial Serial1(&serialEvent1);

void HardwareSerial::begin(uint32_t baud) { 
	serial_begin(BAUD2DIV(baud)); 
    409c:	4b08      	ldr	r3, [pc, #32]	; (40c0 <HardwareSerial::begin(unsigned long)+0x24>)
    409e:	084a      	lsrs	r2, r1, #1
    40a0:	4413      	add	r3, r2

uint8_t _serialEvent1_default __attribute__((weak)) PROGMEM = 0 ;

HardwareSerial Serial1(&serialEvent1);

void HardwareSerial::begin(uint32_t baud) { 
    40a2:	b510      	push	{r4, lr}
    40a4:	4604      	mov	r4, r0
	serial_begin(BAUD2DIV(baud)); 
    40a6:	fbb3 f0f1 	udiv	r0, r3, r1
    40aa:	f7fe fb73 	bl	2794 <serial_begin>
	if (!_serialEvent1_default) addToSerialEventsList();
    40ae:	4b05      	ldr	r3, [pc, #20]	; (40c4 <HardwareSerial::begin(unsigned long)+0x28>)
    40b0:	781b      	ldrb	r3, [r3, #0]
    40b2:	b103      	cbz	r3, 40b6 <HardwareSerial::begin(unsigned long)+0x1a>
    40b4:	bd10      	pop	{r4, pc}
    40b6:	4620      	mov	r0, r4
}
    40b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

HardwareSerial Serial1(&serialEvent1);

void HardwareSerial::begin(uint32_t baud) { 
	serial_begin(BAUD2DIV(baud)); 
	if (!_serialEvent1_default) addToSerialEventsList();
    40bc:	f000 baf8 	b.w	46b0 <HardwareSerial::addToSerialEventsList()>
    40c0:	15752a00 	.word	0x15752a00
    40c4:	1fff08d4 	.word	0x1fff08d4

000040c8 <HardwareSerial::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
    40c8:	b508      	push	{r3, lr}
    40ca:	4608      	mov	r0, r1
    40cc:	f7fe fd7e 	bl	2bcc <serial_putchar>
    40d0:	2001      	movs	r0, #1
    40d2:	bd08      	pop	{r3, pc}

000040d4 <HardwareSerial::write(unsigned char)>:
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
    40d4:	b508      	push	{r3, lr}
    40d6:	4608      	mov	r0, r1
    40d8:	f7fe fd78 	bl	2bcc <serial_putchar>
    40dc:	2001      	movs	r0, #1
    40de:	bd08      	pop	{r3, pc}

000040e0 <HardwareSerial::write(char const*)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    40e0:	b538      	push	{r3, r4, r5, lr}
    40e2:	4608      	mov	r0, r1
    40e4:	460d      	mov	r5, r1
    40e6:	f001 faeb 	bl	56c0 <strlen>
    40ea:	4604      	mov	r4, r0
					  serial_write((const uint8_t *)str, len);
    40ec:	4601      	mov	r1, r0
    40ee:	4628      	mov	r0, r5
    40f0:	f7fe fd76 	bl	2be0 <serial_write>
					  return len; }
    40f4:	4620      	mov	r0, r4
    40f6:	bd38      	pop	{r3, r4, r5, pc}

000040f8 <HardwareSerial::write(unsigned char const*, unsigned int)>:
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    40f8:	b510      	push	{r4, lr}
					{ serial_write(buffer, size); return size; }
    40fa:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    40fc:	4614      	mov	r4, r2
					{ serial_write(buffer, size); return size; }
    40fe:	4611      	mov	r1, r2
    4100:	f7fe fd6e 	bl	2be0 <serial_write>
    4104:	4620      	mov	r0, r4
    4106:	bd10      	pop	{r4, pc}

00004108 <HardwareSerial::clear()>:
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
	virtual void clear(void)	{ serial_clear(); }
    4108:	f7fe be48 	b.w	2d9c <serial_clear>

0000410c <HardwareSerial::attachCts(unsigned char)>:
	virtual void end(void)		{ serial_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
    410c:	b508      	push	{r3, lr}
    410e:	4608      	mov	r0, r1
    4110:	f7fe fd34 	bl	2b7c <serial_set_cts>
    4114:	3000      	adds	r0, #0
    4116:	bf18      	it	ne
    4118:	2001      	movne	r0, #1
    411a:	bd08      	pop	{r3, pc}

0000411c <HardwareSerial::attachRts(unsigned char)>:
					  serial_format(format); }
	virtual void end(void)		{ serial_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
    411c:	b508      	push	{r3, lr}
    411e:	4608      	mov	r0, r1
    4120:	f7fe fd0a 	bl	2b38 <serial_set_rts>
    4124:	3000      	adds	r0, #0
    4126:	bf18      	it	ne
    4128:	2001      	movne	r0, #1
    412a:	bd08      	pop	{r3, pc}

0000412c <HardwareSerial::setTX(unsigned char, bool)>:
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	virtual void end(void)		{ serial_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
    412c:	4608      	mov	r0, r1
    412e:	4611      	mov	r1, r2
    4130:	f7fe bc7e 	b.w	2a30 <serial_set_tx>

00004134 <HardwareSerial::setRX(unsigned char)>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	virtual void end(void)		{ serial_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
    4134:	4608      	mov	r0, r1
    4136:	f7fe bcc5 	b.w	2ac4 <serial_set_rx>
    413a:	bf00      	nop

0000413c <HardwareSerial::transmitterEnable(unsigned char)>:
	virtual void begin(uint32_t baud);
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	virtual void end(void)		{ serial_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
    413c:	4608      	mov	r0, r1
    413e:	f7fe bc5b 	b.w	29f8 <serial_set_transmit_pin>
    4142:	bf00      	nop

00004144 <HardwareSerial::end()>:
	#endif
	virtual void begin(uint32_t baud);
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	virtual void end(void)		{ serial_end(); }
    4144:	f7fe bbe4 	b.w	2910 <serial_end>

00004148 <HardwareSerial::begin(unsigned long, unsigned long)>:
	enum {CNT_HARDWARE_SERIAL = 6};
	#else //(__MK64FX512__) || defined(__MK66FX1M0__) 
	enum {CNT_HARDWARE_SERIAL = 3};
	#endif
	virtual void begin(uint32_t baud);
	virtual void begin(uint32_t baud, uint32_t format) {
    4148:	b510      	push	{r4, lr}
					  serial_begin(BAUD2DIV(baud));
    414a:	4b06      	ldr	r3, [pc, #24]	; (4164 <HardwareSerial::begin(unsigned long, unsigned long)+0x1c>)
	enum {CNT_HARDWARE_SERIAL = 6};
	#else //(__MK64FX512__) || defined(__MK66FX1M0__) 
	enum {CNT_HARDWARE_SERIAL = 3};
	#endif
	virtual void begin(uint32_t baud);
	virtual void begin(uint32_t baud, uint32_t format) {
    414c:	4614      	mov	r4, r2
					  serial_begin(BAUD2DIV(baud));
    414e:	eb03 0051 	add.w	r0, r3, r1, lsr #1
    4152:	fbb0 f0f1 	udiv	r0, r0, r1
    4156:	f7fe fb1d 	bl	2794 <serial_begin>
					  serial_format(format); }
    415a:	4620      	mov	r0, r4
    415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4160:	f7fe bba0 	b.w	28a4 <serial_format>
    4164:	15752a00 	.word	0x15752a00

00004168 <HardwareSerial::peek()>:
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
	virtual int peek(void)          { return serial_peek(); }
    4168:	f7fe be00 	b.w	2d6c <serial_peek>

0000416c <HardwareSerial::read()>:
	virtual int read(void)          { return serial_getchar(); }
    416c:	f7fe bdca 	b.w	2d04 <serial_getchar>

00004170 <HardwareSerial::available()>:
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4170:	f7fe bdb8 	b.w	2ce4 <serial_available>

00004174 <HardwareSerial::flush()>:
	virtual int peek(void)          { return serial_peek(); }
	virtual int read(void)          { return serial_getchar(); }
	virtual void flush(void)        { serial_flush(); }
    4174:	f7fe bd98 	b.w	2ca8 <serial_flush>

00004178 <HardwareSerial::availableForWrite()>:
	virtual void clear(void)	{ serial_clear(); }
	virtual int availableForWrite(void) { return serial_write_buffer_free(); }
    4178:	f7fe bda2 	b.w	2cc0 <serial_write_buffer_free>

0000417c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    417c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    417e:	f7fc fb4b 	bl	818 <setup>
	while (1) {
		loop();
    4182:	f7fc fad1 	bl	728 <loop>
		yield();
    4186:	f000 f945 	bl	4414 <yield>
    418a:	e7fa      	b.n	4182 <main+0x6>

0000418c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    418c:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    418e:	4a06      	ldr	r2, [pc, #24]	; (41a8 <Print::println()+0x1c>)
	return write(buf, 2);
    4190:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4192:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4194:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4196:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4198:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    419a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    419e:	2202      	movs	r2, #2
    41a0:	4798      	blx	r3
}
    41a2:	b003      	add	sp, #12
    41a4:	f85d fb04 	ldr.w	pc, [sp], #4
    41a8:	00006140 	.word	0x00006140

000041ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ae:	4607      	mov	r7, r0
    41b0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    41b2:	2a00      	cmp	r2, #0
    41b4:	d033      	beq.n	421e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    41b6:	2a01      	cmp	r2, #1
    41b8:	bf08      	it	eq
    41ba:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    41bc:	b351      	cbz	r1, 4214 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    41be:	2421      	movs	r4, #33	; 0x21
    41c0:	e000      	b.n	41c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    41c2:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    41c4:	fbb1 f5f2 	udiv	r5, r1, r2
    41c8:	fb02 1115 	mls	r1, r2, r5, r1
    41cc:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    41ce:	2909      	cmp	r1, #9
    41d0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    41d4:	bf98      	it	ls
    41d6:	b2c8      	uxtbls	r0, r1
    41d8:	a90a      	add	r1, sp, #40	; 0x28
    41da:	bf88      	it	hi
    41dc:	3037      	addhi	r0, #55	; 0x37
    41de:	4421      	add	r1, r4
    41e0:	bf88      	it	hi
    41e2:	b2c0      	uxtbhi	r0, r0
    41e4:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    41e8:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    41ea:	4629      	mov	r1, r5
    41ec:	2d00      	cmp	r5, #0
    41ee:	d1e8      	bne.n	41c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    41f0:	b133      	cbz	r3, 4200 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    41f2:	3c01      	subs	r4, #1
    41f4:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    41f6:	ab0a      	add	r3, sp, #40	; 0x28
    41f8:	4423      	add	r3, r4
    41fa:	222d      	movs	r2, #45	; 0x2d
    41fc:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    4200:	683b      	ldr	r3, [r7, #0]
    4202:	aa01      	add	r2, sp, #4
    4204:	1911      	adds	r1, r2, r4
    4206:	685b      	ldr	r3, [r3, #4]
    4208:	4638      	mov	r0, r7
    420a:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    420e:	4798      	blx	r3
}
    4210:	b00b      	add	sp, #44	; 0x2c
    4212:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    4214:	2230      	movs	r2, #48	; 0x30
    4216:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    421a:	2421      	movs	r4, #33	; 0x21
    421c:	e7e8      	b.n	41f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    421e:	6803      	ldr	r3, [r0, #0]
    4220:	b2c9      	uxtb	r1, r1
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    4226:	b00b      	add	sp, #44	; 0x2c
    4228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    422a:	bf00      	nop
    422c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004230 <Print::printFloat(double, unsigned char)>:

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    4230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4234:	ec57 6b10 	vmov	r6, r7, d0
    4238:	b085      	sub	sp, #20
    423a:	4605      	mov	r5, r0
    423c:	460c      	mov	r4, r1
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    423e:	ee10 2a10 	vmov	r2, s0
    4242:	463b      	mov	r3, r7
    4244:	ee10 0a10 	vmov	r0, s0
    4248:	4639      	mov	r1, r7
    424a:	f000 fe9b 	bl	4f84 <__aeabi_dcmpun>
    424e:	2800      	cmp	r0, #0
    4250:	f040 80b2 	bne.w	43b8 <Print::printFloat(double, unsigned char)+0x188>
    	if (isinf(number)) return print("inf");
    4254:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    4258:	4630      	mov	r0, r6
    425a:	4649      	mov	r1, r9
    425c:	f04f 32ff 	mov.w	r2, #4294967295
    4260:	4b59      	ldr	r3, [pc, #356]	; (43c8 <Print::printFloat(double, unsigned char)+0x198>)
    4262:	f000 fe8f 	bl	4f84 <__aeabi_dcmpun>
    4266:	b990      	cbnz	r0, 428e <Print::printFloat(double, unsigned char)+0x5e>
    4268:	4630      	mov	r0, r6
    426a:	4649      	mov	r1, r9
    426c:	f04f 32ff 	mov.w	r2, #4294967295
    4270:	4b55      	ldr	r3, [pc, #340]	; (43c8 <Print::printFloat(double, unsigned char)+0x198>)
    4272:	f000 fe69 	bl	4f48 <__aeabi_dcmple>
    4276:	b950      	cbnz	r0, 428e <Print::printFloat(double, unsigned char)+0x5e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    4278:	682b      	ldr	r3, [r5, #0]
    427a:	4954      	ldr	r1, [pc, #336]	; (43cc <Print::printFloat(double, unsigned char)+0x19c>)
    427c:	685b      	ldr	r3, [r3, #4]
    427e:	4628      	mov	r0, r5
    4280:	2203      	movs	r2, #3
    4282:	4798      	blx	r3
    4284:	4680      	mov	r8, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    4286:	4640      	mov	r0, r8
    4288:	b005      	add	sp, #20
    428a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    428e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    4292:	4b4f      	ldr	r3, [pc, #316]	; (43d0 <Print::printFloat(double, unsigned char)+0x1a0>)
    4294:	4630      	mov	r0, r6
    4296:	4639      	mov	r1, r7
    4298:	f000 fe6a 	bl	4f70 <__aeabi_dcmpgt>
    429c:	2800      	cmp	r0, #0
    429e:	d172      	bne.n	4386 <Print::printFloat(double, unsigned char)+0x156>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    42a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    42a4:	4b4b      	ldr	r3, [pc, #300]	; (43d4 <Print::printFloat(double, unsigned char)+0x1a4>)
    42a6:	4630      	mov	r0, r6
    42a8:	4639      	mov	r1, r7
    42aa:	f000 fe43 	bl	4f34 <__aeabi_dcmplt>
    42ae:	2800      	cmp	r0, #0
    42b0:	d169      	bne.n	4386 <Print::printFloat(double, unsigned char)+0x156>
	
	// Handle negative numbers
	if (number < 0.0) {
    42b2:	2200      	movs	r2, #0
    42b4:	2300      	movs	r3, #0
    42b6:	4630      	mov	r0, r6
    42b8:	4639      	mov	r1, r7
    42ba:	f000 fe3b 	bl	4f34 <__aeabi_dcmplt>
    42be:	2800      	cmp	r0, #0
    42c0:	d164      	bne.n	438c <Print::printFloat(double, unsigned char)+0x15c>

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    42c2:	4681      	mov	r9, r0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    42c4:	2c00      	cmp	r4, #0
    42c6:	d067      	beq.n	4398 <Print::printFloat(double, unsigned char)+0x168>
    42c8:	4943      	ldr	r1, [pc, #268]	; (43d8 <Print::printFloat(double, unsigned char)+0x1a8>)
    42ca:	2000      	movs	r0, #0
    42cc:	f04f 0800 	mov.w	r8, #0
		rounding *= 0.1;
    42d0:	a33b      	add	r3, pc, #236	; (adr r3, 43c0 <Print::printFloat(double, unsigned char)+0x190>)
    42d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    42d6:	f108 0801 	add.w	r8, r8, #1
    42da:	f000 fbb9 	bl	4a50 <__aeabi_dmul>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    42de:	fa5f f388 	uxtb.w	r3, r8
    42e2:	429c      	cmp	r4, r3
    42e4:	d8f4      	bhi.n	42d0 <Print::printFloat(double, unsigned char)+0xa0>
		rounding *= 0.1;
	}
	number += rounding;
    42e6:	4602      	mov	r2, r0
    42e8:	460b      	mov	r3, r1
    42ea:	4630      	mov	r0, r6
    42ec:	4639      	mov	r1, r7
    42ee:	f000 f9fd 	bl	46ec <__adddf3>
    42f2:	460f      	mov	r7, r1
    42f4:	4606      	mov	r6, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    42f6:	f000 fe5b 	bl	4fb0 <__aeabi_d2uiz>
    42fa:	4680      	mov	r8, r0
	double remainder = number - (double)int_part;
    42fc:	f000 fb32 	bl	4964 <__aeabi_ui2d>
    4300:	4602      	mov	r2, r0
    4302:	460b      	mov	r3, r1
    4304:	4630      	mov	r0, r6
    4306:	4639      	mov	r1, r7
    4308:	f000 f9ee 	bl	46e8 <__aeabi_dsub>
	count += printNumber(int_part, 10, sign);
    430c:	464b      	mov	r3, r9
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    430e:	4606      	mov	r6, r0
    4310:	460f      	mov	r7, r1
	count += printNumber(int_part, 10, sign);
    4312:	220a      	movs	r2, #10
    4314:	4641      	mov	r1, r8
    4316:	4628      	mov	r0, r5
    4318:	f7ff ff48 	bl	41ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    431c:	2c0f      	cmp	r4, #15
    431e:	bf28      	it	cs
    4320:	240f      	movcs	r4, #15
    4322:	f104 0901 	add.w	r9, r4, #1

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    4326:	232e      	movs	r3, #46	; 0x2e
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    4328:	4680      	mov	r8, r0
    432a:	fa5f f989 	uxtb.w	r9, r9

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    432e:	f88d 3000 	strb.w	r3, [sp]
    4332:	2401      	movs	r4, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    4334:	2200      	movs	r2, #0
    4336:	4b29      	ldr	r3, [pc, #164]	; (43dc <Print::printFloat(double, unsigned char)+0x1ac>)
    4338:	4630      	mov	r0, r6
    433a:	4639      	mov	r1, r7
    433c:	f000 fb88 	bl	4a50 <__aeabi_dmul>
    4340:	460f      	mov	r7, r1
    4342:	4606      	mov	r6, r0
			n = (uint8_t)(remainder);
    4344:	f000 fe34 	bl	4fb0 <__aeabi_d2uiz>
			buf[count++] = '0' + n;
    4348:	ab04      	add	r3, sp, #16
    434a:	4423      	add	r3, r4
		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    434c:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    434e:	f100 0230 	add.w	r2, r0, #48	; 0x30
    4352:	f803 2c10 	strb.w	r2, [r3, #-16]
			remainder -= n; 
    4356:	f000 fb15 	bl	4984 <__aeabi_i2d>
    435a:	4602      	mov	r2, r0
    435c:	460b      	mov	r3, r1
    435e:	4630      	mov	r0, r6
    4360:	4639      	mov	r1, r7
    4362:	f000 f9c1 	bl	46e8 <__aeabi_dsub>
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    4366:	3401      	adds	r4, #1
    4368:	b2e4      	uxtb	r4, r4
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    436a:	454c      	cmp	r4, r9
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
    436c:	4606      	mov	r6, r0
    436e:	460f      	mov	r7, r1
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    4370:	d1e0      	bne.n	4334 <Print::printFloat(double, unsigned char)+0x104>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    4372:	682b      	ldr	r3, [r5, #0]
    4374:	4622      	mov	r2, r4
    4376:	685b      	ldr	r3, [r3, #4]
    4378:	4628      	mov	r0, r5
    437a:	4669      	mov	r1, sp
    437c:	4798      	blx	r3
	}
	return count;
}
    437e:	4640      	mov	r0, r8
    4380:	b005      	add	sp, #20
    4382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4386:	682b      	ldr	r3, [r5, #0]
    4388:	4915      	ldr	r1, [pc, #84]	; (43e0 <Print::printFloat(double, unsigned char)+0x1b0>)
    438a:	e777      	b.n	427c <Print::printFloat(double, unsigned char)+0x4c>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    438c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    4390:	461f      	mov	r7, r3
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    4392:	f04f 0901 	mov.w	r9, #1
    4396:	e795      	b.n	42c4 <Print::printFloat(double, unsigned char)+0x94>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    4398:	2200      	movs	r2, #0
    439a:	4b0f      	ldr	r3, [pc, #60]	; (43d8 <Print::printFloat(double, unsigned char)+0x1a8>)
    439c:	4630      	mov	r0, r6
    439e:	4639      	mov	r1, r7
    43a0:	f000 f9a4 	bl	46ec <__adddf3>
    43a4:	f000 fe04 	bl	4fb0 <__aeabi_d2uiz>
    43a8:	464b      	mov	r3, r9
    43aa:	4601      	mov	r1, r0
    43ac:	220a      	movs	r2, #10
    43ae:	4628      	mov	r0, r5
    43b0:	f7ff fefc 	bl	41ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    43b4:	4680      	mov	r8, r0
    43b6:	e766      	b.n	4286 <Print::printFloat(double, unsigned char)+0x56>
    43b8:	682b      	ldr	r3, [r5, #0]
    43ba:	490a      	ldr	r1, [pc, #40]	; (43e4 <Print::printFloat(double, unsigned char)+0x1b4>)
    43bc:	e75e      	b.n	427c <Print::printFloat(double, unsigned char)+0x4c>
    43be:	bf00      	nop
    43c0:	a0000000 	.word	0xa0000000
    43c4:	3fb99999 	.word	0x3fb99999
    43c8:	7fefffff 	.word	0x7fefffff
    43cc:	0000614c 	.word	0x0000614c
    43d0:	41efffff 	.word	0x41efffff
    43d4:	c1efffff 	.word	0xc1efffff
    43d8:	3fe00000 	.word	0x3fe00000
    43dc:	40240000 	.word	0x40240000
    43e0:	00006148 	.word	0x00006148
    43e4:	00006144 	.word	0x00006144

000043e8 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    43e8:	4770      	bx	lr
    43ea:	bf00      	nop

000043ec <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    43ec:	f7ff bcba 	b.w	3d64 <usb_serial_flush_input>

000043f0 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    43f0:	f7ff bc92 	b.w	3d18 <usb_serial_peekchar>

000043f4 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    43f4:	f7ff bc6c 	b.w	3cd0 <usb_serial_getchar>

000043f8 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    43f8:	f7ff bca6 	b.w	3d48 <usb_serial_available>

000043fc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    43fc:	f7ff bd82 	b.w	3f04 <usb_serial_flush_output>

00004400 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4400:	f7ff bd5c 	b.w	3ebc <usb_serial_write_buffer_free>

00004404 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4404:	4608      	mov	r0, r1
    4406:	4611      	mov	r1, r2
    4408:	f7ff bcc8 	b.w	3d9c <usb_serial_write>

0000440c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    440c:	4608      	mov	r0, r1
    440e:	f7ff bd49 	b.w	3ea4 <usb_serial_putchar>
    4412:	bf00      	nop

00004414 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4418:	4e31      	ldr	r6, [pc, #196]	; (44e0 <yield+0xcc>)
    441a:	7833      	ldrb	r3, [r6, #0]
    441c:	b193      	cbz	r3, 4444 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    441e:	4f31      	ldr	r7, [pc, #196]	; (44e4 <yield+0xd0>)
    4420:	783a      	ldrb	r2, [r7, #0]
    4422:	b97a      	cbnz	r2, 4444 <yield+0x30>
	running = 1;
    4424:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4426:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    4428:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    442a:	d436      	bmi.n	449a <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    442c:	079a      	lsls	r2, r3, #30
    442e:	d419      	bmi.n	4464 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    4430:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4432:	075b      	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    4434:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4436:	d505      	bpl.n	4444 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    4438:	4b2b      	ldr	r3, [pc, #172]	; (44e8 <yield+0xd4>)
    443a:	681a      	ldr	r2, [r3, #0]
    443c:	b112      	cbz	r2, 4444 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    443e:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4442:	b10a      	cbz	r2, 4448 <yield+0x34>
    4444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4448:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    444c:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    444e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4450:	b118      	cbz	r0, 445a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4452:	4c26      	ldr	r4, [pc, #152]	; (44ec <yield+0xd8>)
    4454:	7822      	ldrb	r2, [r4, #0]
    4456:	2a00      	cmp	r2, #0
    4458:	d02e      	beq.n	44b8 <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    445a:	2900      	cmp	r1, #0
    445c:	d1f2      	bne.n	4444 <yield+0x30>
    445e:	b662      	cpsie	i
    4460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4464:	f8df 8090 	ldr.w	r8, [pc, #144]	; 44f8 <yield+0xe4>
    4468:	f898 2000 	ldrb.w	r2, [r8]
    446c:	2a00      	cmp	r2, #0
    446e:	d0df      	beq.n	4430 <yield+0x1c>
    4470:	f8df 9088 	ldr.w	r9, [pc, #136]	; 44fc <yield+0xe8>
    4474:	2400      	movs	r4, #0
    4476:	e005      	b.n	4484 <yield+0x70>
    4478:	3401      	adds	r4, #1
    447a:	f898 3000 	ldrb.w	r3, [r8]
    447e:	b2e4      	uxtb	r4, r4
    4480:	42a3      	cmp	r3, r4
    4482:	d912      	bls.n	44aa <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    4484:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    4488:	682b      	ldr	r3, [r5, #0]
    448a:	4628      	mov	r0, r5
    448c:	691b      	ldr	r3, [r3, #16]
    448e:	4798      	blx	r3
    4490:	2800      	cmp	r0, #0
    4492:	d0f1      	beq.n	4478 <yield+0x64>
    4494:	692b      	ldr	r3, [r5, #16]
    4496:	4798      	blx	r3
    4498:	e7ee      	b.n	4478 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    449a:	f7ff fc55 	bl	3d48 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    449e:	b9c8      	cbnz	r0, 44d4 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    44a0:	4b13      	ldr	r3, [pc, #76]	; (44f0 <yield+0xdc>)
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	b91b      	cbnz	r3, 44ae <yield+0x9a>
    44a6:	7833      	ldrb	r3, [r6, #0]
    44a8:	e7c0      	b.n	442c <yield+0x18>
    44aa:	7833      	ldrb	r3, [r6, #0]
    44ac:	e7c0      	b.n	4430 <yield+0x1c>
    44ae:	7833      	ldrb	r3, [r6, #0]
    44b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    44b4:	7033      	strb	r3, [r6, #0]
    44b6:	e7b9      	b.n	442c <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    44b8:	6945      	ldr	r5, [r0, #20]
    44ba:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    44bc:	2301      	movs	r3, #1
    44be:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    44c0:	b15d      	cbz	r5, 44da <yield+0xc6>
			firstYield->_prev = nullptr;
    44c2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    44c4:	b901      	cbnz	r1, 44c8 <yield+0xb4>
    44c6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    44c8:	2500      	movs	r5, #0
    44ca:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    44cc:	6883      	ldr	r3, [r0, #8]
    44ce:	4798      	blx	r3
		runningFromYield = false;
    44d0:	7025      	strb	r5, [r4, #0]
    44d2:	e7b7      	b.n	4444 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    44d4:	f000 f902 	bl	46dc <serialEvent()>
    44d8:	e7e2      	b.n	44a0 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    44da:	4b06      	ldr	r3, [pc, #24]	; (44f4 <yield+0xe0>)
    44dc:	601d      	str	r5, [r3, #0]
    44de:	e7f1      	b.n	44c4 <yield+0xb0>
    44e0:	1fff08e8 	.word	0x1fff08e8
    44e4:	1fff1445 	.word	0x1fff1445
    44e8:	1fff1440 	.word	0x1fff1440
    44ec:	1fff1444 	.word	0x1fff1444
    44f0:	1fff098e 	.word	0x1fff098e
    44f4:	1fff143c 	.word	0x1fff143c
    44f8:	1fff1460 	.word	0x1fff1460
    44fc:	1fff1448 	.word	0x1fff1448

00004500 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4500:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4502:	4829      	ldr	r0, [pc, #164]	; (45a8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4504:	4a29      	ldr	r2, [pc, #164]	; (45ac <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    4506:	4b2a      	ldr	r3, [pc, #168]	; (45b0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4508:	4d2a      	ldr	r5, [pc, #168]	; (45b4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    450a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    450c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    450e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4510:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    4512:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4514:	4c28      	ldr	r4, [pc, #160]	; (45b8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    4516:	2b08      	cmp	r3, #8
    4518:	d030      	beq.n	457c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    451a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    451c:	4827      	ldr	r0, [pc, #156]	; (45bc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    451e:	4928      	ldr	r1, [pc, #160]	; (45c0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4520:	d037      	beq.n	4592 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4522:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4524:	bf0c      	ite	eq
    4526:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4528:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    452a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    452c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    452e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4530:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4532:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4534:	4b23      	ldr	r3, [pc, #140]	; (45c4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4536:	4924      	ldr	r1, [pc, #144]	; (45c8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4538:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    453a:	4a24      	ldr	r2, [pc, #144]	; (45cc <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    453c:	b1bb      	cbz	r3, 456e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    453e:	2301      	movs	r3, #1
    4540:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4542:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4544:	4b22      	ldr	r3, [pc, #136]	; (45d0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4546:	4923      	ldr	r1, [pc, #140]	; (45d4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4548:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    454a:	4a23      	ldr	r2, [pc, #140]	; (45d8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    454c:	2b01      	cmp	r3, #1
    454e:	d926      	bls.n	459e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4550:	2b04      	cmp	r3, #4
    4552:	d90f      	bls.n	4574 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    4554:	2b08      	cmp	r3, #8
    4556:	d91e      	bls.n	4596 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4558:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    455a:	bf94      	ite	ls
    455c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    455e:	2387      	movhi	r3, #135	; 0x87
    4560:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4562:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    4564:	4b1d      	ldr	r3, [pc, #116]	; (45dc <analog_init+0xdc>)
    4566:	2201      	movs	r2, #1
    4568:	701a      	strb	r2, [r3, #0]
}
    456a:	bc30      	pop	{r4, r5}
    456c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    456e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4570:	6013      	str	r3, [r2, #0]
    4572:	e7e7      	b.n	4544 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4574:	2384      	movs	r3, #132	; 0x84
    4576:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4578:	6013      	str	r3, [r2, #0]
    457a:	e7f3      	b.n	4564 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    457c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4580:	490f      	ldr	r1, [pc, #60]	; (45c0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4582:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4584:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4586:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4588:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    458a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    458c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    458e:	600b      	str	r3, [r1, #0]
    4590:	e7d0      	b.n	4534 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4592:	2239      	movs	r2, #57	; 0x39
    4594:	e7f7      	b.n	4586 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4596:	2385      	movs	r3, #133	; 0x85
    4598:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    459a:	6013      	str	r3, [r2, #0]
    459c:	e7e2      	b.n	4564 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    459e:	2380      	movs	r3, #128	; 0x80
    45a0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    45a2:	6013      	str	r3, [r2, #0]
    45a4:	e7de      	b.n	4564 <analog_init+0x64>
    45a6:	bf00      	nop
    45a8:	40074000 	.word	0x40074000
    45ac:	40074001 	.word	0x40074001
    45b0:	1fff08e9 	.word	0x1fff08e9
    45b4:	4003b008 	.word	0x4003b008
    45b8:	4003b00c 	.word	0x4003b00c
    45bc:	400bb008 	.word	0x400bb008
    45c0:	400bb00c 	.word	0x400bb00c
    45c4:	1fff1447 	.word	0x1fff1447
    45c8:	4003b020 	.word	0x4003b020
    45cc:	400bb020 	.word	0x400bb020
    45d0:	1fff08ea 	.word	0x1fff08ea
    45d4:	4003b024 	.word	0x4003b024
    45d8:	400bb024 	.word	0x400bb024
    45dc:	1fff1446 	.word	0x1fff1446

000045e0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    45e0:	b4f0      	push	{r4, r5, r6, r7}
    45e2:	1e4d      	subs	r5, r1, #1
    45e4:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    45e6:	2400      	movs	r4, #0
    45e8:	e000      	b.n	45ec <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    45ea:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    45ec:	fbb0 f3f2 	udiv	r3, r0, r2
    45f0:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    45f4:	2809      	cmp	r0, #9
    45f6:	f100 0730 	add.w	r7, r0, #48	; 0x30
    45fa:	bf8a      	itet	hi
    45fc:	3037      	addhi	r0, #55	; 0x37
    45fe:	b2f8      	uxtbls	r0, r7
    4600:	b2c0      	uxtbhi	r0, r0
    4602:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4606:	4618      	mov	r0, r3
    4608:	2b00      	cmp	r3, #0
    460a:	d1ee      	bne.n	45ea <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    460c:	190a      	adds	r2, r1, r4
    460e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4610:	b14c      	cbz	r4, 4626 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4612:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4614:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4618:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    461a:	3301      	adds	r3, #1
    461c:	1ae0      	subs	r0, r4, r3
    461e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4620:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4624:	dbf5      	blt.n	4612 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4626:	4608      	mov	r0, r1
    4628:	bcf0      	pop	{r4, r5, r6, r7}
    462a:	4770      	bx	lr

0000462c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    462c:	b510      	push	{r4, lr}
    462e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4630:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4632:	f7fd fea1 	bl	2378 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    4636:	4a18      	ldr	r2, [pc, #96]	; (4698 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4638:	4b18      	ldr	r3, [pc, #96]	; (469c <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    463a:	4919      	ldr	r1, [pc, #100]	; (46a0 <usb_init_serialnumber+0x74>)
    463c:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    463e:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4640:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4642:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4644:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4646:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4648:	7813      	ldrb	r3, [r2, #0]
    464a:	061b      	lsls	r3, r3, #24
    464c:	d5fc      	bpl.n	4648 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    464e:	4b15      	ldr	r3, [pc, #84]	; (46a4 <usb_init_serialnumber+0x78>)
    4650:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    4652:	f7fd feab 	bl	23ac <kinetis_hsrun_enable>
#endif
	__enable_irq();
    4656:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4658:	4b13      	ldr	r3, [pc, #76]	; (46a8 <usb_init_serialnumber+0x7c>)
    465a:	429c      	cmp	r4, r3
    465c:	bf9c      	itt	ls
    465e:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
    4662:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    4664:	4620      	mov	r0, r4
    4666:	4c11      	ldr	r4, [pc, #68]	; (46ac <usb_init_serialnumber+0x80>)
    4668:	a901      	add	r1, sp, #4
    466a:	220a      	movs	r2, #10
    466c:	f7ff ffb8 	bl	45e0 <ultoa>
    4670:	a901      	add	r1, sp, #4
    4672:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    4674:	2300      	movs	r3, #0
		char c = buf[i];
    4676:	f811 2b01 	ldrb.w	r2, [r1], #1
    467a:	3301      	adds	r3, #1
		if (!c) break;
    467c:	b13a      	cbz	r2, 468e <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    467e:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4680:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4684:	d1f7      	bne.n	4676 <usb_init_serialnumber+0x4a>
    4686:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4688:	7023      	strb	r3, [r4, #0]
}
    468a:	b004      	add	sp, #16
    468c:	bd10      	pop	{r4, pc}
    468e:	005b      	lsls	r3, r3, #1
    4690:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4692:	7023      	strb	r3, [r4, #0]
}
    4694:	b004      	add	sp, #16
    4696:	bd10      	pop	{r4, pc}
    4698:	40020004 	.word	0x40020004
    469c:	40020000 	.word	0x40020000
    46a0:	41070000 	.word	0x41070000
    46a4:	4002000c 	.word	0x4002000c
    46a8:	0098967f 	.word	0x0098967f
    46ac:	1fff0978 	.word	0x1fff0978

000046b0 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    46b0:	b430      	push	{r4, r5}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    46b2:	4907      	ldr	r1, [pc, #28]	; (46d0 <HardwareSerial::addToSerialEventsList()+0x20>)
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    46b4:	4c07      	ldr	r4, [pc, #28]	; (46d4 <HardwareSerial::addToSerialEventsList()+0x24>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    46b6:	780a      	ldrb	r2, [r1, #0]
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    46b8:	7823      	ldrb	r3, [r4, #0]
    46ba:	4d07      	ldr	r5, [pc, #28]	; (46d8 <HardwareSerial::addToSerialEventsList()+0x28>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    46bc:	f042 0202 	orr.w	r2, r2, #2
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    46c0:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    46c4:	700a      	strb	r2, [r1, #0]
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    46c6:	3301      	adds	r3, #1
    46c8:	7023      	strb	r3, [r4, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    46ca:	bc30      	pop	{r4, r5}
    46cc:	4770      	bx	lr
    46ce:	bf00      	nop
    46d0:	1fff08e8 	.word	0x1fff08e8
    46d4:	1fff1460 	.word	0x1fff1460
    46d8:	1fff1448 	.word	0x1fff1448

000046dc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    46dc:	4770      	bx	lr
    46de:	bf00      	nop

000046e0 <__aeabi_drsub>:
    46e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    46e4:	e002      	b.n	46ec <__adddf3>
    46e6:	bf00      	nop

000046e8 <__aeabi_dsub>:
    46e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000046ec <__adddf3>:
    46ec:	b530      	push	{r4, r5, lr}
    46ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
    46f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    46f6:	ea94 0f05 	teq	r4, r5
    46fa:	bf08      	it	eq
    46fc:	ea90 0f02 	teqeq	r0, r2
    4700:	bf1f      	itttt	ne
    4702:	ea54 0c00 	orrsne.w	ip, r4, r0
    4706:	ea55 0c02 	orrsne.w	ip, r5, r2
    470a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    470e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4712:	f000 80e2 	beq.w	48da <__adddf3+0x1ee>
    4716:	ea4f 5454 	mov.w	r4, r4, lsr #21
    471a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    471e:	bfb8      	it	lt
    4720:	426d      	neglt	r5, r5
    4722:	dd0c      	ble.n	473e <__adddf3+0x52>
    4724:	442c      	add	r4, r5
    4726:	ea80 0202 	eor.w	r2, r0, r2
    472a:	ea81 0303 	eor.w	r3, r1, r3
    472e:	ea82 0000 	eor.w	r0, r2, r0
    4732:	ea83 0101 	eor.w	r1, r3, r1
    4736:	ea80 0202 	eor.w	r2, r0, r2
    473a:	ea81 0303 	eor.w	r3, r1, r3
    473e:	2d36      	cmp	r5, #54	; 0x36
    4740:	bf88      	it	hi
    4742:	bd30      	pophi	{r4, r5, pc}
    4744:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4748:	ea4f 3101 	mov.w	r1, r1, lsl #12
    474c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4750:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4754:	d002      	beq.n	475c <__adddf3+0x70>
    4756:	4240      	negs	r0, r0
    4758:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    475c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4760:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4764:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4768:	d002      	beq.n	4770 <__adddf3+0x84>
    476a:	4252      	negs	r2, r2
    476c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4770:	ea94 0f05 	teq	r4, r5
    4774:	f000 80a7 	beq.w	48c6 <__adddf3+0x1da>
    4778:	f1a4 0401 	sub.w	r4, r4, #1
    477c:	f1d5 0e20 	rsbs	lr, r5, #32
    4780:	db0d      	blt.n	479e <__adddf3+0xb2>
    4782:	fa02 fc0e 	lsl.w	ip, r2, lr
    4786:	fa22 f205 	lsr.w	r2, r2, r5
    478a:	1880      	adds	r0, r0, r2
    478c:	f141 0100 	adc.w	r1, r1, #0
    4790:	fa03 f20e 	lsl.w	r2, r3, lr
    4794:	1880      	adds	r0, r0, r2
    4796:	fa43 f305 	asr.w	r3, r3, r5
    479a:	4159      	adcs	r1, r3
    479c:	e00e      	b.n	47bc <__adddf3+0xd0>
    479e:	f1a5 0520 	sub.w	r5, r5, #32
    47a2:	f10e 0e20 	add.w	lr, lr, #32
    47a6:	2a01      	cmp	r2, #1
    47a8:	fa03 fc0e 	lsl.w	ip, r3, lr
    47ac:	bf28      	it	cs
    47ae:	f04c 0c02 	orrcs.w	ip, ip, #2
    47b2:	fa43 f305 	asr.w	r3, r3, r5
    47b6:	18c0      	adds	r0, r0, r3
    47b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    47bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    47c0:	d507      	bpl.n	47d2 <__adddf3+0xe6>
    47c2:	f04f 0e00 	mov.w	lr, #0
    47c6:	f1dc 0c00 	rsbs	ip, ip, #0
    47ca:	eb7e 0000 	sbcs.w	r0, lr, r0
    47ce:	eb6e 0101 	sbc.w	r1, lr, r1
    47d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    47d6:	d31b      	bcc.n	4810 <__adddf3+0x124>
    47d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    47dc:	d30c      	bcc.n	47f8 <__adddf3+0x10c>
    47de:	0849      	lsrs	r1, r1, #1
    47e0:	ea5f 0030 	movs.w	r0, r0, rrx
    47e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    47e8:	f104 0401 	add.w	r4, r4, #1
    47ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
    47f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    47f4:	f080 809a 	bcs.w	492c <__adddf3+0x240>
    47f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    47fc:	bf08      	it	eq
    47fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4802:	f150 0000 	adcs.w	r0, r0, #0
    4806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    480a:	ea41 0105 	orr.w	r1, r1, r5
    480e:	bd30      	pop	{r4, r5, pc}
    4810:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4814:	4140      	adcs	r0, r0
    4816:	eb41 0101 	adc.w	r1, r1, r1
    481a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    481e:	f1a4 0401 	sub.w	r4, r4, #1
    4822:	d1e9      	bne.n	47f8 <__adddf3+0x10c>
    4824:	f091 0f00 	teq	r1, #0
    4828:	bf04      	itt	eq
    482a:	4601      	moveq	r1, r0
    482c:	2000      	moveq	r0, #0
    482e:	fab1 f381 	clz	r3, r1
    4832:	bf08      	it	eq
    4834:	3320      	addeq	r3, #32
    4836:	f1a3 030b 	sub.w	r3, r3, #11
    483a:	f1b3 0220 	subs.w	r2, r3, #32
    483e:	da0c      	bge.n	485a <__adddf3+0x16e>
    4840:	320c      	adds	r2, #12
    4842:	dd08      	ble.n	4856 <__adddf3+0x16a>
    4844:	f102 0c14 	add.w	ip, r2, #20
    4848:	f1c2 020c 	rsb	r2, r2, #12
    484c:	fa01 f00c 	lsl.w	r0, r1, ip
    4850:	fa21 f102 	lsr.w	r1, r1, r2
    4854:	e00c      	b.n	4870 <__adddf3+0x184>
    4856:	f102 0214 	add.w	r2, r2, #20
    485a:	bfd8      	it	le
    485c:	f1c2 0c20 	rsble	ip, r2, #32
    4860:	fa01 f102 	lsl.w	r1, r1, r2
    4864:	fa20 fc0c 	lsr.w	ip, r0, ip
    4868:	bfdc      	itt	le
    486a:	ea41 010c 	orrle.w	r1, r1, ip
    486e:	4090      	lslle	r0, r2
    4870:	1ae4      	subs	r4, r4, r3
    4872:	bfa2      	ittt	ge
    4874:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4878:	4329      	orrge	r1, r5
    487a:	bd30      	popge	{r4, r5, pc}
    487c:	ea6f 0404 	mvn.w	r4, r4
    4880:	3c1f      	subs	r4, #31
    4882:	da1c      	bge.n	48be <__adddf3+0x1d2>
    4884:	340c      	adds	r4, #12
    4886:	dc0e      	bgt.n	48a6 <__adddf3+0x1ba>
    4888:	f104 0414 	add.w	r4, r4, #20
    488c:	f1c4 0220 	rsb	r2, r4, #32
    4890:	fa20 f004 	lsr.w	r0, r0, r4
    4894:	fa01 f302 	lsl.w	r3, r1, r2
    4898:	ea40 0003 	orr.w	r0, r0, r3
    489c:	fa21 f304 	lsr.w	r3, r1, r4
    48a0:	ea45 0103 	orr.w	r1, r5, r3
    48a4:	bd30      	pop	{r4, r5, pc}
    48a6:	f1c4 040c 	rsb	r4, r4, #12
    48aa:	f1c4 0220 	rsb	r2, r4, #32
    48ae:	fa20 f002 	lsr.w	r0, r0, r2
    48b2:	fa01 f304 	lsl.w	r3, r1, r4
    48b6:	ea40 0003 	orr.w	r0, r0, r3
    48ba:	4629      	mov	r1, r5
    48bc:	bd30      	pop	{r4, r5, pc}
    48be:	fa21 f004 	lsr.w	r0, r1, r4
    48c2:	4629      	mov	r1, r5
    48c4:	bd30      	pop	{r4, r5, pc}
    48c6:	f094 0f00 	teq	r4, #0
    48ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    48ce:	bf06      	itte	eq
    48d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    48d4:	3401      	addeq	r4, #1
    48d6:	3d01      	subne	r5, #1
    48d8:	e74e      	b.n	4778 <__adddf3+0x8c>
    48da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    48de:	bf18      	it	ne
    48e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    48e4:	d029      	beq.n	493a <__adddf3+0x24e>
    48e6:	ea94 0f05 	teq	r4, r5
    48ea:	bf08      	it	eq
    48ec:	ea90 0f02 	teqeq	r0, r2
    48f0:	d005      	beq.n	48fe <__adddf3+0x212>
    48f2:	ea54 0c00 	orrs.w	ip, r4, r0
    48f6:	bf04      	itt	eq
    48f8:	4619      	moveq	r1, r3
    48fa:	4610      	moveq	r0, r2
    48fc:	bd30      	pop	{r4, r5, pc}
    48fe:	ea91 0f03 	teq	r1, r3
    4902:	bf1e      	ittt	ne
    4904:	2100      	movne	r1, #0
    4906:	2000      	movne	r0, #0
    4908:	bd30      	popne	{r4, r5, pc}
    490a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    490e:	d105      	bne.n	491c <__adddf3+0x230>
    4910:	0040      	lsls	r0, r0, #1
    4912:	4149      	adcs	r1, r1
    4914:	bf28      	it	cs
    4916:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    491a:	bd30      	pop	{r4, r5, pc}
    491c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4920:	bf3c      	itt	cc
    4922:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4926:	bd30      	popcc	{r4, r5, pc}
    4928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    492c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4930:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4934:	f04f 0000 	mov.w	r0, #0
    4938:	bd30      	pop	{r4, r5, pc}
    493a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    493e:	bf1a      	itte	ne
    4940:	4619      	movne	r1, r3
    4942:	4610      	movne	r0, r2
    4944:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4948:	bf1c      	itt	ne
    494a:	460b      	movne	r3, r1
    494c:	4602      	movne	r2, r0
    494e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4952:	bf06      	itte	eq
    4954:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4958:	ea91 0f03 	teqeq	r1, r3
    495c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4960:	bd30      	pop	{r4, r5, pc}
    4962:	bf00      	nop

00004964 <__aeabi_ui2d>:
    4964:	f090 0f00 	teq	r0, #0
    4968:	bf04      	itt	eq
    496a:	2100      	moveq	r1, #0
    496c:	4770      	bxeq	lr
    496e:	b530      	push	{r4, r5, lr}
    4970:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4974:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4978:	f04f 0500 	mov.w	r5, #0
    497c:	f04f 0100 	mov.w	r1, #0
    4980:	e750      	b.n	4824 <__adddf3+0x138>
    4982:	bf00      	nop

00004984 <__aeabi_i2d>:
    4984:	f090 0f00 	teq	r0, #0
    4988:	bf04      	itt	eq
    498a:	2100      	moveq	r1, #0
    498c:	4770      	bxeq	lr
    498e:	b530      	push	{r4, r5, lr}
    4990:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4994:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4998:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    499c:	bf48      	it	mi
    499e:	4240      	negmi	r0, r0
    49a0:	f04f 0100 	mov.w	r1, #0
    49a4:	e73e      	b.n	4824 <__adddf3+0x138>
    49a6:	bf00      	nop

000049a8 <__aeabi_f2d>:
    49a8:	0042      	lsls	r2, r0, #1
    49aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
    49ae:	ea4f 0131 	mov.w	r1, r1, rrx
    49b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    49b6:	bf1f      	itttt	ne
    49b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    49bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    49c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    49c4:	4770      	bxne	lr
    49c6:	f092 0f00 	teq	r2, #0
    49ca:	bf14      	ite	ne
    49cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    49d0:	4770      	bxeq	lr
    49d2:	b530      	push	{r4, r5, lr}
    49d4:	f44f 7460 	mov.w	r4, #896	; 0x380
    49d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    49dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    49e0:	e720      	b.n	4824 <__adddf3+0x138>
    49e2:	bf00      	nop

000049e4 <__aeabi_ul2d>:
    49e4:	ea50 0201 	orrs.w	r2, r0, r1
    49e8:	bf08      	it	eq
    49ea:	4770      	bxeq	lr
    49ec:	b530      	push	{r4, r5, lr}
    49ee:	f04f 0500 	mov.w	r5, #0
    49f2:	e00a      	b.n	4a0a <__aeabi_l2d+0x16>

000049f4 <__aeabi_l2d>:
    49f4:	ea50 0201 	orrs.w	r2, r0, r1
    49f8:	bf08      	it	eq
    49fa:	4770      	bxeq	lr
    49fc:	b530      	push	{r4, r5, lr}
    49fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4a02:	d502      	bpl.n	4a0a <__aeabi_l2d+0x16>
    4a04:	4240      	negs	r0, r0
    4a06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4a0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4a0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4a12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4a16:	f43f aedc 	beq.w	47d2 <__adddf3+0xe6>
    4a1a:	f04f 0203 	mov.w	r2, #3
    4a1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a22:	bf18      	it	ne
    4a24:	3203      	addne	r2, #3
    4a26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4a2a:	bf18      	it	ne
    4a2c:	3203      	addne	r2, #3
    4a2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4a32:	f1c2 0320 	rsb	r3, r2, #32
    4a36:	fa00 fc03 	lsl.w	ip, r0, r3
    4a3a:	fa20 f002 	lsr.w	r0, r0, r2
    4a3e:	fa01 fe03 	lsl.w	lr, r1, r3
    4a42:	ea40 000e 	orr.w	r0, r0, lr
    4a46:	fa21 f102 	lsr.w	r1, r1, r2
    4a4a:	4414      	add	r4, r2
    4a4c:	e6c1      	b.n	47d2 <__adddf3+0xe6>
    4a4e:	bf00      	nop

00004a50 <__aeabi_dmul>:
    4a50:	b570      	push	{r4, r5, r6, lr}
    4a52:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4a56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4a5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4a5e:	bf1d      	ittte	ne
    4a60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4a64:	ea94 0f0c 	teqne	r4, ip
    4a68:	ea95 0f0c 	teqne	r5, ip
    4a6c:	f000 f8de 	bleq	4c2c <__aeabi_dmul+0x1dc>
    4a70:	442c      	add	r4, r5
    4a72:	ea81 0603 	eor.w	r6, r1, r3
    4a76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4a7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4a7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4a82:	bf18      	it	ne
    4a84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4a90:	d038      	beq.n	4b04 <__aeabi_dmul+0xb4>
    4a92:	fba0 ce02 	umull	ip, lr, r0, r2
    4a96:	f04f 0500 	mov.w	r5, #0
    4a9a:	fbe1 e502 	umlal	lr, r5, r1, r2
    4a9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4aa2:	fbe0 e503 	umlal	lr, r5, r0, r3
    4aa6:	f04f 0600 	mov.w	r6, #0
    4aaa:	fbe1 5603 	umlal	r5, r6, r1, r3
    4aae:	f09c 0f00 	teq	ip, #0
    4ab2:	bf18      	it	ne
    4ab4:	f04e 0e01 	orrne.w	lr, lr, #1
    4ab8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4abc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4ac0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4ac4:	d204      	bcs.n	4ad0 <__aeabi_dmul+0x80>
    4ac6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4aca:	416d      	adcs	r5, r5
    4acc:	eb46 0606 	adc.w	r6, r6, r6
    4ad0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4ad4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4ad8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4adc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4ae0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4ae4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4ae8:	bf88      	it	hi
    4aea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4aee:	d81e      	bhi.n	4b2e <__aeabi_dmul+0xde>
    4af0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4af4:	bf08      	it	eq
    4af6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4afa:	f150 0000 	adcs.w	r0, r0, #0
    4afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4b02:	bd70      	pop	{r4, r5, r6, pc}
    4b04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4b08:	ea46 0101 	orr.w	r1, r6, r1
    4b0c:	ea40 0002 	orr.w	r0, r0, r2
    4b10:	ea81 0103 	eor.w	r1, r1, r3
    4b14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4b18:	bfc2      	ittt	gt
    4b1a:	ebd4 050c 	rsbsgt	r5, r4, ip
    4b1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4b22:	bd70      	popgt	{r4, r5, r6, pc}
    4b24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4b28:	f04f 0e00 	mov.w	lr, #0
    4b2c:	3c01      	subs	r4, #1
    4b2e:	f300 80ab 	bgt.w	4c88 <__aeabi_dmul+0x238>
    4b32:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4b36:	bfde      	ittt	le
    4b38:	2000      	movle	r0, #0
    4b3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4b3e:	bd70      	pople	{r4, r5, r6, pc}
    4b40:	f1c4 0400 	rsb	r4, r4, #0
    4b44:	3c20      	subs	r4, #32
    4b46:	da35      	bge.n	4bb4 <__aeabi_dmul+0x164>
    4b48:	340c      	adds	r4, #12
    4b4a:	dc1b      	bgt.n	4b84 <__aeabi_dmul+0x134>
    4b4c:	f104 0414 	add.w	r4, r4, #20
    4b50:	f1c4 0520 	rsb	r5, r4, #32
    4b54:	fa00 f305 	lsl.w	r3, r0, r5
    4b58:	fa20 f004 	lsr.w	r0, r0, r4
    4b5c:	fa01 f205 	lsl.w	r2, r1, r5
    4b60:	ea40 0002 	orr.w	r0, r0, r2
    4b64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4b68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4b6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4b70:	fa21 f604 	lsr.w	r6, r1, r4
    4b74:	eb42 0106 	adc.w	r1, r2, r6
    4b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4b7c:	bf08      	it	eq
    4b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4b82:	bd70      	pop	{r4, r5, r6, pc}
    4b84:	f1c4 040c 	rsb	r4, r4, #12
    4b88:	f1c4 0520 	rsb	r5, r4, #32
    4b8c:	fa00 f304 	lsl.w	r3, r0, r4
    4b90:	fa20 f005 	lsr.w	r0, r0, r5
    4b94:	fa01 f204 	lsl.w	r2, r1, r4
    4b98:	ea40 0002 	orr.w	r0, r0, r2
    4b9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4ba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ba4:	f141 0100 	adc.w	r1, r1, #0
    4ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4bac:	bf08      	it	eq
    4bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4bb2:	bd70      	pop	{r4, r5, r6, pc}
    4bb4:	f1c4 0520 	rsb	r5, r4, #32
    4bb8:	fa00 f205 	lsl.w	r2, r0, r5
    4bbc:	ea4e 0e02 	orr.w	lr, lr, r2
    4bc0:	fa20 f304 	lsr.w	r3, r0, r4
    4bc4:	fa01 f205 	lsl.w	r2, r1, r5
    4bc8:	ea43 0302 	orr.w	r3, r3, r2
    4bcc:	fa21 f004 	lsr.w	r0, r1, r4
    4bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4bd4:	fa21 f204 	lsr.w	r2, r1, r4
    4bd8:	ea20 0002 	bic.w	r0, r0, r2
    4bdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4be0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4be4:	bf08      	it	eq
    4be6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4bea:	bd70      	pop	{r4, r5, r6, pc}
    4bec:	f094 0f00 	teq	r4, #0
    4bf0:	d10f      	bne.n	4c12 <__aeabi_dmul+0x1c2>
    4bf2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4bf6:	0040      	lsls	r0, r0, #1
    4bf8:	eb41 0101 	adc.w	r1, r1, r1
    4bfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4c00:	bf08      	it	eq
    4c02:	3c01      	subeq	r4, #1
    4c04:	d0f7      	beq.n	4bf6 <__aeabi_dmul+0x1a6>
    4c06:	ea41 0106 	orr.w	r1, r1, r6
    4c0a:	f095 0f00 	teq	r5, #0
    4c0e:	bf18      	it	ne
    4c10:	4770      	bxne	lr
    4c12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4c16:	0052      	lsls	r2, r2, #1
    4c18:	eb43 0303 	adc.w	r3, r3, r3
    4c1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4c20:	bf08      	it	eq
    4c22:	3d01      	subeq	r5, #1
    4c24:	d0f7      	beq.n	4c16 <__aeabi_dmul+0x1c6>
    4c26:	ea43 0306 	orr.w	r3, r3, r6
    4c2a:	4770      	bx	lr
    4c2c:	ea94 0f0c 	teq	r4, ip
    4c30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4c34:	bf18      	it	ne
    4c36:	ea95 0f0c 	teqne	r5, ip
    4c3a:	d00c      	beq.n	4c56 <__aeabi_dmul+0x206>
    4c3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4c40:	bf18      	it	ne
    4c42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4c46:	d1d1      	bne.n	4bec <__aeabi_dmul+0x19c>
    4c48:	ea81 0103 	eor.w	r1, r1, r3
    4c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4c50:	f04f 0000 	mov.w	r0, #0
    4c54:	bd70      	pop	{r4, r5, r6, pc}
    4c56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4c5a:	bf06      	itte	eq
    4c5c:	4610      	moveq	r0, r2
    4c5e:	4619      	moveq	r1, r3
    4c60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4c64:	d019      	beq.n	4c9a <__aeabi_dmul+0x24a>
    4c66:	ea94 0f0c 	teq	r4, ip
    4c6a:	d102      	bne.n	4c72 <__aeabi_dmul+0x222>
    4c6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4c70:	d113      	bne.n	4c9a <__aeabi_dmul+0x24a>
    4c72:	ea95 0f0c 	teq	r5, ip
    4c76:	d105      	bne.n	4c84 <__aeabi_dmul+0x234>
    4c78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4c7c:	bf1c      	itt	ne
    4c7e:	4610      	movne	r0, r2
    4c80:	4619      	movne	r1, r3
    4c82:	d10a      	bne.n	4c9a <__aeabi_dmul+0x24a>
    4c84:	ea81 0103 	eor.w	r1, r1, r3
    4c88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4c8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4c90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c94:	f04f 0000 	mov.w	r0, #0
    4c98:	bd70      	pop	{r4, r5, r6, pc}
    4c9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4c9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4ca2:	bd70      	pop	{r4, r5, r6, pc}

00004ca4 <__aeabi_ddiv>:
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4caa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4cae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4cb2:	bf1d      	ittte	ne
    4cb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4cb8:	ea94 0f0c 	teqne	r4, ip
    4cbc:	ea95 0f0c 	teqne	r5, ip
    4cc0:	f000 f8a7 	bleq	4e12 <__aeabi_ddiv+0x16e>
    4cc4:	eba4 0405 	sub.w	r4, r4, r5
    4cc8:	ea81 0e03 	eor.w	lr, r1, r3
    4ccc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4cd4:	f000 8088 	beq.w	4de8 <__aeabi_ddiv+0x144>
    4cd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4cdc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4ce0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    4ce4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4ce8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4cec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4cf0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    4cf4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4cf8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4cfc:	429d      	cmp	r5, r3
    4cfe:	bf08      	it	eq
    4d00:	4296      	cmpeq	r6, r2
    4d02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    4d06:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4d0a:	d202      	bcs.n	4d12 <__aeabi_ddiv+0x6e>
    4d0c:	085b      	lsrs	r3, r3, #1
    4d0e:	ea4f 0232 	mov.w	r2, r2, rrx
    4d12:	1ab6      	subs	r6, r6, r2
    4d14:	eb65 0503 	sbc.w	r5, r5, r3
    4d18:	085b      	lsrs	r3, r3, #1
    4d1a:	ea4f 0232 	mov.w	r2, r2, rrx
    4d1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4d22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4d26:	ebb6 0e02 	subs.w	lr, r6, r2
    4d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d2e:	bf22      	ittt	cs
    4d30:	1ab6      	subcs	r6, r6, r2
    4d32:	4675      	movcs	r5, lr
    4d34:	ea40 000c 	orrcs.w	r0, r0, ip
    4d38:	085b      	lsrs	r3, r3, #1
    4d3a:	ea4f 0232 	mov.w	r2, r2, rrx
    4d3e:	ebb6 0e02 	subs.w	lr, r6, r2
    4d42:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d46:	bf22      	ittt	cs
    4d48:	1ab6      	subcs	r6, r6, r2
    4d4a:	4675      	movcs	r5, lr
    4d4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4d50:	085b      	lsrs	r3, r3, #1
    4d52:	ea4f 0232 	mov.w	r2, r2, rrx
    4d56:	ebb6 0e02 	subs.w	lr, r6, r2
    4d5a:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d5e:	bf22      	ittt	cs
    4d60:	1ab6      	subcs	r6, r6, r2
    4d62:	4675      	movcs	r5, lr
    4d64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4d68:	085b      	lsrs	r3, r3, #1
    4d6a:	ea4f 0232 	mov.w	r2, r2, rrx
    4d6e:	ebb6 0e02 	subs.w	lr, r6, r2
    4d72:	eb75 0e03 	sbcs.w	lr, r5, r3
    4d76:	bf22      	ittt	cs
    4d78:	1ab6      	subcs	r6, r6, r2
    4d7a:	4675      	movcs	r5, lr
    4d7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4d80:	ea55 0e06 	orrs.w	lr, r5, r6
    4d84:	d018      	beq.n	4db8 <__aeabi_ddiv+0x114>
    4d86:	ea4f 1505 	mov.w	r5, r5, lsl #4
    4d8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    4d8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4d92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4d96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    4d9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    4d9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4da2:	d1c0      	bne.n	4d26 <__aeabi_ddiv+0x82>
    4da4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4da8:	d10b      	bne.n	4dc2 <__aeabi_ddiv+0x11e>
    4daa:	ea41 0100 	orr.w	r1, r1, r0
    4dae:	f04f 0000 	mov.w	r0, #0
    4db2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4db6:	e7b6      	b.n	4d26 <__aeabi_ddiv+0x82>
    4db8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4dbc:	bf04      	itt	eq
    4dbe:	4301      	orreq	r1, r0
    4dc0:	2000      	moveq	r0, #0
    4dc2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4dc6:	bf88      	it	hi
    4dc8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4dcc:	f63f aeaf 	bhi.w	4b2e <__aeabi_dmul+0xde>
    4dd0:	ebb5 0c03 	subs.w	ip, r5, r3
    4dd4:	bf04      	itt	eq
    4dd6:	ebb6 0c02 	subseq.w	ip, r6, r2
    4dda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4dde:	f150 0000 	adcs.w	r0, r0, #0
    4de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4de6:	bd70      	pop	{r4, r5, r6, pc}
    4de8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4dec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4df0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    4df4:	bfc2      	ittt	gt
    4df6:	ebd4 050c 	rsbsgt	r5, r4, ip
    4dfa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4dfe:	bd70      	popgt	{r4, r5, r6, pc}
    4e00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e04:	f04f 0e00 	mov.w	lr, #0
    4e08:	3c01      	subs	r4, #1
    4e0a:	e690      	b.n	4b2e <__aeabi_dmul+0xde>
    4e0c:	ea45 0e06 	orr.w	lr, r5, r6
    4e10:	e68d      	b.n	4b2e <__aeabi_dmul+0xde>
    4e12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4e16:	ea94 0f0c 	teq	r4, ip
    4e1a:	bf08      	it	eq
    4e1c:	ea95 0f0c 	teqeq	r5, ip
    4e20:	f43f af3b 	beq.w	4c9a <__aeabi_dmul+0x24a>
    4e24:	ea94 0f0c 	teq	r4, ip
    4e28:	d10a      	bne.n	4e40 <__aeabi_ddiv+0x19c>
    4e2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4e2e:	f47f af34 	bne.w	4c9a <__aeabi_dmul+0x24a>
    4e32:	ea95 0f0c 	teq	r5, ip
    4e36:	f47f af25 	bne.w	4c84 <__aeabi_dmul+0x234>
    4e3a:	4610      	mov	r0, r2
    4e3c:	4619      	mov	r1, r3
    4e3e:	e72c      	b.n	4c9a <__aeabi_dmul+0x24a>
    4e40:	ea95 0f0c 	teq	r5, ip
    4e44:	d106      	bne.n	4e54 <__aeabi_ddiv+0x1b0>
    4e46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4e4a:	f43f aefd 	beq.w	4c48 <__aeabi_dmul+0x1f8>
    4e4e:	4610      	mov	r0, r2
    4e50:	4619      	mov	r1, r3
    4e52:	e722      	b.n	4c9a <__aeabi_dmul+0x24a>
    4e54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4e58:	bf18      	it	ne
    4e5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4e5e:	f47f aec5 	bne.w	4bec <__aeabi_dmul+0x19c>
    4e62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4e66:	f47f af0d 	bne.w	4c84 <__aeabi_dmul+0x234>
    4e6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    4e6e:	f47f aeeb 	bne.w	4c48 <__aeabi_dmul+0x1f8>
    4e72:	e712      	b.n	4c9a <__aeabi_dmul+0x24a>

00004e74 <__gedf2>:
    4e74:	f04f 3cff 	mov.w	ip, #4294967295
    4e78:	e006      	b.n	4e88 <__cmpdf2+0x4>
    4e7a:	bf00      	nop

00004e7c <__ledf2>:
    4e7c:	f04f 0c01 	mov.w	ip, #1
    4e80:	e002      	b.n	4e88 <__cmpdf2+0x4>
    4e82:	bf00      	nop

00004e84 <__cmpdf2>:
    4e84:	f04f 0c01 	mov.w	ip, #1
    4e88:	f84d cd04 	str.w	ip, [sp, #-4]!
    4e8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4e90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4e98:	bf18      	it	ne
    4e9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    4e9e:	d01b      	beq.n	4ed8 <__cmpdf2+0x54>
    4ea0:	b001      	add	sp, #4
    4ea2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    4ea6:	bf0c      	ite	eq
    4ea8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    4eac:	ea91 0f03 	teqne	r1, r3
    4eb0:	bf02      	ittt	eq
    4eb2:	ea90 0f02 	teqeq	r0, r2
    4eb6:	2000      	moveq	r0, #0
    4eb8:	4770      	bxeq	lr
    4eba:	f110 0f00 	cmn.w	r0, #0
    4ebe:	ea91 0f03 	teq	r1, r3
    4ec2:	bf58      	it	pl
    4ec4:	4299      	cmppl	r1, r3
    4ec6:	bf08      	it	eq
    4ec8:	4290      	cmpeq	r0, r2
    4eca:	bf2c      	ite	cs
    4ecc:	17d8      	asrcs	r0, r3, #31
    4ece:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    4ed2:	f040 0001 	orr.w	r0, r0, #1
    4ed6:	4770      	bx	lr
    4ed8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4edc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4ee0:	d102      	bne.n	4ee8 <__cmpdf2+0x64>
    4ee2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4ee6:	d107      	bne.n	4ef8 <__cmpdf2+0x74>
    4ee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4ef0:	d1d6      	bne.n	4ea0 <__cmpdf2+0x1c>
    4ef2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4ef6:	d0d3      	beq.n	4ea0 <__cmpdf2+0x1c>
    4ef8:	f85d 0b04 	ldr.w	r0, [sp], #4
    4efc:	4770      	bx	lr
    4efe:	bf00      	nop

00004f00 <__aeabi_cdrcmple>:
    4f00:	4684      	mov	ip, r0
    4f02:	4610      	mov	r0, r2
    4f04:	4662      	mov	r2, ip
    4f06:	468c      	mov	ip, r1
    4f08:	4619      	mov	r1, r3
    4f0a:	4663      	mov	r3, ip
    4f0c:	e000      	b.n	4f10 <__aeabi_cdcmpeq>
    4f0e:	bf00      	nop

00004f10 <__aeabi_cdcmpeq>:
    4f10:	b501      	push	{r0, lr}
    4f12:	f7ff ffb7 	bl	4e84 <__cmpdf2>
    4f16:	2800      	cmp	r0, #0
    4f18:	bf48      	it	mi
    4f1a:	f110 0f00 	cmnmi.w	r0, #0
    4f1e:	bd01      	pop	{r0, pc}

00004f20 <__aeabi_dcmpeq>:
    4f20:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f24:	f7ff fff4 	bl	4f10 <__aeabi_cdcmpeq>
    4f28:	bf0c      	ite	eq
    4f2a:	2001      	moveq	r0, #1
    4f2c:	2000      	movne	r0, #0
    4f2e:	f85d fb08 	ldr.w	pc, [sp], #8
    4f32:	bf00      	nop

00004f34 <__aeabi_dcmplt>:
    4f34:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f38:	f7ff ffea 	bl	4f10 <__aeabi_cdcmpeq>
    4f3c:	bf34      	ite	cc
    4f3e:	2001      	movcc	r0, #1
    4f40:	2000      	movcs	r0, #0
    4f42:	f85d fb08 	ldr.w	pc, [sp], #8
    4f46:	bf00      	nop

00004f48 <__aeabi_dcmple>:
    4f48:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f4c:	f7ff ffe0 	bl	4f10 <__aeabi_cdcmpeq>
    4f50:	bf94      	ite	ls
    4f52:	2001      	movls	r0, #1
    4f54:	2000      	movhi	r0, #0
    4f56:	f85d fb08 	ldr.w	pc, [sp], #8
    4f5a:	bf00      	nop

00004f5c <__aeabi_dcmpge>:
    4f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f60:	f7ff ffce 	bl	4f00 <__aeabi_cdrcmple>
    4f64:	bf94      	ite	ls
    4f66:	2001      	movls	r0, #1
    4f68:	2000      	movhi	r0, #0
    4f6a:	f85d fb08 	ldr.w	pc, [sp], #8
    4f6e:	bf00      	nop

00004f70 <__aeabi_dcmpgt>:
    4f70:	f84d ed08 	str.w	lr, [sp, #-8]!
    4f74:	f7ff ffc4 	bl	4f00 <__aeabi_cdrcmple>
    4f78:	bf34      	ite	cc
    4f7a:	2001      	movcc	r0, #1
    4f7c:	2000      	movcs	r0, #0
    4f7e:	f85d fb08 	ldr.w	pc, [sp], #8
    4f82:	bf00      	nop

00004f84 <__aeabi_dcmpun>:
    4f84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4f8c:	d102      	bne.n	4f94 <__aeabi_dcmpun+0x10>
    4f8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    4f92:	d10a      	bne.n	4faa <__aeabi_dcmpun+0x26>
    4f94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4f98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4f9c:	d102      	bne.n	4fa4 <__aeabi_dcmpun+0x20>
    4f9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    4fa2:	d102      	bne.n	4faa <__aeabi_dcmpun+0x26>
    4fa4:	f04f 0000 	mov.w	r0, #0
    4fa8:	4770      	bx	lr
    4faa:	f04f 0001 	mov.w	r0, #1
    4fae:	4770      	bx	lr

00004fb0 <__aeabi_d2uiz>:
    4fb0:	004a      	lsls	r2, r1, #1
    4fb2:	d211      	bcs.n	4fd8 <__aeabi_d2uiz+0x28>
    4fb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    4fb8:	d211      	bcs.n	4fde <__aeabi_d2uiz+0x2e>
    4fba:	d50d      	bpl.n	4fd8 <__aeabi_d2uiz+0x28>
    4fbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    4fc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    4fc4:	d40e      	bmi.n	4fe4 <__aeabi_d2uiz+0x34>
    4fc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4fce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    4fd2:	fa23 f002 	lsr.w	r0, r3, r2
    4fd6:	4770      	bx	lr
    4fd8:	f04f 0000 	mov.w	r0, #0
    4fdc:	4770      	bx	lr
    4fde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    4fe2:	d102      	bne.n	4fea <__aeabi_d2uiz+0x3a>
    4fe4:	f04f 30ff 	mov.w	r0, #4294967295
    4fe8:	4770      	bx	lr
    4fea:	f04f 0000 	mov.w	r0, #0
    4fee:	4770      	bx	lr

00004ff0 <__errno>:
    4ff0:	4b01      	ldr	r3, [pc, #4]	; (4ff8 <__errno+0x8>)
    4ff2:	6818      	ldr	r0, [r3, #0]
    4ff4:	4770      	bx	lr
    4ff6:	bf00      	nop
    4ff8:	1fff0db8 	.word	0x1fff0db8

00004ffc <__libc_init_array>:
    4ffc:	b570      	push	{r4, r5, r6, lr}
    4ffe:	4e0f      	ldr	r6, [pc, #60]	; (503c <__libc_init_array+0x40>)
    5000:	4d0f      	ldr	r5, [pc, #60]	; (5040 <__libc_init_array+0x44>)
    5002:	1b76      	subs	r6, r6, r5
    5004:	10b6      	asrs	r6, r6, #2
    5006:	bf18      	it	ne
    5008:	2400      	movne	r4, #0
    500a:	d005      	beq.n	5018 <__libc_init_array+0x1c>
    500c:	3401      	adds	r4, #1
    500e:	f855 3b04 	ldr.w	r3, [r5], #4
    5012:	4798      	blx	r3
    5014:	42a6      	cmp	r6, r4
    5016:	d1f9      	bne.n	500c <__libc_init_array+0x10>
    5018:	4e0a      	ldr	r6, [pc, #40]	; (5044 <__libc_init_array+0x48>)
    501a:	4d0b      	ldr	r5, [pc, #44]	; (5048 <__libc_init_array+0x4c>)
    501c:	1b76      	subs	r6, r6, r5
    501e:	f001 f8d9 	bl	61d4 <_init>
    5022:	10b6      	asrs	r6, r6, #2
    5024:	bf18      	it	ne
    5026:	2400      	movne	r4, #0
    5028:	d006      	beq.n	5038 <__libc_init_array+0x3c>
    502a:	3401      	adds	r4, #1
    502c:	f855 3b04 	ldr.w	r3, [r5], #4
    5030:	4798      	blx	r3
    5032:	42a6      	cmp	r6, r4
    5034:	d1f9      	bne.n	502a <__libc_init_array+0x2e>
    5036:	bd70      	pop	{r4, r5, r6, pc}
    5038:	bd70      	pop	{r4, r5, r6, pc}
    503a:	bf00      	nop
    503c:	000061e0 	.word	0x000061e0
    5040:	000061e0 	.word	0x000061e0
    5044:	000061ec 	.word	0x000061ec
    5048:	000061e0 	.word	0x000061e0

0000504c <malloc>:
    504c:	4b02      	ldr	r3, [pc, #8]	; (5058 <malloc+0xc>)
    504e:	4601      	mov	r1, r0
    5050:	6818      	ldr	r0, [r3, #0]
    5052:	f000 b803 	b.w	505c <_malloc_r>
    5056:	bf00      	nop
    5058:	1fff0db8 	.word	0x1fff0db8

0000505c <_malloc_r>:
    505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5060:	f101 050b 	add.w	r5, r1, #11
    5064:	2d16      	cmp	r5, #22
    5066:	b083      	sub	sp, #12
    5068:	4606      	mov	r6, r0
    506a:	f240 809f 	bls.w	51ac <_malloc_r+0x150>
    506e:	f035 0507 	bics.w	r5, r5, #7
    5072:	f100 80bf 	bmi.w	51f4 <_malloc_r+0x198>
    5076:	42a9      	cmp	r1, r5
    5078:	f200 80bc 	bhi.w	51f4 <_malloc_r+0x198>
    507c:	f000 faf4 	bl	5668 <__malloc_lock>
    5080:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    5084:	f0c0 829c 	bcc.w	55c0 <_malloc_r+0x564>
    5088:	0a6b      	lsrs	r3, r5, #9
    508a:	f000 80ba 	beq.w	5202 <_malloc_r+0x1a6>
    508e:	2b04      	cmp	r3, #4
    5090:	f200 8183 	bhi.w	539a <_malloc_r+0x33e>
    5094:	09a8      	lsrs	r0, r5, #6
    5096:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    509a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    509e:	3038      	adds	r0, #56	; 0x38
    50a0:	4fc4      	ldr	r7, [pc, #784]	; (53b4 <_malloc_r+0x358>)
    50a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    50a6:	f1a3 0108 	sub.w	r1, r3, #8
    50aa:	685c      	ldr	r4, [r3, #4]
    50ac:	42a1      	cmp	r1, r4
    50ae:	d107      	bne.n	50c0 <_malloc_r+0x64>
    50b0:	e0ac      	b.n	520c <_malloc_r+0x1b0>
    50b2:	2a00      	cmp	r2, #0
    50b4:	f280 80ac 	bge.w	5210 <_malloc_r+0x1b4>
    50b8:	68e4      	ldr	r4, [r4, #12]
    50ba:	42a1      	cmp	r1, r4
    50bc:	f000 80a6 	beq.w	520c <_malloc_r+0x1b0>
    50c0:	6863      	ldr	r3, [r4, #4]
    50c2:	f023 0303 	bic.w	r3, r3, #3
    50c6:	1b5a      	subs	r2, r3, r5
    50c8:	2a0f      	cmp	r2, #15
    50ca:	ddf2      	ble.n	50b2 <_malloc_r+0x56>
    50cc:	49b9      	ldr	r1, [pc, #740]	; (53b4 <_malloc_r+0x358>)
    50ce:	693c      	ldr	r4, [r7, #16]
    50d0:	f101 0e08 	add.w	lr, r1, #8
    50d4:	4574      	cmp	r4, lr
    50d6:	f000 81b3 	beq.w	5440 <_malloc_r+0x3e4>
    50da:	6863      	ldr	r3, [r4, #4]
    50dc:	f023 0303 	bic.w	r3, r3, #3
    50e0:	1b5a      	subs	r2, r3, r5
    50e2:	2a0f      	cmp	r2, #15
    50e4:	f300 8199 	bgt.w	541a <_malloc_r+0x3be>
    50e8:	2a00      	cmp	r2, #0
    50ea:	f8c1 e014 	str.w	lr, [r1, #20]
    50ee:	f8c1 e010 	str.w	lr, [r1, #16]
    50f2:	f280 809e 	bge.w	5232 <_malloc_r+0x1d6>
    50f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    50fa:	f080 8167 	bcs.w	53cc <_malloc_r+0x370>
    50fe:	08db      	lsrs	r3, r3, #3
    5100:	f103 0c01 	add.w	ip, r3, #1
    5104:	2201      	movs	r2, #1
    5106:	109b      	asrs	r3, r3, #2
    5108:	fa02 f303 	lsl.w	r3, r2, r3
    510c:	684a      	ldr	r2, [r1, #4]
    510e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    5112:	f8c4 8008 	str.w	r8, [r4, #8]
    5116:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    511a:	431a      	orrs	r2, r3
    511c:	f1a9 0308 	sub.w	r3, r9, #8
    5120:	60e3      	str	r3, [r4, #12]
    5122:	604a      	str	r2, [r1, #4]
    5124:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    5128:	f8c8 400c 	str.w	r4, [r8, #12]
    512c:	1083      	asrs	r3, r0, #2
    512e:	2401      	movs	r4, #1
    5130:	409c      	lsls	r4, r3
    5132:	4294      	cmp	r4, r2
    5134:	f200 808a 	bhi.w	524c <_malloc_r+0x1f0>
    5138:	4214      	tst	r4, r2
    513a:	d106      	bne.n	514a <_malloc_r+0xee>
    513c:	f020 0003 	bic.w	r0, r0, #3
    5140:	0064      	lsls	r4, r4, #1
    5142:	4214      	tst	r4, r2
    5144:	f100 0004 	add.w	r0, r0, #4
    5148:	d0fa      	beq.n	5140 <_malloc_r+0xe4>
    514a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    514e:	46cc      	mov	ip, r9
    5150:	4680      	mov	r8, r0
    5152:	f8dc 100c 	ldr.w	r1, [ip, #12]
    5156:	458c      	cmp	ip, r1
    5158:	d107      	bne.n	516a <_malloc_r+0x10e>
    515a:	e173      	b.n	5444 <_malloc_r+0x3e8>
    515c:	2a00      	cmp	r2, #0
    515e:	f280 8181 	bge.w	5464 <_malloc_r+0x408>
    5162:	68c9      	ldr	r1, [r1, #12]
    5164:	458c      	cmp	ip, r1
    5166:	f000 816d 	beq.w	5444 <_malloc_r+0x3e8>
    516a:	684b      	ldr	r3, [r1, #4]
    516c:	f023 0303 	bic.w	r3, r3, #3
    5170:	1b5a      	subs	r2, r3, r5
    5172:	2a0f      	cmp	r2, #15
    5174:	ddf2      	ble.n	515c <_malloc_r+0x100>
    5176:	460c      	mov	r4, r1
    5178:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    517c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    5180:	194b      	adds	r3, r1, r5
    5182:	f045 0501 	orr.w	r5, r5, #1
    5186:	604d      	str	r5, [r1, #4]
    5188:	f042 0101 	orr.w	r1, r2, #1
    518c:	f8c8 c00c 	str.w	ip, [r8, #12]
    5190:	4630      	mov	r0, r6
    5192:	f8cc 8008 	str.w	r8, [ip, #8]
    5196:	617b      	str	r3, [r7, #20]
    5198:	613b      	str	r3, [r7, #16]
    519a:	f8c3 e00c 	str.w	lr, [r3, #12]
    519e:	f8c3 e008 	str.w	lr, [r3, #8]
    51a2:	6059      	str	r1, [r3, #4]
    51a4:	509a      	str	r2, [r3, r2]
    51a6:	f000 fa61 	bl	566c <__malloc_unlock>
    51aa:	e01f      	b.n	51ec <_malloc_r+0x190>
    51ac:	2910      	cmp	r1, #16
    51ae:	d821      	bhi.n	51f4 <_malloc_r+0x198>
    51b0:	f000 fa5a 	bl	5668 <__malloc_lock>
    51b4:	2510      	movs	r5, #16
    51b6:	2306      	movs	r3, #6
    51b8:	2002      	movs	r0, #2
    51ba:	4f7e      	ldr	r7, [pc, #504]	; (53b4 <_malloc_r+0x358>)
    51bc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    51c0:	f1a3 0208 	sub.w	r2, r3, #8
    51c4:	685c      	ldr	r4, [r3, #4]
    51c6:	4294      	cmp	r4, r2
    51c8:	f000 8145 	beq.w	5456 <_malloc_r+0x3fa>
    51cc:	6863      	ldr	r3, [r4, #4]
    51ce:	68e1      	ldr	r1, [r4, #12]
    51d0:	68a5      	ldr	r5, [r4, #8]
    51d2:	f023 0303 	bic.w	r3, r3, #3
    51d6:	4423      	add	r3, r4
    51d8:	4630      	mov	r0, r6
    51da:	685a      	ldr	r2, [r3, #4]
    51dc:	60e9      	str	r1, [r5, #12]
    51de:	f042 0201 	orr.w	r2, r2, #1
    51e2:	608d      	str	r5, [r1, #8]
    51e4:	605a      	str	r2, [r3, #4]
    51e6:	f000 fa41 	bl	566c <__malloc_unlock>
    51ea:	3408      	adds	r4, #8
    51ec:	4620      	mov	r0, r4
    51ee:	b003      	add	sp, #12
    51f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f4:	2400      	movs	r4, #0
    51f6:	230c      	movs	r3, #12
    51f8:	4620      	mov	r0, r4
    51fa:	6033      	str	r3, [r6, #0]
    51fc:	b003      	add	sp, #12
    51fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5202:	2380      	movs	r3, #128	; 0x80
    5204:	f04f 0e40 	mov.w	lr, #64	; 0x40
    5208:	203f      	movs	r0, #63	; 0x3f
    520a:	e749      	b.n	50a0 <_malloc_r+0x44>
    520c:	4670      	mov	r0, lr
    520e:	e75d      	b.n	50cc <_malloc_r+0x70>
    5210:	4423      	add	r3, r4
    5212:	68e1      	ldr	r1, [r4, #12]
    5214:	685a      	ldr	r2, [r3, #4]
    5216:	68a5      	ldr	r5, [r4, #8]
    5218:	f042 0201 	orr.w	r2, r2, #1
    521c:	60e9      	str	r1, [r5, #12]
    521e:	4630      	mov	r0, r6
    5220:	608d      	str	r5, [r1, #8]
    5222:	605a      	str	r2, [r3, #4]
    5224:	f000 fa22 	bl	566c <__malloc_unlock>
    5228:	3408      	adds	r4, #8
    522a:	4620      	mov	r0, r4
    522c:	b003      	add	sp, #12
    522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5232:	4423      	add	r3, r4
    5234:	4630      	mov	r0, r6
    5236:	685a      	ldr	r2, [r3, #4]
    5238:	f042 0201 	orr.w	r2, r2, #1
    523c:	605a      	str	r2, [r3, #4]
    523e:	f000 fa15 	bl	566c <__malloc_unlock>
    5242:	3408      	adds	r4, #8
    5244:	4620      	mov	r0, r4
    5246:	b003      	add	sp, #12
    5248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    524c:	68bc      	ldr	r4, [r7, #8]
    524e:	6863      	ldr	r3, [r4, #4]
    5250:	f023 0803 	bic.w	r8, r3, #3
    5254:	45a8      	cmp	r8, r5
    5256:	d304      	bcc.n	5262 <_malloc_r+0x206>
    5258:	ebc5 0308 	rsb	r3, r5, r8
    525c:	2b0f      	cmp	r3, #15
    525e:	f300 808c 	bgt.w	537a <_malloc_r+0x31e>
    5262:	4b55      	ldr	r3, [pc, #340]	; (53b8 <_malloc_r+0x35c>)
    5264:	f8df 9160 	ldr.w	r9, [pc, #352]	; 53c8 <_malloc_r+0x36c>
    5268:	681a      	ldr	r2, [r3, #0]
    526a:	f8d9 3000 	ldr.w	r3, [r9]
    526e:	3301      	adds	r3, #1
    5270:	442a      	add	r2, r5
    5272:	eb04 0a08 	add.w	sl, r4, r8
    5276:	f000 8160 	beq.w	553a <_malloc_r+0x4de>
    527a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    527e:	320f      	adds	r2, #15
    5280:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    5284:	f022 020f 	bic.w	r2, r2, #15
    5288:	4611      	mov	r1, r2
    528a:	4630      	mov	r0, r6
    528c:	9201      	str	r2, [sp, #4]
    528e:	f000 f9ef 	bl	5670 <_sbrk_r>
    5292:	f1b0 3fff 	cmp.w	r0, #4294967295
    5296:	4683      	mov	fp, r0
    5298:	9a01      	ldr	r2, [sp, #4]
    529a:	f000 8158 	beq.w	554e <_malloc_r+0x4f2>
    529e:	4582      	cmp	sl, r0
    52a0:	f200 80fc 	bhi.w	549c <_malloc_r+0x440>
    52a4:	4b45      	ldr	r3, [pc, #276]	; (53bc <_malloc_r+0x360>)
    52a6:	6819      	ldr	r1, [r3, #0]
    52a8:	45da      	cmp	sl, fp
    52aa:	4411      	add	r1, r2
    52ac:	6019      	str	r1, [r3, #0]
    52ae:	f000 8153 	beq.w	5558 <_malloc_r+0x4fc>
    52b2:	f8d9 0000 	ldr.w	r0, [r9]
    52b6:	f8df e110 	ldr.w	lr, [pc, #272]	; 53c8 <_malloc_r+0x36c>
    52ba:	3001      	adds	r0, #1
    52bc:	bf1b      	ittet	ne
    52be:	ebca 0a0b 	rsbne	sl, sl, fp
    52c2:	4451      	addne	r1, sl
    52c4:	f8ce b000 	streq.w	fp, [lr]
    52c8:	6019      	strne	r1, [r3, #0]
    52ca:	f01b 0107 	ands.w	r1, fp, #7
    52ce:	f000 8117 	beq.w	5500 <_malloc_r+0x4a4>
    52d2:	f1c1 0008 	rsb	r0, r1, #8
    52d6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    52da:	4483      	add	fp, r0
    52dc:	3108      	adds	r1, #8
    52de:	445a      	add	r2, fp
    52e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    52e4:	ebc2 0901 	rsb	r9, r2, r1
    52e8:	4649      	mov	r1, r9
    52ea:	4630      	mov	r0, r6
    52ec:	9301      	str	r3, [sp, #4]
    52ee:	f000 f9bf 	bl	5670 <_sbrk_r>
    52f2:	1c43      	adds	r3, r0, #1
    52f4:	9b01      	ldr	r3, [sp, #4]
    52f6:	f000 813f 	beq.w	5578 <_malloc_r+0x51c>
    52fa:	ebcb 0200 	rsb	r2, fp, r0
    52fe:	444a      	add	r2, r9
    5300:	f042 0201 	orr.w	r2, r2, #1
    5304:	6819      	ldr	r1, [r3, #0]
    5306:	f8c7 b008 	str.w	fp, [r7, #8]
    530a:	4449      	add	r1, r9
    530c:	42bc      	cmp	r4, r7
    530e:	f8cb 2004 	str.w	r2, [fp, #4]
    5312:	6019      	str	r1, [r3, #0]
    5314:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 53bc <_malloc_r+0x360>
    5318:	d016      	beq.n	5348 <_malloc_r+0x2ec>
    531a:	f1b8 0f0f 	cmp.w	r8, #15
    531e:	f240 80fd 	bls.w	551c <_malloc_r+0x4c0>
    5322:	6862      	ldr	r2, [r4, #4]
    5324:	f1a8 030c 	sub.w	r3, r8, #12
    5328:	f023 0307 	bic.w	r3, r3, #7
    532c:	18e0      	adds	r0, r4, r3
    532e:	f002 0201 	and.w	r2, r2, #1
    5332:	f04f 0e05 	mov.w	lr, #5
    5336:	431a      	orrs	r2, r3
    5338:	2b0f      	cmp	r3, #15
    533a:	6062      	str	r2, [r4, #4]
    533c:	f8c0 e004 	str.w	lr, [r0, #4]
    5340:	f8c0 e008 	str.w	lr, [r0, #8]
    5344:	f200 811c 	bhi.w	5580 <_malloc_r+0x524>
    5348:	4b1d      	ldr	r3, [pc, #116]	; (53c0 <_malloc_r+0x364>)
    534a:	68bc      	ldr	r4, [r7, #8]
    534c:	681a      	ldr	r2, [r3, #0]
    534e:	4291      	cmp	r1, r2
    5350:	bf88      	it	hi
    5352:	6019      	strhi	r1, [r3, #0]
    5354:	4b1b      	ldr	r3, [pc, #108]	; (53c4 <_malloc_r+0x368>)
    5356:	681a      	ldr	r2, [r3, #0]
    5358:	4291      	cmp	r1, r2
    535a:	6862      	ldr	r2, [r4, #4]
    535c:	bf88      	it	hi
    535e:	6019      	strhi	r1, [r3, #0]
    5360:	f022 0203 	bic.w	r2, r2, #3
    5364:	4295      	cmp	r5, r2
    5366:	eba2 0305 	sub.w	r3, r2, r5
    536a:	d801      	bhi.n	5370 <_malloc_r+0x314>
    536c:	2b0f      	cmp	r3, #15
    536e:	dc04      	bgt.n	537a <_malloc_r+0x31e>
    5370:	4630      	mov	r0, r6
    5372:	f000 f97b 	bl	566c <__malloc_unlock>
    5376:	2400      	movs	r4, #0
    5378:	e738      	b.n	51ec <_malloc_r+0x190>
    537a:	1962      	adds	r2, r4, r5
    537c:	f043 0301 	orr.w	r3, r3, #1
    5380:	f045 0501 	orr.w	r5, r5, #1
    5384:	6065      	str	r5, [r4, #4]
    5386:	4630      	mov	r0, r6
    5388:	60ba      	str	r2, [r7, #8]
    538a:	6053      	str	r3, [r2, #4]
    538c:	f000 f96e 	bl	566c <__malloc_unlock>
    5390:	3408      	adds	r4, #8
    5392:	4620      	mov	r0, r4
    5394:	b003      	add	sp, #12
    5396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    539a:	2b14      	cmp	r3, #20
    539c:	d971      	bls.n	5482 <_malloc_r+0x426>
    539e:	2b54      	cmp	r3, #84	; 0x54
    53a0:	f200 80a4 	bhi.w	54ec <_malloc_r+0x490>
    53a4:	0b28      	lsrs	r0, r5, #12
    53a6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    53aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
    53ae:	306e      	adds	r0, #110	; 0x6e
    53b0:	e676      	b.n	50a0 <_malloc_r+0x44>
    53b2:	bf00      	nop
    53b4:	1fff0dbc 	.word	0x1fff0dbc
    53b8:	1fff146c 	.word	0x1fff146c
    53bc:	1fff1470 	.word	0x1fff1470
    53c0:	1fff1468 	.word	0x1fff1468
    53c4:	1fff1464 	.word	0x1fff1464
    53c8:	1fff11c8 	.word	0x1fff11c8
    53cc:	0a5a      	lsrs	r2, r3, #9
    53ce:	2a04      	cmp	r2, #4
    53d0:	d95e      	bls.n	5490 <_malloc_r+0x434>
    53d2:	2a14      	cmp	r2, #20
    53d4:	f200 80b3 	bhi.w	553e <_malloc_r+0x4e2>
    53d8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    53dc:	0049      	lsls	r1, r1, #1
    53de:	325b      	adds	r2, #91	; 0x5b
    53e0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    53e4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    53e8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 55c8 <_malloc_r+0x56c>
    53ec:	f1ac 0c08 	sub.w	ip, ip, #8
    53f0:	458c      	cmp	ip, r1
    53f2:	f000 8088 	beq.w	5506 <_malloc_r+0x4aa>
    53f6:	684a      	ldr	r2, [r1, #4]
    53f8:	f022 0203 	bic.w	r2, r2, #3
    53fc:	4293      	cmp	r3, r2
    53fe:	d202      	bcs.n	5406 <_malloc_r+0x3aa>
    5400:	6889      	ldr	r1, [r1, #8]
    5402:	458c      	cmp	ip, r1
    5404:	d1f7      	bne.n	53f6 <_malloc_r+0x39a>
    5406:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    540a:	687a      	ldr	r2, [r7, #4]
    540c:	f8c4 c00c 	str.w	ip, [r4, #12]
    5410:	60a1      	str	r1, [r4, #8]
    5412:	f8cc 4008 	str.w	r4, [ip, #8]
    5416:	60cc      	str	r4, [r1, #12]
    5418:	e688      	b.n	512c <_malloc_r+0xd0>
    541a:	1963      	adds	r3, r4, r5
    541c:	f042 0701 	orr.w	r7, r2, #1
    5420:	f045 0501 	orr.w	r5, r5, #1
    5424:	6065      	str	r5, [r4, #4]
    5426:	4630      	mov	r0, r6
    5428:	614b      	str	r3, [r1, #20]
    542a:	610b      	str	r3, [r1, #16]
    542c:	f8c3 e00c 	str.w	lr, [r3, #12]
    5430:	f8c3 e008 	str.w	lr, [r3, #8]
    5434:	605f      	str	r7, [r3, #4]
    5436:	509a      	str	r2, [r3, r2]
    5438:	3408      	adds	r4, #8
    543a:	f000 f917 	bl	566c <__malloc_unlock>
    543e:	e6d5      	b.n	51ec <_malloc_r+0x190>
    5440:	684a      	ldr	r2, [r1, #4]
    5442:	e673      	b.n	512c <_malloc_r+0xd0>
    5444:	f108 0801 	add.w	r8, r8, #1
    5448:	f018 0f03 	tst.w	r8, #3
    544c:	f10c 0c08 	add.w	ip, ip, #8
    5450:	f47f ae7f 	bne.w	5152 <_malloc_r+0xf6>
    5454:	e030      	b.n	54b8 <_malloc_r+0x45c>
    5456:	68dc      	ldr	r4, [r3, #12]
    5458:	42a3      	cmp	r3, r4
    545a:	bf08      	it	eq
    545c:	3002      	addeq	r0, #2
    545e:	f43f ae35 	beq.w	50cc <_malloc_r+0x70>
    5462:	e6b3      	b.n	51cc <_malloc_r+0x170>
    5464:	440b      	add	r3, r1
    5466:	460c      	mov	r4, r1
    5468:	685a      	ldr	r2, [r3, #4]
    546a:	68c9      	ldr	r1, [r1, #12]
    546c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    5470:	f042 0201 	orr.w	r2, r2, #1
    5474:	605a      	str	r2, [r3, #4]
    5476:	4630      	mov	r0, r6
    5478:	60e9      	str	r1, [r5, #12]
    547a:	608d      	str	r5, [r1, #8]
    547c:	f000 f8f6 	bl	566c <__malloc_unlock>
    5480:	e6b4      	b.n	51ec <_malloc_r+0x190>
    5482:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    5486:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    548a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    548e:	e607      	b.n	50a0 <_malloc_r+0x44>
    5490:	099a      	lsrs	r2, r3, #6
    5492:	f102 0139 	add.w	r1, r2, #57	; 0x39
    5496:	0049      	lsls	r1, r1, #1
    5498:	3238      	adds	r2, #56	; 0x38
    549a:	e7a1      	b.n	53e0 <_malloc_r+0x384>
    549c:	42bc      	cmp	r4, r7
    549e:	4b4a      	ldr	r3, [pc, #296]	; (55c8 <_malloc_r+0x56c>)
    54a0:	f43f af00 	beq.w	52a4 <_malloc_r+0x248>
    54a4:	689c      	ldr	r4, [r3, #8]
    54a6:	6862      	ldr	r2, [r4, #4]
    54a8:	f022 0203 	bic.w	r2, r2, #3
    54ac:	e75a      	b.n	5364 <_malloc_r+0x308>
    54ae:	f859 3908 	ldr.w	r3, [r9], #-8
    54b2:	4599      	cmp	r9, r3
    54b4:	f040 8082 	bne.w	55bc <_malloc_r+0x560>
    54b8:	f010 0f03 	tst.w	r0, #3
    54bc:	f100 30ff 	add.w	r0, r0, #4294967295
    54c0:	d1f5      	bne.n	54ae <_malloc_r+0x452>
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	ea23 0304 	bic.w	r3, r3, r4
    54c8:	607b      	str	r3, [r7, #4]
    54ca:	0064      	lsls	r4, r4, #1
    54cc:	429c      	cmp	r4, r3
    54ce:	f63f aebd 	bhi.w	524c <_malloc_r+0x1f0>
    54d2:	2c00      	cmp	r4, #0
    54d4:	f43f aeba 	beq.w	524c <_malloc_r+0x1f0>
    54d8:	421c      	tst	r4, r3
    54da:	4640      	mov	r0, r8
    54dc:	f47f ae35 	bne.w	514a <_malloc_r+0xee>
    54e0:	0064      	lsls	r4, r4, #1
    54e2:	421c      	tst	r4, r3
    54e4:	f100 0004 	add.w	r0, r0, #4
    54e8:	d0fa      	beq.n	54e0 <_malloc_r+0x484>
    54ea:	e62e      	b.n	514a <_malloc_r+0xee>
    54ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    54f0:	d818      	bhi.n	5524 <_malloc_r+0x4c8>
    54f2:	0be8      	lsrs	r0, r5, #15
    54f4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    54f8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    54fc:	3077      	adds	r0, #119	; 0x77
    54fe:	e5cf      	b.n	50a0 <_malloc_r+0x44>
    5500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5504:	e6eb      	b.n	52de <_malloc_r+0x282>
    5506:	2101      	movs	r1, #1
    5508:	f8d8 3004 	ldr.w	r3, [r8, #4]
    550c:	1092      	asrs	r2, r2, #2
    550e:	fa01 f202 	lsl.w	r2, r1, r2
    5512:	431a      	orrs	r2, r3
    5514:	f8c8 2004 	str.w	r2, [r8, #4]
    5518:	4661      	mov	r1, ip
    551a:	e777      	b.n	540c <_malloc_r+0x3b0>
    551c:	2301      	movs	r3, #1
    551e:	f8cb 3004 	str.w	r3, [fp, #4]
    5522:	e725      	b.n	5370 <_malloc_r+0x314>
    5524:	f240 5254 	movw	r2, #1364	; 0x554
    5528:	4293      	cmp	r3, r2
    552a:	d820      	bhi.n	556e <_malloc_r+0x512>
    552c:	0ca8      	lsrs	r0, r5, #18
    552e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    5532:	ea4f 034e 	mov.w	r3, lr, lsl #1
    5536:	307c      	adds	r0, #124	; 0x7c
    5538:	e5b2      	b.n	50a0 <_malloc_r+0x44>
    553a:	3210      	adds	r2, #16
    553c:	e6a4      	b.n	5288 <_malloc_r+0x22c>
    553e:	2a54      	cmp	r2, #84	; 0x54
    5540:	d826      	bhi.n	5590 <_malloc_r+0x534>
    5542:	0b1a      	lsrs	r2, r3, #12
    5544:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    5548:	0049      	lsls	r1, r1, #1
    554a:	326e      	adds	r2, #110	; 0x6e
    554c:	e748      	b.n	53e0 <_malloc_r+0x384>
    554e:	68bc      	ldr	r4, [r7, #8]
    5550:	6862      	ldr	r2, [r4, #4]
    5552:	f022 0203 	bic.w	r2, r2, #3
    5556:	e705      	b.n	5364 <_malloc_r+0x308>
    5558:	f3ca 000b 	ubfx	r0, sl, #0, #12
    555c:	2800      	cmp	r0, #0
    555e:	f47f aea8 	bne.w	52b2 <_malloc_r+0x256>
    5562:	4442      	add	r2, r8
    5564:	68bb      	ldr	r3, [r7, #8]
    5566:	f042 0201 	orr.w	r2, r2, #1
    556a:	605a      	str	r2, [r3, #4]
    556c:	e6ec      	b.n	5348 <_malloc_r+0x2ec>
    556e:	23fe      	movs	r3, #254	; 0xfe
    5570:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    5574:	207e      	movs	r0, #126	; 0x7e
    5576:	e593      	b.n	50a0 <_malloc_r+0x44>
    5578:	2201      	movs	r2, #1
    557a:	f04f 0900 	mov.w	r9, #0
    557e:	e6c1      	b.n	5304 <_malloc_r+0x2a8>
    5580:	f104 0108 	add.w	r1, r4, #8
    5584:	4630      	mov	r0, r6
    5586:	f000 f97b 	bl	5880 <_free_r>
    558a:	f8d9 1000 	ldr.w	r1, [r9]
    558e:	e6db      	b.n	5348 <_malloc_r+0x2ec>
    5590:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5594:	d805      	bhi.n	55a2 <_malloc_r+0x546>
    5596:	0bda      	lsrs	r2, r3, #15
    5598:	f102 0178 	add.w	r1, r2, #120	; 0x78
    559c:	0049      	lsls	r1, r1, #1
    559e:	3277      	adds	r2, #119	; 0x77
    55a0:	e71e      	b.n	53e0 <_malloc_r+0x384>
    55a2:	f240 5154 	movw	r1, #1364	; 0x554
    55a6:	428a      	cmp	r2, r1
    55a8:	d805      	bhi.n	55b6 <_malloc_r+0x55a>
    55aa:	0c9a      	lsrs	r2, r3, #18
    55ac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    55b0:	0049      	lsls	r1, r1, #1
    55b2:	327c      	adds	r2, #124	; 0x7c
    55b4:	e714      	b.n	53e0 <_malloc_r+0x384>
    55b6:	21fe      	movs	r1, #254	; 0xfe
    55b8:	227e      	movs	r2, #126	; 0x7e
    55ba:	e711      	b.n	53e0 <_malloc_r+0x384>
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	e784      	b.n	54ca <_malloc_r+0x46e>
    55c0:	08e8      	lsrs	r0, r5, #3
    55c2:	1c43      	adds	r3, r0, #1
    55c4:	005b      	lsls	r3, r3, #1
    55c6:	e5f8      	b.n	51ba <_malloc_r+0x15e>
    55c8:	1fff0dbc 	.word	0x1fff0dbc

000055cc <memset>:
    55cc:	b470      	push	{r4, r5, r6}
    55ce:	0784      	lsls	r4, r0, #30
    55d0:	d046      	beq.n	5660 <memset+0x94>
    55d2:	1e54      	subs	r4, r2, #1
    55d4:	2a00      	cmp	r2, #0
    55d6:	d041      	beq.n	565c <memset+0x90>
    55d8:	b2cd      	uxtb	r5, r1
    55da:	4603      	mov	r3, r0
    55dc:	e002      	b.n	55e4 <memset+0x18>
    55de:	1e62      	subs	r2, r4, #1
    55e0:	b3e4      	cbz	r4, 565c <memset+0x90>
    55e2:	4614      	mov	r4, r2
    55e4:	f803 5b01 	strb.w	r5, [r3], #1
    55e8:	079a      	lsls	r2, r3, #30
    55ea:	d1f8      	bne.n	55de <memset+0x12>
    55ec:	2c03      	cmp	r4, #3
    55ee:	d92e      	bls.n	564e <memset+0x82>
    55f0:	b2cd      	uxtb	r5, r1
    55f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    55f6:	2c0f      	cmp	r4, #15
    55f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    55fc:	d919      	bls.n	5632 <memset+0x66>
    55fe:	f103 0210 	add.w	r2, r3, #16
    5602:	4626      	mov	r6, r4
    5604:	3e10      	subs	r6, #16
    5606:	2e0f      	cmp	r6, #15
    5608:	f842 5c10 	str.w	r5, [r2, #-16]
    560c:	f842 5c0c 	str.w	r5, [r2, #-12]
    5610:	f842 5c08 	str.w	r5, [r2, #-8]
    5614:	f842 5c04 	str.w	r5, [r2, #-4]
    5618:	f102 0210 	add.w	r2, r2, #16
    561c:	d8f2      	bhi.n	5604 <memset+0x38>
    561e:	f1a4 0210 	sub.w	r2, r4, #16
    5622:	f022 020f 	bic.w	r2, r2, #15
    5626:	f004 040f 	and.w	r4, r4, #15
    562a:	3210      	adds	r2, #16
    562c:	2c03      	cmp	r4, #3
    562e:	4413      	add	r3, r2
    5630:	d90d      	bls.n	564e <memset+0x82>
    5632:	461e      	mov	r6, r3
    5634:	4622      	mov	r2, r4
    5636:	3a04      	subs	r2, #4
    5638:	2a03      	cmp	r2, #3
    563a:	f846 5b04 	str.w	r5, [r6], #4
    563e:	d8fa      	bhi.n	5636 <memset+0x6a>
    5640:	1f22      	subs	r2, r4, #4
    5642:	f022 0203 	bic.w	r2, r2, #3
    5646:	3204      	adds	r2, #4
    5648:	4413      	add	r3, r2
    564a:	f004 0403 	and.w	r4, r4, #3
    564e:	b12c      	cbz	r4, 565c <memset+0x90>
    5650:	b2c9      	uxtb	r1, r1
    5652:	441c      	add	r4, r3
    5654:	f803 1b01 	strb.w	r1, [r3], #1
    5658:	42a3      	cmp	r3, r4
    565a:	d1fb      	bne.n	5654 <memset+0x88>
    565c:	bc70      	pop	{r4, r5, r6}
    565e:	4770      	bx	lr
    5660:	4614      	mov	r4, r2
    5662:	4603      	mov	r3, r0
    5664:	e7c2      	b.n	55ec <memset+0x20>
    5666:	bf00      	nop

00005668 <__malloc_lock>:
    5668:	4770      	bx	lr
    566a:	bf00      	nop

0000566c <__malloc_unlock>:
    566c:	4770      	bx	lr
    566e:	bf00      	nop

00005670 <_sbrk_r>:
    5670:	b538      	push	{r3, r4, r5, lr}
    5672:	4c07      	ldr	r4, [pc, #28]	; (5690 <_sbrk_r+0x20>)
    5674:	2300      	movs	r3, #0
    5676:	4605      	mov	r5, r0
    5678:	4608      	mov	r0, r1
    567a:	6023      	str	r3, [r4, #0]
    567c:	f7fc fe48 	bl	2310 <_sbrk>
    5680:	1c43      	adds	r3, r0, #1
    5682:	d000      	beq.n	5686 <_sbrk_r+0x16>
    5684:	bd38      	pop	{r3, r4, r5, pc}
    5686:	6823      	ldr	r3, [r4, #0]
    5688:	2b00      	cmp	r3, #0
    568a:	d0fb      	beq.n	5684 <_sbrk_r+0x14>
    568c:	602b      	str	r3, [r5, #0]
    568e:	bd38      	pop	{r3, r4, r5, pc}
    5690:	1fff14ac 	.word	0x1fff14ac
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff

000056c0 <strlen>:
    56c0:	f890 f000 	pld	[r0]
    56c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    56c8:	f020 0107 	bic.w	r1, r0, #7
    56cc:	f06f 0c00 	mvn.w	ip, #0
    56d0:	f010 0407 	ands.w	r4, r0, #7
    56d4:	f891 f020 	pld	[r1, #32]
    56d8:	f040 8049 	bne.w	576e <strlen+0xae>
    56dc:	f04f 0400 	mov.w	r4, #0
    56e0:	f06f 0007 	mvn.w	r0, #7
    56e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    56e8:	f891 f040 	pld	[r1, #64]	; 0x40
    56ec:	f100 0008 	add.w	r0, r0, #8
    56f0:	fa82 f24c 	uadd8	r2, r2, ip
    56f4:	faa4 f28c 	sel	r2, r4, ip
    56f8:	fa83 f34c 	uadd8	r3, r3, ip
    56fc:	faa2 f38c 	sel	r3, r2, ip
    5700:	bb4b      	cbnz	r3, 5756 <strlen+0x96>
    5702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5706:	fa82 f24c 	uadd8	r2, r2, ip
    570a:	f100 0008 	add.w	r0, r0, #8
    570e:	faa4 f28c 	sel	r2, r4, ip
    5712:	fa83 f34c 	uadd8	r3, r3, ip
    5716:	faa2 f38c 	sel	r3, r2, ip
    571a:	b9e3      	cbnz	r3, 5756 <strlen+0x96>
    571c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5720:	fa82 f24c 	uadd8	r2, r2, ip
    5724:	f100 0008 	add.w	r0, r0, #8
    5728:	faa4 f28c 	sel	r2, r4, ip
    572c:	fa83 f34c 	uadd8	r3, r3, ip
    5730:	faa2 f38c 	sel	r3, r2, ip
    5734:	b97b      	cbnz	r3, 5756 <strlen+0x96>
    5736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    573a:	f101 0120 	add.w	r1, r1, #32
    573e:	fa82 f24c 	uadd8	r2, r2, ip
    5742:	f100 0008 	add.w	r0, r0, #8
    5746:	faa4 f28c 	sel	r2, r4, ip
    574a:	fa83 f34c 	uadd8	r3, r3, ip
    574e:	faa2 f38c 	sel	r3, r2, ip
    5752:	2b00      	cmp	r3, #0
    5754:	d0c6      	beq.n	56e4 <strlen+0x24>
    5756:	2a00      	cmp	r2, #0
    5758:	bf04      	itt	eq
    575a:	3004      	addeq	r0, #4
    575c:	461a      	moveq	r2, r3
    575e:	ba12      	rev	r2, r2
    5760:	fab2 f282 	clz	r2, r2
    5764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    576c:	4770      	bx	lr
    576e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5772:	f004 0503 	and.w	r5, r4, #3
    5776:	f1c4 0000 	rsb	r0, r4, #0
    577a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    577e:	f014 0f04 	tst.w	r4, #4
    5782:	f891 f040 	pld	[r1, #64]	; 0x40
    5786:	fa0c f505 	lsl.w	r5, ip, r5
    578a:	ea62 0205 	orn	r2, r2, r5
    578e:	bf1c      	itt	ne
    5790:	ea63 0305 	ornne	r3, r3, r5
    5794:	4662      	movne	r2, ip
    5796:	f04f 0400 	mov.w	r4, #0
    579a:	e7a9      	b.n	56f0 <strlen+0x30>

0000579c <register_fini>:
    579c:	4b02      	ldr	r3, [pc, #8]	; (57a8 <register_fini+0xc>)
    579e:	b113      	cbz	r3, 57a6 <register_fini+0xa>
    57a0:	4802      	ldr	r0, [pc, #8]	; (57ac <register_fini+0x10>)
    57a2:	f000 b805 	b.w	57b0 <atexit>
    57a6:	4770      	bx	lr
    57a8:	00000000 	.word	0x00000000
    57ac:	000057bd 	.word	0x000057bd

000057b0 <atexit>:
    57b0:	2300      	movs	r3, #0
    57b2:	4601      	mov	r1, r0
    57b4:	461a      	mov	r2, r3
    57b6:	4618      	mov	r0, r3
    57b8:	f000 b94a 	b.w	5a50 <__register_exitproc>

000057bc <__libc_fini_array>:
    57bc:	b538      	push	{r3, r4, r5, lr}
    57be:	4d07      	ldr	r5, [pc, #28]	; (57dc <__libc_fini_array+0x20>)
    57c0:	4c07      	ldr	r4, [pc, #28]	; (57e0 <__libc_fini_array+0x24>)
    57c2:	1b2c      	subs	r4, r5, r4
    57c4:	10a4      	asrs	r4, r4, #2
    57c6:	d005      	beq.n	57d4 <__libc_fini_array+0x18>
    57c8:	3c01      	subs	r4, #1
    57ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    57ce:	4798      	blx	r3
    57d0:	2c00      	cmp	r4, #0
    57d2:	d1f9      	bne.n	57c8 <__libc_fini_array+0xc>
    57d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    57d8:	f000 bd08 	b.w	61ec <__init_array_end>
	...

000057e4 <_malloc_trim_r>:
    57e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57e6:	4f23      	ldr	r7, [pc, #140]	; (5874 <_malloc_trim_r+0x90>)
    57e8:	460c      	mov	r4, r1
    57ea:	4606      	mov	r6, r0
    57ec:	f7ff ff3c 	bl	5668 <__malloc_lock>
    57f0:	68bb      	ldr	r3, [r7, #8]
    57f2:	685d      	ldr	r5, [r3, #4]
    57f4:	f025 0503 	bic.w	r5, r5, #3
    57f8:	1b29      	subs	r1, r5, r4
    57fa:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    57fe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5802:	f021 010f 	bic.w	r1, r1, #15
    5806:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    580a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    580e:	db07      	blt.n	5820 <_malloc_trim_r+0x3c>
    5810:	2100      	movs	r1, #0
    5812:	4630      	mov	r0, r6
    5814:	f7ff ff2c 	bl	5670 <_sbrk_r>
    5818:	68bb      	ldr	r3, [r7, #8]
    581a:	442b      	add	r3, r5
    581c:	4298      	cmp	r0, r3
    581e:	d004      	beq.n	582a <_malloc_trim_r+0x46>
    5820:	4630      	mov	r0, r6
    5822:	f7ff ff23 	bl	566c <__malloc_unlock>
    5826:	2000      	movs	r0, #0
    5828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    582a:	4261      	negs	r1, r4
    582c:	4630      	mov	r0, r6
    582e:	f7ff ff1f 	bl	5670 <_sbrk_r>
    5832:	3001      	adds	r0, #1
    5834:	d00d      	beq.n	5852 <_malloc_trim_r+0x6e>
    5836:	4b10      	ldr	r3, [pc, #64]	; (5878 <_malloc_trim_r+0x94>)
    5838:	68ba      	ldr	r2, [r7, #8]
    583a:	6819      	ldr	r1, [r3, #0]
    583c:	1b2d      	subs	r5, r5, r4
    583e:	f045 0501 	orr.w	r5, r5, #1
    5842:	4630      	mov	r0, r6
    5844:	1b09      	subs	r1, r1, r4
    5846:	6055      	str	r5, [r2, #4]
    5848:	6019      	str	r1, [r3, #0]
    584a:	f7ff ff0f 	bl	566c <__malloc_unlock>
    584e:	2001      	movs	r0, #1
    5850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5852:	2100      	movs	r1, #0
    5854:	4630      	mov	r0, r6
    5856:	f7ff ff0b 	bl	5670 <_sbrk_r>
    585a:	68ba      	ldr	r2, [r7, #8]
    585c:	1a83      	subs	r3, r0, r2
    585e:	2b0f      	cmp	r3, #15
    5860:	ddde      	ble.n	5820 <_malloc_trim_r+0x3c>
    5862:	4c06      	ldr	r4, [pc, #24]	; (587c <_malloc_trim_r+0x98>)
    5864:	4904      	ldr	r1, [pc, #16]	; (5878 <_malloc_trim_r+0x94>)
    5866:	6824      	ldr	r4, [r4, #0]
    5868:	f043 0301 	orr.w	r3, r3, #1
    586c:	1b00      	subs	r0, r0, r4
    586e:	6053      	str	r3, [r2, #4]
    5870:	6008      	str	r0, [r1, #0]
    5872:	e7d5      	b.n	5820 <_malloc_trim_r+0x3c>
    5874:	1fff0dbc 	.word	0x1fff0dbc
    5878:	1fff1470 	.word	0x1fff1470
    587c:	1fff11c8 	.word	0x1fff11c8

00005880 <_free_r>:
    5880:	2900      	cmp	r1, #0
    5882:	d045      	beq.n	5910 <_free_r+0x90>
    5884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5888:	460d      	mov	r5, r1
    588a:	4680      	mov	r8, r0
    588c:	f7ff feec 	bl	5668 <__malloc_lock>
    5890:	f855 7c04 	ldr.w	r7, [r5, #-4]
    5894:	496a      	ldr	r1, [pc, #424]	; (5a40 <_free_r+0x1c0>)
    5896:	f027 0301 	bic.w	r3, r7, #1
    589a:	f1a5 0408 	sub.w	r4, r5, #8
    589e:	18e2      	adds	r2, r4, r3
    58a0:	688e      	ldr	r6, [r1, #8]
    58a2:	6850      	ldr	r0, [r2, #4]
    58a4:	42b2      	cmp	r2, r6
    58a6:	f020 0003 	bic.w	r0, r0, #3
    58aa:	d062      	beq.n	5972 <_free_r+0xf2>
    58ac:	07fe      	lsls	r6, r7, #31
    58ae:	6050      	str	r0, [r2, #4]
    58b0:	d40b      	bmi.n	58ca <_free_r+0x4a>
    58b2:	f855 7c08 	ldr.w	r7, [r5, #-8]
    58b6:	1be4      	subs	r4, r4, r7
    58b8:	f101 0e08 	add.w	lr, r1, #8
    58bc:	68a5      	ldr	r5, [r4, #8]
    58be:	4575      	cmp	r5, lr
    58c0:	443b      	add	r3, r7
    58c2:	d06f      	beq.n	59a4 <_free_r+0x124>
    58c4:	68e7      	ldr	r7, [r4, #12]
    58c6:	60ef      	str	r7, [r5, #12]
    58c8:	60bd      	str	r5, [r7, #8]
    58ca:	1815      	adds	r5, r2, r0
    58cc:	686d      	ldr	r5, [r5, #4]
    58ce:	07ed      	lsls	r5, r5, #31
    58d0:	d542      	bpl.n	5958 <_free_r+0xd8>
    58d2:	f043 0201 	orr.w	r2, r3, #1
    58d6:	6062      	str	r2, [r4, #4]
    58d8:	50e3      	str	r3, [r4, r3]
    58da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    58de:	d218      	bcs.n	5912 <_free_r+0x92>
    58e0:	08db      	lsrs	r3, r3, #3
    58e2:	1c5a      	adds	r2, r3, #1
    58e4:	684d      	ldr	r5, [r1, #4]
    58e6:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    58ea:	60a7      	str	r7, [r4, #8]
    58ec:	2001      	movs	r0, #1
    58ee:	109b      	asrs	r3, r3, #2
    58f0:	fa00 f303 	lsl.w	r3, r0, r3
    58f4:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    58f8:	431d      	orrs	r5, r3
    58fa:	3808      	subs	r0, #8
    58fc:	60e0      	str	r0, [r4, #12]
    58fe:	604d      	str	r5, [r1, #4]
    5900:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    5904:	60fc      	str	r4, [r7, #12]
    5906:	4640      	mov	r0, r8
    5908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    590c:	f7ff beae 	b.w	566c <__malloc_unlock>
    5910:	4770      	bx	lr
    5912:	0a5a      	lsrs	r2, r3, #9
    5914:	2a04      	cmp	r2, #4
    5916:	d853      	bhi.n	59c0 <_free_r+0x140>
    5918:	099a      	lsrs	r2, r3, #6
    591a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    591e:	007f      	lsls	r7, r7, #1
    5920:	f102 0538 	add.w	r5, r2, #56	; 0x38
    5924:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    5928:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    592c:	4944      	ldr	r1, [pc, #272]	; (5a40 <_free_r+0x1c0>)
    592e:	3808      	subs	r0, #8
    5930:	4290      	cmp	r0, r2
    5932:	d04d      	beq.n	59d0 <_free_r+0x150>
    5934:	6851      	ldr	r1, [r2, #4]
    5936:	f021 0103 	bic.w	r1, r1, #3
    593a:	428b      	cmp	r3, r1
    593c:	d202      	bcs.n	5944 <_free_r+0xc4>
    593e:	6892      	ldr	r2, [r2, #8]
    5940:	4290      	cmp	r0, r2
    5942:	d1f7      	bne.n	5934 <_free_r+0xb4>
    5944:	68d0      	ldr	r0, [r2, #12]
    5946:	60e0      	str	r0, [r4, #12]
    5948:	60a2      	str	r2, [r4, #8]
    594a:	6084      	str	r4, [r0, #8]
    594c:	60d4      	str	r4, [r2, #12]
    594e:	4640      	mov	r0, r8
    5950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5954:	f7ff be8a 	b.w	566c <__malloc_unlock>
    5958:	6895      	ldr	r5, [r2, #8]
    595a:	4f3a      	ldr	r7, [pc, #232]	; (5a44 <_free_r+0x1c4>)
    595c:	42bd      	cmp	r5, r7
    595e:	4403      	add	r3, r0
    5960:	d03f      	beq.n	59e2 <_free_r+0x162>
    5962:	68d0      	ldr	r0, [r2, #12]
    5964:	60e8      	str	r0, [r5, #12]
    5966:	f043 0201 	orr.w	r2, r3, #1
    596a:	6085      	str	r5, [r0, #8]
    596c:	6062      	str	r2, [r4, #4]
    596e:	50e3      	str	r3, [r4, r3]
    5970:	e7b3      	b.n	58da <_free_r+0x5a>
    5972:	07ff      	lsls	r7, r7, #31
    5974:	4403      	add	r3, r0
    5976:	d407      	bmi.n	5988 <_free_r+0x108>
    5978:	f855 2c08 	ldr.w	r2, [r5, #-8]
    597c:	1aa4      	subs	r4, r4, r2
    597e:	4413      	add	r3, r2
    5980:	68a0      	ldr	r0, [r4, #8]
    5982:	68e2      	ldr	r2, [r4, #12]
    5984:	60c2      	str	r2, [r0, #12]
    5986:	6090      	str	r0, [r2, #8]
    5988:	4a2f      	ldr	r2, [pc, #188]	; (5a48 <_free_r+0x1c8>)
    598a:	6812      	ldr	r2, [r2, #0]
    598c:	f043 0001 	orr.w	r0, r3, #1
    5990:	4293      	cmp	r3, r2
    5992:	6060      	str	r0, [r4, #4]
    5994:	608c      	str	r4, [r1, #8]
    5996:	d3b6      	bcc.n	5906 <_free_r+0x86>
    5998:	4b2c      	ldr	r3, [pc, #176]	; (5a4c <_free_r+0x1cc>)
    599a:	4640      	mov	r0, r8
    599c:	6819      	ldr	r1, [r3, #0]
    599e:	f7ff ff21 	bl	57e4 <_malloc_trim_r>
    59a2:	e7b0      	b.n	5906 <_free_r+0x86>
    59a4:	1811      	adds	r1, r2, r0
    59a6:	6849      	ldr	r1, [r1, #4]
    59a8:	07c9      	lsls	r1, r1, #31
    59aa:	d444      	bmi.n	5a36 <_free_r+0x1b6>
    59ac:	6891      	ldr	r1, [r2, #8]
    59ae:	68d2      	ldr	r2, [r2, #12]
    59b0:	60ca      	str	r2, [r1, #12]
    59b2:	4403      	add	r3, r0
    59b4:	f043 0001 	orr.w	r0, r3, #1
    59b8:	6091      	str	r1, [r2, #8]
    59ba:	6060      	str	r0, [r4, #4]
    59bc:	50e3      	str	r3, [r4, r3]
    59be:	e7a2      	b.n	5906 <_free_r+0x86>
    59c0:	2a14      	cmp	r2, #20
    59c2:	d817      	bhi.n	59f4 <_free_r+0x174>
    59c4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    59c8:	007f      	lsls	r7, r7, #1
    59ca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    59ce:	e7a9      	b.n	5924 <_free_r+0xa4>
    59d0:	10aa      	asrs	r2, r5, #2
    59d2:	684b      	ldr	r3, [r1, #4]
    59d4:	2501      	movs	r5, #1
    59d6:	fa05 f202 	lsl.w	r2, r5, r2
    59da:	4313      	orrs	r3, r2
    59dc:	604b      	str	r3, [r1, #4]
    59de:	4602      	mov	r2, r0
    59e0:	e7b1      	b.n	5946 <_free_r+0xc6>
    59e2:	f043 0201 	orr.w	r2, r3, #1
    59e6:	614c      	str	r4, [r1, #20]
    59e8:	610c      	str	r4, [r1, #16]
    59ea:	60e5      	str	r5, [r4, #12]
    59ec:	60a5      	str	r5, [r4, #8]
    59ee:	6062      	str	r2, [r4, #4]
    59f0:	50e3      	str	r3, [r4, r3]
    59f2:	e788      	b.n	5906 <_free_r+0x86>
    59f4:	2a54      	cmp	r2, #84	; 0x54
    59f6:	d806      	bhi.n	5a06 <_free_r+0x186>
    59f8:	0b1a      	lsrs	r2, r3, #12
    59fa:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    59fe:	007f      	lsls	r7, r7, #1
    5a00:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5a04:	e78e      	b.n	5924 <_free_r+0xa4>
    5a06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    5a0a:	d806      	bhi.n	5a1a <_free_r+0x19a>
    5a0c:	0bda      	lsrs	r2, r3, #15
    5a0e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5a12:	007f      	lsls	r7, r7, #1
    5a14:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5a18:	e784      	b.n	5924 <_free_r+0xa4>
    5a1a:	f240 5054 	movw	r0, #1364	; 0x554
    5a1e:	4282      	cmp	r2, r0
    5a20:	d806      	bhi.n	5a30 <_free_r+0x1b0>
    5a22:	0c9a      	lsrs	r2, r3, #18
    5a24:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5a28:	007f      	lsls	r7, r7, #1
    5a2a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    5a2e:	e779      	b.n	5924 <_free_r+0xa4>
    5a30:	27fe      	movs	r7, #254	; 0xfe
    5a32:	257e      	movs	r5, #126	; 0x7e
    5a34:	e776      	b.n	5924 <_free_r+0xa4>
    5a36:	f043 0201 	orr.w	r2, r3, #1
    5a3a:	6062      	str	r2, [r4, #4]
    5a3c:	50e3      	str	r3, [r4, r3]
    5a3e:	e762      	b.n	5906 <_free_r+0x86>
    5a40:	1fff0dbc 	.word	0x1fff0dbc
    5a44:	1fff0dc4 	.word	0x1fff0dc4
    5a48:	1fff11c4 	.word	0x1fff11c4
    5a4c:	1fff146c 	.word	0x1fff146c

00005a50 <__register_exitproc>:
    5a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a54:	4c25      	ldr	r4, [pc, #148]	; (5aec <__register_exitproc+0x9c>)
    5a56:	6825      	ldr	r5, [r4, #0]
    5a58:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    5a5c:	4606      	mov	r6, r0
    5a5e:	4688      	mov	r8, r1
    5a60:	4692      	mov	sl, r2
    5a62:	4699      	mov	r9, r3
    5a64:	b3c4      	cbz	r4, 5ad8 <__register_exitproc+0x88>
    5a66:	6860      	ldr	r0, [r4, #4]
    5a68:	281f      	cmp	r0, #31
    5a6a:	dc17      	bgt.n	5a9c <__register_exitproc+0x4c>
    5a6c:	1c43      	adds	r3, r0, #1
    5a6e:	b176      	cbz	r6, 5a8e <__register_exitproc+0x3e>
    5a70:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    5a74:	2201      	movs	r2, #1
    5a76:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    5a7a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    5a7e:	4082      	lsls	r2, r0
    5a80:	4311      	orrs	r1, r2
    5a82:	2e02      	cmp	r6, #2
    5a84:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    5a88:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    5a8c:	d01e      	beq.n	5acc <__register_exitproc+0x7c>
    5a8e:	3002      	adds	r0, #2
    5a90:	6063      	str	r3, [r4, #4]
    5a92:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    5a96:	2000      	movs	r0, #0
    5a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a9c:	4b14      	ldr	r3, [pc, #80]	; (5af0 <__register_exitproc+0xa0>)
    5a9e:	b303      	cbz	r3, 5ae2 <__register_exitproc+0x92>
    5aa0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5aa4:	f7ff fad2 	bl	504c <malloc>
    5aa8:	4604      	mov	r4, r0
    5aaa:	b1d0      	cbz	r0, 5ae2 <__register_exitproc+0x92>
    5aac:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    5ab0:	2700      	movs	r7, #0
    5ab2:	e880 0088 	stmia.w	r0, {r3, r7}
    5ab6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5aba:	4638      	mov	r0, r7
    5abc:	2301      	movs	r3, #1
    5abe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    5ac2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    5ac6:	2e00      	cmp	r6, #0
    5ac8:	d0e1      	beq.n	5a8e <__register_exitproc+0x3e>
    5aca:	e7d1      	b.n	5a70 <__register_exitproc+0x20>
    5acc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    5ad0:	430a      	orrs	r2, r1
    5ad2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    5ad6:	e7da      	b.n	5a8e <__register_exitproc+0x3e>
    5ad8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    5adc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5ae0:	e7c1      	b.n	5a66 <__register_exitproc+0x16>
    5ae2:	f04f 30ff 	mov.w	r0, #4294967295
    5ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5aea:	bf00      	nop
    5aec:	000061d0 	.word	0x000061d0
    5af0:	0000504d 	.word	0x0000504d
    5af4:	00000030 	.word	0x00000030
    5af8:	0000002d 	.word	0x0000002d
    5afc:	564f523c 	.word	0x564f523c
    5b00:	444f5245 	.word	0x444f5245
    5b04:	47534d4f 	.word	0x47534d4f
    5b08:	0000003e 	.word	0x0000003e
    5b0c:	4f522f3c 	.word	0x4f522f3c
    5b10:	4f524556 	.word	0x4f524556
    5b14:	534d4f44 	.word	0x534d4f44
    5b18:	00003e47 	.word	0x00003e47
    5b1c:	2e574152 	.word	0x2e574152
    5b20:	63634120 	.word	0x63634120
    5b24:	00205b20 	.word	0x00205b20
    5b28:	0000202c 	.word	0x0000202c
    5b2c:	202c5d20 	.word	0x202c5d20
    5b30:	20727947 	.word	0x20727947
    5b34:	0000205b 	.word	0x0000205b
    5b38:	202c5d20 	.word	0x202c5d20
    5b3c:	2067614d 	.word	0x2067614d
    5b40:	0000205b 	.word	0x0000205b
    5b44:	202c5d20 	.word	0x202c5d20
    5b48:	20706d54 	.word	0x20706d54
    5b4c:	0000205b 	.word	0x0000205b
    5b50:	00005d20 	.word	0x00005d20
    5b54:	6c616353 	.word	0x6c616353
    5b58:	202e6465 	.word	0x202e6465
    5b5c:	20636341 	.word	0x20636341
    5b60:	29676d28 	.word	0x29676d28
    5b64:	00205b20 	.word	0x00205b20
    5b68:	202c5d20 	.word	0x202c5d20
    5b6c:	20727947 	.word	0x20727947
    5b70:	53504428 	.word	0x53504428
    5b74:	205b2029 	.word	0x205b2029
    5b78:	00000000 	.word	0x00000000
    5b7c:	202c5d20 	.word	0x202c5d20
    5b80:	2067614d 	.word	0x2067614d
    5b84:	29547528 	.word	0x29547528
    5b88:	00205b20 	.word	0x00205b20
    5b8c:	202c5d20 	.word	0x202c5d20
    5b90:	20706d54 	.word	0x20706d54
    5b94:	20294328 	.word	0x20294328
    5b98:	0000205b 	.word	0x0000205b
    5b9c:	6e697250 	.word	0x6e697250
    5ba0:	676e6974 	.word	0x676e6974
    5ba4:	6f726620 	.word	0x6f726620
    5ba8:	6553206d 	.word	0x6553206d
    5bac:	726f736e 	.word	0x726f736e
    5bb0:	00003120 	.word	0x00003120
    5bb4:	74696157 	.word	0x74696157
    5bb8:	20676e69 	.word	0x20676e69
    5bbc:	20726f66 	.word	0x20726f66
    5bc0:	61746164 	.word	0x61746164
    5bc4:	00000000 	.word	0x00000000
    5bc8:	6e697250 	.word	0x6e697250
    5bcc:	676e6974 	.word	0x676e6974
    5bd0:	6f726620 	.word	0x6f726620
    5bd4:	6553206d 	.word	0x6553206d
    5bd8:	726f736e 	.word	0x726f736e
    5bdc:	00003220 	.word	0x00003220
    5be0:	74696157 	.word	0x74696157
    5be4:	20676e69 	.word	0x20676e69
    5be8:	20726f66 	.word	0x20726f66
    5bec:	61746164 	.word	0x61746164
    5bf0:	00003220 	.word	0x00003220
    5bf4:	74696e49 	.word	0x74696e49
    5bf8:	696c6169 	.word	0x696c6169
    5bfc:	6974617a 	.word	0x6974617a
    5c00:	6f206e6f 	.word	0x6f206e6f
    5c04:	68742066 	.word	0x68742066
    5c08:	65732065 	.word	0x65732065
    5c0c:	726f736e 	.word	0x726f736e
    5c10:	74657220 	.word	0x74657220
    5c14:	656e7275 	.word	0x656e7275
    5c18:	00203a64 	.word	0x00203a64
    5c1c:	69797254 	.word	0x69797254
    5c20:	6120676e 	.word	0x6120676e
    5c24:	6e696167 	.word	0x6e696167
    5c28:	002e2e2e 	.word	0x002e2e2e
    5c2c:	736e6553 	.word	0x736e6553
    5c30:	3120726f 	.word	0x3120726f
    5c34:	696e4920 	.word	0x696e4920
    5c38:	6c616974 	.word	0x6c616974
    5c3c:	64657369 	.word	0x64657369
    5c40:	00000000 	.word	0x00000000
    5c44:	74696e49 	.word	0x74696e49
    5c48:	696c6169 	.word	0x696c6169
    5c4c:	6974617a 	.word	0x6974617a
    5c50:	6f206e6f 	.word	0x6f206e6f
    5c54:	68742066 	.word	0x68742066
    5c58:	65732065 	.word	0x65732065
    5c5c:	726f736e 	.word	0x726f736e
    5c60:	72203220 	.word	0x72203220
    5c64:	72757465 	.word	0x72757465
    5c68:	3a64656e 	.word	0x3a64656e
    5c6c:	00000020 	.word	0x00000020
    5c70:	736e6553 	.word	0x736e6553
    5c74:	3220726f 	.word	0x3220726f
    5c78:	696e4920 	.word	0x696e4920
    5c7c:	6c616974 	.word	0x6c616974
    5c80:	64657369 	.word	0x64657369
    5c84:	ffffff00 	.word	0xffffff00

00005c88 <CSWTCH.39>:
    5c88:	00005cb8 00005cc8 00005cd8 00005ce8     .\...\...\...\..
    5c98:	00005cf8 00005d04 00005d14 00005d24     .\...]...]..$]..
    5ca8:	6e6b6e55 206e776f 74617453 00007375     Unknown Status..
    5cb8:	206c6c41 77207369 2e6c6c65 00000000     All is well.....
    5cc8:	656e6547 206c6172 6f727245 00000072     General Error...
    5cd8:	20746f4e 6c706d49 6e656d65 00646574     Not Implemented.
    5ce8:	61726150 6574656d 72452072 00726f72     Parameter Error.
    5cf8:	6e6f7257 44492067 00000000 61766e49     Wrong ID....Inva
    5d08:	2064696c 736e6553 0000726f 61746144     lid Sensor..Data
    5d18:	646e5520 6c667265 0000776f 736e6553      Underflow..Sens
    5d28:	4e20726f 5320746f 6f707075 64657472     or Not Supported
    5d38:	ffffff00                                ....

00005d3c <TwoWire::i2c0_hardware>:
    5d3c:	40048034 00000040 08221112 05020230     4..@@.....".0...
    5d4c:	10130207 022f0721 02070502 00000018     ....!./.........

00005d5c <TwoWire::i2c1_hardware>:
    5d5c:	40048034 00000080 ffff3a26 000602ff     4..@....&:......
    5d6c:	3b250000 02ffffff 00000006 00000019     ..%;............

00005d7c <TwoWire::i2c2_hardware>:
    5d7c:	40048028 00000040 ffffff04 000005ff     (..@@...........
    5d8c:	1a030000 05ffffff 00000005 0000004a     ............J...

00005d9c <vtable for TwoWire>:
	...
    5da4:	00001e35 00001df9 00001dcd 00001df5     5...............
    5db4:	00001dd1 00000941 00001ddd              ....A.......

00005dc0 <SPISettings::ctar_div_table>:
    5dc0:	00030002 00050004 00080006 000c000a     ................
    5dd0:	00140010 00200018 00380028 00600040     ...... .(.8.@.`.
    5de0:	00c00080 01800100 02800200 ffff0300     ................

00005df0 <SPIClass::spi0_hardware>:
    5df0:	4004803c 00001000 00001a04 00007fff     <..@............
    5e00:	00000e0f 00001fcd ff27080c 00000200     ..........'.....
    5e10:	00000200 00000200 00000000 ff1c070b     ................
    5e20:	00000200 00000200 00000200 00000000     ................
    5e30:	001b0e0d 00000200 00000200 00000200     ................
    5e40:	0609020a 16151714 002d1a0f 00000200     ..........-.....
    5e50:	00000200 00000200 00000200 00000200     ................
    5e60:	00000200 00000200 00000200 00000200     ................
    5e70:	00000200 00000300 02020101 08080404     ................
    5e80:	00200110                                .. .

00005e84 <SPISettings::ctar_clock_table>:
    5e84:	80000000 80010000 00000000 80020000     ................
    5e94:	00010000 00001001 00020000 00011001     ................
    5ea4:	00002003 00020001 00012003 00003004     . ....... ...0..
    5eb4:	00022003 00032003 00004005 00014005     . ... ...@...@..
    5ec4:	00005006 00015006 00006007 00016007     .P...P...`...`..
    5ed4:	00007008 00026007 00017008              .p...`...p..

00005ee0 <digital_pin_to_info_PGM>:
    5ee0:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    5ef0:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    5f00:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    5f10:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    5f20:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    5f30:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    5f40:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    5f50:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    5f60:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    5f70:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    5f80:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    5f90:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    5fa0:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    5fb0:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    5fc0:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    5fd0:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    5fe0:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    5ff0:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    6000:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    6010:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    6020:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    6030:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    6040:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    6050:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    6060:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    6070:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    6080:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    6090:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    60a0:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    60b0:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    60c0:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    60d0:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

000060e0 <vtable for HardwareSerial>:
	...
    60e8:	000040d5 000040f9 00004179 00004175     .@...@..yA..uA..
    60f8:	00004171 0000416d 00004169 0000409d     qA..mA..iA...@..
    6108:	00004149 00004145 0000413d 00004135     IA..EA..=A..5A..
    6118:	0000412d 0000411d 0000410d 00004109     -A...A...A...A..
    6128:	0000407d 00004085 0000408d 00004095     }@...@...@...@..
    6138:	000040e1 000040c9 ffff0a0d 006e616e     .@...@......nan.
    6148:	0066766f 00666e69                       ovf.inf.

00006150 <vtable for usb_serial_class>:
	...
    6158:	0000440d 00004405 00004401 000043fd     .D...D...D...C..
    6168:	000043f9 000043f5 000043f1 000043ed     .C...C...C...C..

00006178 <usb_endpoint_config_table>:
    6178:	15191500                                ....

0000617c <usb_descriptor_list>:
    617c:	00000100 1fff08ec 00000012 00000200     ................
    618c:	1fff0918 00000043 00000300 1fff0974     ....C.......t...
    619c:	00000000 04090301 1fff0900 00000000     ................
    61ac:	04090302 1fff095c 00000000 04090303     ....\...........
    61bc:	1fff0978 00000000 00000000 00000000     x...............
    61cc:	00000000                                ....

000061d0 <_global_impure_ptr>:
    61d0:	1fff0990                                ....

000061d4 <_init>:
    61d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61d6:	bf00      	nop
    61d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    61da:	bc08      	pop	{r3}
    61dc:	469e      	mov	lr, r3
    61de:	4770      	bx	lr

000061e0 <__init_array_start>:
    61e0:	0000579d 	.word	0x0000579d

000061e4 <__frame_dummy_init_array_entry>:
    61e4:	00000435 000007fd                       5.......

Disassembly of section .fini:

000061ec <_fini>:
    61ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61ee:	bf00      	nop
