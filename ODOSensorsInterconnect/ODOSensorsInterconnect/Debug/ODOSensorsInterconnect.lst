
C:\Users\hayes\AppData\Local\Temp\VMBuilds\ODOSensorsInterconnect\teensy36\Debug/ODOSensorsInterconnect.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
       0:	00 00 03 20 d1 01 00 00 a5 26 00 00 5d 26 00 00     ... .....&..]&..
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
      10:	5d 26 00 00 5d 26 00 00 5d 26 00 00 5d 26 00 00     ]&..]&..]&..]&..
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
      20:	5d 26 00 00 5d 26 00 00 5d 26 00 00 a5 26 00 00     ]&..]&..]&...&..
      30:	a5 26 00 00 5d 26 00 00 d5 3b 00 00 d9 3b 00 00     .&..]&...;...;..
      40:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      50:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      60:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      70:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      80:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      90:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      a0:	39 23 00 00 45 23 00 00 a5 26 00 00 a5 26 00 00     9#..E#...&...&..
      b0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      c0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      d0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      e0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
      f0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     100:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     110:	a5 26 00 00 15 2c 00 00 a5 26 00 00 a5 26 00 00     .&...,...&...&..
     120:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     130:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     140:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     150:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     160:	a5 26 00 00 a5 26 00 00 51 23 00 00 a5 26 00 00     .&...&..Q#...&..
     170:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     180:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     190:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     1a0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     1b0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..
     1c0:	a5 26 00 00 a5 26 00 00 a5 26 00 00 a5 26 00 00     .&...&...&...&..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f002 fa62 	bl	26ac <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	4b56      	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	781a      	ldrb	r2, [r3, #0]
     20a:	0711      	lsls	r1, r2, #28
     20c:	d503      	bpl.n	216 <ResetHandler+0x46>
     20e:	781a      	ldrb	r2, [r3, #0]
     210:	f042 0208 	orr.w	r2, r2, #8
     214:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	4b53      	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	4953      	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	22aa      	movs	r2, #170	; 0xaa
     21c:	701a      	strb	r2, [r3, #0]
     21e:	4a53      	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	428b      	cmp	r3, r1
     224:	d204      	bcs.n	230 <ResetHandler+0x60>
     226:	f852 0f04 	ldr.w	r0, [r2, #4]!
     22a:	f843 0b04 	str.w	r0, [r3], #4
     22e:	e7f8      	b.n	222 <ResetHandler+0x52>
     230:	4b50      	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	4951      	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	2200      	movs	r2, #0
     236:	428b      	cmp	r3, r1
     238:	d202      	bcs.n	240 <ResetHandler+0x70>
     23a:	f843 2b04 	str.w	r2, [r3], #4
     23e:	e7fa      	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	494e      	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	4a4f      	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	2300      	movs	r3, #0
     246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     24a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     24e:	3301      	adds	r3, #1
     250:	2b74      	cmp	r3, #116	; 0x74
     252:	d1f8      	bne.n	246 <ResetHandler+0x76>
     254:	4b4b      	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2180      	movs	r1, #128	; 0x80
     25a:	f803 1b01 	strb.w	r1, [r3], #1
     25e:	4293      	cmp	r3, r2
     260:	d1fb      	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	4b4a      	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	4a45      	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	4b49      	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	228a      	movs	r2, #138	; 0x8a
     26c:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     272:	2224      	movs	r2, #36	; 0x24
     274:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	22a0      	movs	r2, #160	; 0xa0
     278:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	799a      	ldrb	r2, [r3, #6]
     27c:	0792      	lsls	r2, r2, #30
     27e:	d5fc      	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	799a      	ldrb	r2, [r3, #6]
     282:	06d4      	lsls	r4, r2, #27
     284:	d4fc      	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	4a43      	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	7993      	ldrb	r3, [r2, #6]
     28a:	f003 030c 	and.w	r3, r3, #12
     28e:	2b08      	cmp	r3, #8
     290:	d1fa      	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	4b41      	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	2260      	movs	r2, #96	; 0x60
     296:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	3302      	adds	r3, #2
     29a:	781a      	ldrb	r2, [r3, #0]
     29c:	2a80      	cmp	r2, #128	; 0x80
     29e:	d1fc      	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	2201      	movs	r2, #1
     2a4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	225d      	movs	r2, #93	; 0x5d
     2a8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	799a      	ldrb	r2, [r3, #6]
     2ac:	0690      	lsls	r0, r2, #26
     2ae:	d5fc      	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	7999      	ldrb	r1, [r3, #6]
     2b2:	4a38      	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	0649      	lsls	r1, r1, #25
     2b6:	d5fb      	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	4b38      	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	4939      	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	2100      	movs	r1, #0
     2c0:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	2320      	movs	r3, #32
     2c4:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	7993      	ldrb	r3, [r2, #6]
     2c8:	f003 030c 	and.w	r3, r3, #12
     2cc:	2b0c      	cmp	r3, #12
     2ce:	d1fa      	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	4b34      	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	4a35      	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	4a35      	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	4c35      	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	6813      	ldr	r3, [r2, #0]
     2dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2e0:	d103      	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	6023      	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2e8:	6013      	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f002 faf7 	bl	28f4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	6823      	ldr	r3, [r4, #0]
     308:	07da      	lsls	r2, r3, #31
     30a:	d505      	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	f002 fa81 	bl	2814 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	065b      	lsls	r3, r3, #25
     31e:	d509      	bpl.n	334 <ResetHandler+0x164>
     320:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	4b29      	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	6822      	ldr	r2, [r4, #0]
     326:	429a      	cmp	r2, r3
     328:	d104      	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	4825      	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	f002 fa72 	bl	2814 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	2300      	movs	r3, #0
     332:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	f004 fb82 	bl	4a3c <__libc_init_array>

	startup_late_hook();
     338:	f002 f9be 	bl	26b8 <startup_late_hook>
	main();
     33c:	f003 fc54 	bl	3be8 <main>
     340:	e7fe      	b.n	340 <ResetHandler+0x170>
     342:	bf00      	nop
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4007d002 	.word	0x4007d002
     364:	4007e000 	.word	0x4007e000
     368:	1fff1320 	.word	0x1fff1320
     36c:	00005e54 	.word	0x00005e54
     370:	1fff0730 	.word	0x1fff0730
     374:	1fff1320 	.word	0x1fff1320
     378:	1fff158c 	.word	0x1fff158c
     37c:	1fff0200 	.word	0x1fff0200
     380:	00000000 	.word	0x00000000
     384:	e000e400 	.word	0xe000e400
     388:	e000e464 	.word	0xe000e464
     38c:	e000ed08 	.word	0xe000ed08
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	4007e001 	.word	0x4007e001
     39c:	40048044 	.word	0x40048044
     3a0:	02060000 	.word	0x02060000
     3a4:	40048004 	.word	0x40048004
     3a8:	000710c0 	.word	0x000710c0
     3ac:	4003d010 	.word	0x4003d010
     3b0:	4003d014 	.word	0x4003d014
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	60382f93 	.word	0x60382f93
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff1320 	.word	0x1fff1320
     42c:	00000000 	.word	0x00000000
     430:	00005e58 	.word	0x00005e58

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff1324 	.word	0x1fff1324
     460:	00005e58 	.word	0x00005e58
     464:	1fff1320 	.word	0x1fff1320
     468:	00000000 	.word	0x00000000

0000046c <setup>:
#endif


void setup() {

    SERIAL_PORT.begin(115200);
     46c:	b538      	push	{r3, r4, r5, lr}
     46e:	f640 31b8 	movw	r1, #3000	; 0xbb8
     472:	484e      	ldr	r0, [pc, #312]	; (5ac <setup+0x140>)
     474:	f000 fb60 	bl	b38 <VisualMicroDebug::init(unsigned long)>
     478:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     47c:	484b      	ldr	r0, [pc, #300]	; (5ac <setup+0x140>)
     47e:	f000 fb57 	bl	b30 <VisualMicroDebug::begin(unsigned long)>
     482:	2101      	movs	r1, #1
     484:	4849      	ldr	r0, [pc, #292]	; (5ac <setup+0x140>)
     486:	f000 fb2d 	bl	ae4 <VisualMicroDebug::outPacketStart(bool)>
     48a:	2800      	cmp	r0, #0
     48c:	d179      	bne.n	582 <setup+0x116>
     48e:	2100      	movs	r1, #0
     490:	4846      	ldr	r0, [pc, #280]	; (5ac <setup+0x140>)
     492:	2201      	movs	r2, #1
     494:	f000 fbfc 	bl	c90 <VisualMicroDebug::start(bool, bool)>
     498:	2101      	movs	r1, #1
     49a:	4844      	ldr	r0, [pc, #272]	; (5ac <setup+0x140>)
     49c:	f000 fb22 	bl	ae4 <VisualMicroDebug::outPacketStart(bool)>
     4a0:	2800      	cmp	r0, #0
     4a2:	d17a      	bne.n	59a <setup+0x12e>
     4a4:	4a42      	ldr	r2, [pc, #264]	; (5b0 <setup+0x144>)
     4a6:	4943      	ldr	r1, [pc, #268]	; (5b4 <setup+0x148>)
     4a8:	4d43      	ldr	r5, [pc, #268]	; (5b8 <setup+0x14c>)
     4aa:	4c44      	ldr	r4, [pc, #272]	; (5bc <setup+0x150>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4ac:	7813      	ldrb	r3, [r2, #0]
     4ae:	2b00      	cmp	r3, #0
     4b0:	d0fc      	beq.n	4ac <setup+0x40>
     4b2:	780b      	ldrb	r3, [r1, #0]
     4b4:	07db      	lsls	r3, r3, #31
     4b6:	d5f9      	bpl.n	4ac <setup+0x40>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     4b8:	682b      	ldr	r3, [r5, #0]
     4ba:	6820      	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     4bc:	1a1b      	subs	r3, r3, r0
     4be:	2b0e      	cmp	r3, #14
     4c0:	d9f4      	bls.n	4ac <setup+0x40>
    while (!SERIAL_PORT) {};

#ifdef USE_SPI
    SPI_PORT.begin(); // this will initialise the SPI port
#else
    WIRE_PORT.begin();
     4c2:	483f      	ldr	r0, [pc, #252]	; (5c0 <setup+0x154>)
     4c4:	4c3f      	ldr	r4, [pc, #252]	; (5c4 <setup+0x158>)
     4c6:	f001 fff1 	bl	24ac <SPIClass::begin()>
    while (!initialized) {

#ifdef USE_SPI
        myICM.begin(CS_PIN, SPI_PORT);
#else
        myICM.begin(WIRE_PORT, AD0_VAL);
     4ca:	4b3f      	ldr	r3, [pc, #252]	; (5c8 <setup+0x15c>)
     4cc:	4a3c      	ldr	r2, [pc, #240]	; (5c0 <setup+0x154>)
     4ce:	483d      	ldr	r0, [pc, #244]	; (5c4 <setup+0x158>)
     4d0:	210a      	movs	r1, #10
     4d2:	f000 ffd7 	bl	1484 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4d6:	2127      	movs	r1, #39	; 0x27
     4d8:	483c      	ldr	r0, [pc, #240]	; (5cc <setup+0x160>)
     4da:	f003 fa15 	bl	3908 <usb_serial_write>
#endif

        SERIAL_PORT.print(F("Initialization of the sensor returned: "));
        SERIAL_PORT.println(myICM.statusString());
        if (myICM.status != ICM_20948_Stat_Ok) {
            SERIAL_PORT.println("Trying again...");
     4de:	2108      	movs	r1, #8
     4e0:	4838      	ldr	r0, [pc, #224]	; (5c4 <setup+0x158>)
     4e2:	f000 fef1 	bl	12c8 <ICM_20948::statusString(ICM_20948_Status_e)>
     4e6:	4605      	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     4e8:	f004 fdca 	bl	5080 <strlen>
     4ec:	4601      	mov	r1, r0
     4ee:	4628      	mov	r0, r5
     4f0:	f003 fa0a 	bl	3908 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4f4:	4836      	ldr	r0, [pc, #216]	; (5d0 <setup+0x164>)
     4f6:	f003 fb7f 	bl	3bf8 <Print::println()>
            delay(500);
     4fa:	7f23      	ldrb	r3, [r4, #28]
     4fc:	4835      	ldr	r0, [pc, #212]	; (5d4 <setup+0x168>)
     4fe:	210f      	movs	r1, #15
     500:	b14b      	cbz	r3, 516 <setup+0xaa>
     502:	f003 fa01 	bl	3908 <usb_serial_write>
     506:	4832      	ldr	r0, [pc, #200]	; (5d0 <setup+0x164>)
     508:	f003 fb76 	bl	3bf8 <Print::println()>
        }
        else {
     50c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     510:	f002 f99e 	bl	2850 <delay>
     514:	e7d9      	b.n	4ca <setup+0x5e>
     516:	2114      	movs	r1, #20
     518:	482f      	ldr	r0, [pc, #188]	; (5d8 <setup+0x16c>)
     51a:	f003 f9f5 	bl	3908 <usb_serial_write>
     51e:	482c      	ldr	r0, [pc, #176]	; (5d0 <setup+0x164>)
     520:	f003 fb6a 	bl	3bf8 <Print::println()>
    while (!initialized) {

#ifdef USE_SPI
        myICM.begin(CS_PIN_2, SPI_PORT);
#else
        myICM.begin(WIRE_PORT, AD0_VAL);
     524:	4b28      	ldr	r3, [pc, #160]	; (5c8 <setup+0x15c>)
     526:	4a26      	ldr	r2, [pc, #152]	; (5c0 <setup+0x154>)
     528:	4826      	ldr	r0, [pc, #152]	; (5c4 <setup+0x158>)
     52a:	2109      	movs	r1, #9
     52c:	f000 ffaa 	bl	1484 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>
     530:	2129      	movs	r1, #41	; 0x29
     532:	482a      	ldr	r0, [pc, #168]	; (5dc <setup+0x170>)
     534:	f003 f9e8 	bl	3908 <usb_serial_write>
#endif

        SERIAL_PORT.print(F("Initialization of the sensor 2 returned: "));
        SERIAL_PORT.println(myICM.statusString());
        if (myICM.status != ICM_20948_Stat_Ok) {
            SERIAL_PORT.println("Trying again...");
     538:	2108      	movs	r1, #8
     53a:	4822      	ldr	r0, [pc, #136]	; (5c4 <setup+0x158>)
     53c:	f000 fec4 	bl	12c8 <ICM_20948::statusString(ICM_20948_Status_e)>
     540:	4605      	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     542:	f004 fd9d 	bl	5080 <strlen>
     546:	4601      	mov	r1, r0
     548:	4628      	mov	r0, r5
     54a:	f003 f9dd 	bl	3908 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     54e:	4820      	ldr	r0, [pc, #128]	; (5d0 <setup+0x164>)
     550:	f003 fb52 	bl	3bf8 <Print::println()>
            delay(500);
     554:	7f23      	ldrb	r3, [r4, #28]
     556:	481f      	ldr	r0, [pc, #124]	; (5d4 <setup+0x168>)
     558:	210f      	movs	r1, #15
     55a:	b14b      	cbz	r3, 570 <setup+0x104>
     55c:	f003 f9d4 	bl	3908 <usb_serial_write>
     560:	481b      	ldr	r0, [pc, #108]	; (5d0 <setup+0x164>)
     562:	f003 fb49 	bl	3bf8 <Print::println()>
        }
        else {
     566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     56a:	f002 f971 	bl	2850 <delay>
     56e:	e7d9      	b.n	524 <setup+0xb8>
     570:	2114      	movs	r1, #20
     572:	481b      	ldr	r0, [pc, #108]	; (5e0 <setup+0x174>)
     574:	f003 f9c8 	bl	3908 <usb_serial_write>
     578:	4815      	ldr	r0, [pc, #84]	; (5d0 <setup+0x164>)



}

void loop() {
     57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     57e:	f003 bb3b 	b.w	3bf8 <Print::println()>
     582:	2110      	movs	r1, #16
     584:	4817      	ldr	r0, [pc, #92]	; (5e4 <setup+0x178>)
     586:	f003 f9bf 	bl	3908 <usb_serial_write>
#endif


void setup() {

    SERIAL_PORT.begin(115200);
     58a:	210a      	movs	r1, #10
     58c:	4807      	ldr	r0, [pc, #28]	; (5ac <setup+0x140>)
     58e:	f000 fa0d 	bl	9ac <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     592:	4806      	ldr	r0, [pc, #24]	; (5ac <setup+0x140>)
     594:	f000 faca 	bl	b2c <VisualMicroDebug::outPacketEnd()>
     598:	e779      	b.n	48e <setup+0x22>
     59a:	2106      	movs	r1, #6
     59c:	4812      	ldr	r0, [pc, #72]	; (5e8 <setup+0x17c>)
     59e:	f003 f9b3 	bl	3908 <usb_serial_write>
     5a2:	4802      	ldr	r0, [pc, #8]	; (5ac <setup+0x140>)
     5a4:	f000 fac2 	bl	b2c <VisualMicroDebug::outPacketEnd()>
     5a8:	e77c      	b.n	4a4 <setup+0x38>
     5aa:	bf00      	nop
     5ac:	1fff13c4 	.word	0x1fff13c4
     5b0:	1fff14f4 	.word	0x1fff14f4
     5b4:	1fff150c 	.word	0x1fff150c
     5b8:	1fff1410 	.word	0x1fff1410
     5bc:	1fff1584 	.word	0x1fff1584
     5c0:	1fff0874 	.word	0x1fff0874
     5c4:	1fff137c 	.word	0x1fff137c
     5c8:	003d0900 	.word	0x003d0900
     5cc:	00005650 	.word	0x00005650
     5d0:	1fff08bc 	.word	0x1fff08bc
     5d4:	00005678 	.word	0x00005678
     5d8:	00005688 	.word	0x00005688
     5dc:	000056a0 	.word	0x000056a0
     5e0:	000056cc 	.word	0x000056cc
     5e4:	00005634 	.word	0x00005634
     5e8:	00005648 	.word	0x00005648

000005ec <printFormattedFloat(float, unsigned char, unsigned char)>:
}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
    float aval = abs(val);
    if (val < 0) {
     5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        SERIAL_PORT.print("-");
     5f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
     5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
     5f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
    float aval = abs(val);
    if (val < 0) {
     5fc:	ed2d 8b02 	vpush	{d8}
        SERIAL_PORT.print("-");
     600:	bfd4      	ite	le
     602:	eeb1 8a40 	vnegle.f32	s16, s0
     606:	eeb0 8a40 	vmovgt.f32	s16, s0
    }
     60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
    float aval = abs(val);
    if (val < 0) {
     60e:	460f      	mov	r7, r1
     610:	eef0 8a40 	vmov.f32	s17, s0
     614:	4605      	mov	r5, r0
     616:	f04f 0101 	mov.w	r1, #1
        SERIAL_PORT.print("-");
    }
     61a:	d43e      	bmi.n	69a <printFormattedFloat(float, unsigned char, unsigned char)+0xae>
     61c:	4824      	ldr	r0, [pc, #144]	; (6b0 <printFormattedFloat(float, unsigned char, unsigned char)+0xc4>)
     61e:	f003 f973 	bl	3908 <usb_serial_write>
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
     622:	b33d      	cbz	r5, 674 <printFormattedFloat(float, unsigned char, unsigned char)+0x88>
     624:	1e6e      	subs	r6, r5, #1
     626:	4634      	mov	r4, r6


void printFormattedFloat(float val, uint8_t leading, uint8_t decimals) {
    float aval = abs(val);
    if (val < 0) {
        SERIAL_PORT.print("-");
     628:	f04f 0800 	mov.w	r8, #0
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
            tenpow = 1;
     62c:	45b0      	cmp	r8, r6
     62e:	bfac      	ite	ge
     630:	2300      	movge	r3, #0
     632:	2301      	movlt	r3, #1
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
            tenpow *= 10;
        }
     634:	2c00      	cmp	r4, #0
     636:	dd08      	ble.n	64a <printFormattedFloat(float, unsigned char, unsigned char)+0x5e>
     638:	2200      	movs	r2, #0
     63a:	3201      	adds	r2, #1
     63c:	b2d2      	uxtb	r2, r2
        if (aval < tenpow) {
     63e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if (indi < (leading - 1)) {
            tenpow = 1;
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
            tenpow *= 10;
        }
     642:	42a2      	cmp	r2, r4
        if (aval < tenpow) {
     644:	ea4f 0343 	mov.w	r3, r3, lsl #1
        if (indi < (leading - 1)) {
            tenpow = 1;
        }
        for (uint8_t c = 0; c < (leading - 1 - indi); c++) {
            tenpow *= 10;
        }
     648:	dbf7      	blt.n	63a <printFormattedFloat(float, unsigned char, unsigned char)+0x4e>
        if (aval < tenpow) {
            SERIAL_PORT.print("0");
        }
     64a:	ee07 3a90 	vmov	s15, r3
     64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
     652:	eeb4 8ae7 	vcmpe.f32	s16, s15
     656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     65a:	d50b      	bpl.n	674 <printFormattedFloat(float, unsigned char, unsigned char)+0x88>
     65c:	f108 0801 	add.w	r8, r8, #1
     660:	2101      	movs	r1, #1
     662:	4814      	ldr	r0, [pc, #80]	; (6b4 <printFormattedFloat(float, unsigned char, unsigned char)+0xc8>)
     664:	f003 f950 	bl	3908 <usb_serial_write>
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
     668:	fa5f f388 	uxtb.w	r3, r8
     66c:	429d      	cmp	r5, r3
     66e:	f104 34ff 	add.w	r4, r4, #4294967295
     672:	d8db      	bhi.n	62c <printFormattedFloat(float, unsigned char, unsigned char)+0x40>
            break;
        }
    }
    if (val < 0) {
        SERIAL_PORT.print(-val, decimals);
    }
     674:	eef5 8ac0 	vcmpe.f32	s17, #0.0
     678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     67c:	d412      	bmi.n	6a4 <printFormattedFloat(float, unsigned char, unsigned char)+0xb8>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     67e:	ee18 0a90 	vmov	r0, s17
     682:	f003 fead 	bl	43e0 <__aeabi_f2d>
    else {
        SERIAL_PORT.print(val, decimals);
    }
}

#ifdef USE_SPI
     686:	ecbd 8b02 	vpop	{d8}
     68a:	ec41 0b10 	vmov	d0, r0, r1
     68e:	4639      	mov	r1, r7
     690:	4809      	ldr	r0, [pc, #36]	; (6b8 <printFormattedFloat(float, unsigned char, unsigned char)+0xcc>)
     692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     696:	f003 baff 	b.w	3c98 <Print::printFloat(double, unsigned char)>
     69a:	4808      	ldr	r0, [pc, #32]	; (6bc <printFormattedFloat(float, unsigned char, unsigned char)+0xd0>)
     69c:	f003 f934 	bl	3908 <usb_serial_write>
    else {
        SERIAL_PORT.print(" ");
    }
    for (uint8_t indi = 0; indi < leading; indi++) {
        uint32_t tenpow = 0;
        if (indi < (leading - 1)) {
     6a0:	2d00      	cmp	r5, #0
     6a2:	d1bf      	bne.n	624 <printFormattedFloat(float, unsigned char, unsigned char)+0x38>
     6a4:	eef1 7a68 	vneg.f32	s15, s17
     6a8:	ee17 0a90 	vmov	r0, s15
     6ac:	e7e9      	b.n	682 <printFormattedFloat(float, unsigned char, unsigned char)+0x96>
     6ae:	bf00      	nop
     6b0:	000056c8 	.word	0x000056c8
     6b4:	000056e4 	.word	0x000056e4
     6b8:	1fff08bc 	.word	0x1fff08bc
     6bc:	000056e8 	.word	0x000056e8

000006c0 <printScaledAGMT(ICM_20948_SPI*)>:
}

#ifdef USE_SPI
void printScaledAGMT(ICM_20948_SPI* sensor) {
#else
void printScaledAGMT(ICM_20948_I2C * sensor) {
     6c0:	b538      	push	{r3, r4, r5, lr}
     6c2:	2113      	movs	r1, #19
     6c4:	4604      	mov	r4, r0
     6c6:	483b      	ldr	r0, [pc, #236]	; (7b4 <printScaledAGMT(ICM_20948_SPI*)+0xf4>)
     6c8:	4d3b      	ldr	r5, [pc, #236]	; (7b8 <printScaledAGMT(ICM_20948_SPI*)+0xf8>)
     6ca:	f003 f91d 	bl	3908 <usb_serial_write>
#endif
    SERIAL_PORT.print("Scaled. Acc (mg) [ ");
    printFormattedFloat(sensor->accX(), 5, 2);
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->accY(), 5, 2);
     6ce:	4620      	mov	r0, r4
     6d0:	f000 fd8e 	bl	11f0 <ICM_20948::accX()>
     6d4:	2102      	movs	r1, #2
     6d6:	2005      	movs	r0, #5
     6d8:	f7ff ff88 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     6dc:	2102      	movs	r1, #2
     6de:	4628      	mov	r0, r5
     6e0:	f003 f912 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->accZ(), 5, 2);
     6e4:	4620      	mov	r0, r4
     6e6:	f000 fd87 	bl	11f8 <ICM_20948::accY()>
     6ea:	2102      	movs	r1, #2
     6ec:	2005      	movs	r0, #5
     6ee:	f7ff ff7d 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     6f2:	2102      	movs	r1, #2
     6f4:	4628      	mov	r0, r5
     6f6:	f003 f907 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(" ], Gyr (DPS) [ ");
    printFormattedFloat(sensor->gyrX(), 5, 2);
     6fa:	4620      	mov	r0, r4
     6fc:	f000 fd80 	bl	1200 <ICM_20948::accZ()>
     700:	2102      	movs	r1, #2
     702:	2005      	movs	r0, #5
     704:	f7ff ff72 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     708:	2110      	movs	r1, #16
     70a:	482c      	ldr	r0, [pc, #176]	; (7bc <printScaledAGMT(ICM_20948_SPI*)+0xfc>)
     70c:	f003 f8fc 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->gyrY(), 5, 2);
     710:	4620      	mov	r0, r4
     712:	f000 fdb9 	bl	1288 <ICM_20948::gyrX()>
     716:	2102      	movs	r1, #2
     718:	2005      	movs	r0, #5
     71a:	f7ff ff67 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     71e:	2102      	movs	r1, #2
     720:	4628      	mov	r0, r5
     722:	f003 f8f1 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->gyrZ(), 5, 2);
     726:	4620      	mov	r0, r4
     728:	f000 fdb2 	bl	1290 <ICM_20948::gyrY()>
     72c:	2102      	movs	r1, #2
     72e:	2005      	movs	r0, #5
     730:	f7ff ff5c 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     734:	2102      	movs	r1, #2
     736:	4628      	mov	r0, r5
     738:	f003 f8e6 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(" ], Mag (uT) [ ");
    printFormattedFloat(sensor->magX(), 5, 2);
     73c:	4620      	mov	r0, r4
     73e:	f000 fdab 	bl	1298 <ICM_20948::gyrZ()>
     742:	2102      	movs	r1, #2
     744:	2005      	movs	r0, #5
     746:	f7ff ff51 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     74a:	210f      	movs	r1, #15
     74c:	481c      	ldr	r0, [pc, #112]	; (7c0 <printScaledAGMT(ICM_20948_SPI*)+0x100>)
     74e:	f003 f8db 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->magY(), 5, 2);
     752:	4620      	mov	r0, r4
     754:	f000 fce2 	bl	111c <ICM_20948::magX()>
     758:	2102      	movs	r1, #2
     75a:	2005      	movs	r0, #5
     75c:	f7ff ff46 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     760:	2102      	movs	r1, #2
     762:	4628      	mov	r0, r5
     764:	f003 f8d0 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(", ");
    printFormattedFloat(sensor->magZ(), 5, 2);
     768:	4620      	mov	r0, r4
     76a:	f000 fce5 	bl	1138 <ICM_20948::magY()>
     76e:	2102      	movs	r1, #2
     770:	2005      	movs	r0, #5
     772:	f7ff ff3b 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     776:	2102      	movs	r1, #2
     778:	4628      	mov	r0, r5
     77a:	f003 f8c5 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(" ], Tmp (C) [ ");
    printFormattedFloat(sensor->temp(), 5, 2);
     77e:	4620      	mov	r0, r4
     780:	f000 fce8 	bl	1154 <ICM_20948::magZ()>
     784:	2102      	movs	r1, #2
     786:	2005      	movs	r0, #5
     788:	f7ff ff30 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     78c:	210e      	movs	r1, #14
     78e:	480d      	ldr	r0, [pc, #52]	; (7c4 <printScaledAGMT(ICM_20948_SPI*)+0x104>)
     790:	f003 f8ba 	bl	3908 <usb_serial_write>
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     794:	4620      	mov	r0, r4
     796:	f000 fd83 	bl	12a0 <ICM_20948::temp()>
     79a:	2102      	movs	r1, #2
     79c:	2005      	movs	r0, #5
     79e:	f7ff ff25 	bl	5ec <printFormattedFloat(float, unsigned char, unsigned char)>
     7a2:	2102      	movs	r1, #2
     7a4:	4808      	ldr	r0, [pc, #32]	; (7c8 <printScaledAGMT(ICM_20948_SPI*)+0x108>)
     7a6:	f003 f8af 	bl	3908 <usb_serial_write>
     7aa:	4808      	ldr	r0, [pc, #32]	; (7cc <printScaledAGMT(ICM_20948_SPI*)+0x10c>)
     7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SERIAL_PORT.print(" ], Tmp (C) [ ");
    printFormattedFloat(sensor->temp(), 5, 2);
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     7b0:	f003 ba22 	b.w	3bf8 <Print::println()>
     7b4:	00005724 	.word	0x00005724
     7b8:	000056f8 	.word	0x000056f8
     7bc:	00005738 	.word	0x00005738
     7c0:	0000574c 	.word	0x0000574c
     7c4:	0000575c 	.word	0x0000575c
     7c8:	00005720 	.word	0x00005720
     7cc:	1fff08bc 	.word	0x1fff08bc

000007d0 <loop>:

}

void loop() {


     7d0:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7d2:	4c48      	ldr	r4, [pc, #288]	; (8f4 <loop+0x124>)
     7d4:	b08b      	sub	sp, #44	; 0x2c
     7d6:	6823      	ldr	r3, [r4, #0]
     7d8:	9301      	str	r3, [sp, #4]
	return ret;
     7da:	9b01      	ldr	r3, [sp, #4]
     7dc:	b923      	cbnz	r3, 7e8 <loop+0x18>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     7de:	6823      	ldr	r3, [r4, #0]
     7e0:	9302      	str	r3, [sp, #8]
	return ret;
     7e2:	9b02      	ldr	r3, [sp, #8]
     7e4:	2b01      	cmp	r3, #1
     7e6:	d91f      	bls.n	828 <loop+0x58>
     7e8:	4843      	ldr	r0, [pc, #268]	; (8f8 <loop+0x128>)
     7ea:	4d44      	ldr	r5, [pc, #272]	; (8fc <loop+0x12c>)
     7ec:	f000 f8f0 	bl	9d0 <VisualMicroDebug::DBG_Millis()>
     7f0:	682a      	ldr	r2, [r5, #0]
     7f2:	4943      	ldr	r1, [pc, #268]	; (900 <loop+0x130>)
     7f4:	4290      	cmp	r0, r2
     7f6:	4603      	mov	r3, r0
     7f8:	6008      	str	r0, [r1, #0]
     7fa:	d362      	bcc.n	8c2 <loop+0xf2>
     7fc:	1a9a      	subs	r2, r3, r2
     7fe:	2af9      	cmp	r2, #249	; 0xf9
     800:	d912      	bls.n	828 <loop+0x58>
     802:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     806:	483c      	ldr	r0, [pc, #240]	; (8f8 <loop+0x128>)
     808:	602b      	str	r3, [r5, #0]
     80a:	f000 f8eb 	bl	9e4 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
     80e:	2101      	movs	r1, #1
     810:	4839      	ldr	r0, [pc, #228]	; (8f8 <loop+0x128>)
     812:	f000 f967 	bl	ae4 <VisualMicroDebug::outPacketStart(bool)>
     816:	2800      	cmp	r0, #0
     818:	d155      	bne.n	8c6 <loop+0xf6>
     81a:	4837      	ldr	r0, [pc, #220]	; (8f8 <loop+0x128>)
     81c:	2105      	movs	r1, #5
     81e:	f000 f8c5 	bl	9ac <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     822:	4835      	ldr	r0, [pc, #212]	; (8f8 <loop+0x128>)
     824:	f000 f94a 	bl	abc <VisualMicroDebug::OnBreakPointEnd()>
    digitalWrite(CS_PIN_2, HIGH);
    if (myICM.dataReady()) {
        myICM.getAGMT();                // The values are only updated when you call 'getAGMT'
     828:	2009      	movs	r0, #9
     82a:	2101      	movs	r1, #1
     82c:	f002 f804 	bl	2838 <digitalWrite>
    //    printRawAGMT( myICM.agmt );     // Uncomment this to see the raw values, taken directly from the agmt structure
     830:	4834      	ldr	r0, [pc, #208]	; (904 <loop+0x134>)
     832:	f000 fd57 	bl	12e4 <ICM_20948::dataReady()>
     836:	b328      	cbz	r0, 884 <loop+0xb4>

     838:	4932      	ldr	r1, [pc, #200]	; (904 <loop+0x134>)
     83a:	a804      	add	r0, sp, #16
     83c:	f000 fc5a 	bl	10f4 <ICM_20948::getAGMT()>
     840:	2116      	movs	r1, #22
     842:	4831      	ldr	r0, [pc, #196]	; (908 <loop+0x138>)
     844:	f003 f860 	bl	3908 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     848:	4830      	ldr	r0, [pc, #192]	; (90c <loop+0x13c>)
     84a:	f003 f9d5 	bl	3bf8 <Print::println()>
        SERIAL_PORT.println("Printing from Sensor 1");

        printScaledAGMT(&myICM);   // This function takes into account the scale settings from when the measurement was made to calculate the values with units
        delay(30);
    }
     84e:	482d      	ldr	r0, [pc, #180]	; (904 <loop+0x134>)
     850:	f7ff ff36 	bl	6c0 <printScaledAGMT(ICM_20948_SPI*)>
    else {
     854:	201e      	movs	r0, #30
     856:	f001 fffb 	bl	2850 <delay>
    }


    digitalWrite(CS_PIN, HIGH);
    if (myICM2.dataReady()) {
        myICM2.getAGMT();                // The values are only updated when you call 'getAGMT'
     85a:	200a      	movs	r0, #10
     85c:	2101      	movs	r1, #1
     85e:	f001 ffeb 	bl	2838 <digitalWrite>
    //    printRawAGMT( myICM.agmt );     // Uncomment this to see the raw values, taken directly from the agmt structure
     862:	482b      	ldr	r0, [pc, #172]	; (910 <loop+0x140>)
     864:	f000 fd3e 	bl	12e4 <ICM_20948::dataReady()>
     868:	b9c0      	cbnz	r0, 89c <loop+0xcc>
     86a:	2112      	movs	r1, #18
     86c:	4829      	ldr	r0, [pc, #164]	; (914 <loop+0x144>)
     86e:	f003 f84b 	bl	3908 <usb_serial_write>
     872:	4826      	ldr	r0, [pc, #152]	; (90c <loop+0x13c>)
     874:	f003 f9c0 	bl	3bf8 <Print::println()>
    }
    else {
        SERIAL_PORT.println("Waiting for data 2");
        delay(500);
    }

     878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     87c:	f001 ffe8 	bl	2850 <delay>



}


     880:	b00b      	add	sp, #44	; 0x2c
     882:	bd30      	pop	{r4, r5, pc}
     884:	2110      	movs	r1, #16
     886:	4824      	ldr	r0, [pc, #144]	; (918 <loop+0x148>)
     888:	f003 f83e 	bl	3908 <usb_serial_write>
     88c:	481f      	ldr	r0, [pc, #124]	; (90c <loop+0x13c>)
     88e:	f003 f9b3 	bl	3bf8 <Print::println()>
    }
    else {
        SERIAL_PORT.println("Waiting for data");
        delay(500);
    }

     892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     896:	f001 ffdb 	bl	2850 <delay>
     89a:	e7de      	b.n	85a <loop+0x8a>

    digitalWrite(CS_PIN, HIGH);
    if (myICM2.dataReady()) {
        myICM2.getAGMT();                // The values are only updated when you call 'getAGMT'
    //    printRawAGMT( myICM.agmt );     // Uncomment this to see the raw values, taken directly from the agmt structure

     89c:	a804      	add	r0, sp, #16
     89e:	491c      	ldr	r1, [pc, #112]	; (910 <loop+0x140>)
     8a0:	f000 fc28 	bl	10f4 <ICM_20948::getAGMT()>
     8a4:	2116      	movs	r1, #22
     8a6:	481d      	ldr	r0, [pc, #116]	; (91c <loop+0x14c>)
     8a8:	f003 f82e 	bl	3908 <usb_serial_write>
     8ac:	4817      	ldr	r0, [pc, #92]	; (90c <loop+0x13c>)
     8ae:	f003 f9a3 	bl	3bf8 <Print::println()>
        SERIAL_PORT.println("Printing from Sensor 2");

        printScaledAGMT(&myICM2);   // This function takes into account the scale settings from when the measurement was made to calculate the values with units
        delay(30);
    }
     8b2:	4817      	ldr	r0, [pc, #92]	; (910 <loop+0x140>)
     8b4:	f7ff ff04 	bl	6c0 <printScaledAGMT(ICM_20948_SPI*)>
    else {
     8b8:	201e      	movs	r0, #30
     8ba:	f001 ffc9 	bl	2850 <delay>



}


     8be:	b00b      	add	sp, #44	; 0x2c
     8c0:	bd30      	pop	{r4, r5, pc}

}

void loop() {


     8c2:	602b      	str	r3, [r5, #0]
     8c4:	e7b0      	b.n	828 <loop+0x58>
     8c6:	2101      	movs	r1, #1
     8c8:	480b      	ldr	r0, [pc, #44]	; (8f8 <loop+0x128>)
     8ca:	f000 f8a5 	bl	a18 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
     8ce:	2101      	movs	r1, #1
     8d0:	4813      	ldr	r0, [pc, #76]	; (920 <loop+0x150>)
     8d2:	f003 f819 	bl	3908 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     8d6:	6823      	ldr	r3, [r4, #0]
     8d8:	9303      	str	r3, [sp, #12]
	return ret;
     8da:	9903      	ldr	r1, [sp, #12]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     8dc:	480b      	ldr	r0, [pc, #44]	; (90c <loop+0x13c>)
     8de:	2300      	movs	r3, #0
     8e0:	220a      	movs	r2, #10
     8e2:	f003 f999 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     8e6:	4804      	ldr	r0, [pc, #16]	; (8f8 <loop+0x128>)
     8e8:	f000 f8da 	bl	aa0 <VisualMicroDebug::OnBreakPointPrintEnd()>
     8ec:	4802      	ldr	r0, [pc, #8]	; (8f8 <loop+0x128>)
     8ee:	f000 f91d 	bl	b2c <VisualMicroDebug::outPacketEnd()>
     8f2:	e792      	b.n	81a <loop+0x4a>
     8f4:	1fff1410 	.word	0x1fff1410
     8f8:	1fff13c4 	.word	0x1fff13c4
     8fc:	1fff13bc 	.word	0x1fff13bc
     900:	1fff13c0 	.word	0x1fff13c0
     904:	1fff137c 	.word	0x1fff137c
     908:	00005770 	.word	0x00005770
     90c:	1fff08bc 	.word	0x1fff08bc
     910:	1fff133c 	.word	0x1fff133c
     914:	000057b4 	.word	0x000057b4
     918:	00005788 	.word	0x00005788
     91c:	0000579c 	.word	0x0000579c
     920:	0000576c 	.word	0x0000576c

00000924 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
    printFormattedFloat(sensor->temp(), 5, 2);
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     924:	b508      	push	{r3, lr}
 // the ADR jumper is closed the value becomes 0

#ifdef USE_SPI
ICM_20948_SPI myICM;  // If using SPI create an ICM_20948_SPI object
ICM_20948_SPI myICM2; 

     926:	4804      	ldr	r0, [pc, #16]	; (938 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x14>)
     928:	f000 fda6 	bl	1478 <ICM_20948_SPI::ICM_20948_SPI()>

     92c:	4803      	ldr	r0, [pc, #12]	; (93c <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x18>)
    printFormattedFloat(sensor->temp(), 5, 2);
    SERIAL_PORT.print(" ]");
    SERIAL_PORT.println();
     92e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#ifdef USE_SPI
ICM_20948_SPI myICM;  // If using SPI create an ICM_20948_SPI object
ICM_20948_SPI myICM2; 


     932:	f000 bda1 	b.w	1478 <ICM_20948_SPI::ICM_20948_SPI()>
     936:	bf00      	nop
     938:	1fff137c 	.word	0x1fff137c
     93c:	1fff133c 	.word	0x1fff133c

00000940 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>:
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}

// Work out if we have a DigitalPin Inbound
void VisualMicroDebug::digitalWriteMessageCheck()
     940:	b530      	push	{r4, r5, lr}
     942:	b083      	sub	sp, #12
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     944:	f002 ff7a 	bl	383c <usb_serial_getchar>
     948:	f002 ff78 	bl	383c <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     94c:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     94e:	283a      	cmp	r0, #58	; 0x3a
     950:	ad01      	add	r5, sp, #4
     952:	d007      	beq.n	964 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x24>
     954:	462c      	mov	r4, r5
			pinStr[pinCharRead] = nxt;
     956:	f804 0b01 	strb.w	r0, [r4], #1
     95a:	f002 ff6f 	bl	383c <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     95e:	b2c0      	uxtb	r0, r0
	int pinCharRead = 0;
	if (nxtChar == 'd') {
		// Read Our message back -> dxxxx:1 where xxxxx is the pin number (must be a number!)
		read(); // Remove d
		char nxt = read();
		while (nxt != ':') {
     960:	283a      	cmp	r0, #58	; 0x3a
     962:	d1f8      	bne.n	956 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x16>
			pinStr[pinCharRead] = nxt;
			pinCharRead++;
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
     964:	4628      	mov	r0, r5
     966:	f004 f85f 	bl	4a28 <atoi>
     96a:	4604      	mov	r4, r0
     96c:	f002 ff66 	bl	383c <usb_serial_getchar>
		int state = read() - 48;
     970:	b2c0      	uxtb	r0, r0
     972:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
     976:	2901      	cmp	r1, #1
     978:	d802      	bhi.n	980 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x40>
     97a:	e011      	b.n	9a0 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x60>
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     97c:	280d      	cmp	r0, #13
     97e:	d004      	beq.n	98a <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x4a>
     980:	f002 ff5c 	bl	383c <usb_serial_getchar>
#elif defined(VMDGB_HAS_READER)
	b = reader->getchar();
#elif defined(VM_DBT) && (VM_DBT == VM_DBT_SOFTWARESERIAL)
	b = transport->read();
#else
	b = VM_DEBUGGER_SOFT_TRANSPORT.read();
     984:	b2c0      	uxtb	r0, r0
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
		}
		while (nxt != '\n' && nxt != '\r') {
     986:	280a      	cmp	r0, #10
     988:	d1f8      	bne.n	97c <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x3c>
        virtual int peek() { return usb_serial_peekchar(); }
     98a:	f002 ff7b 	bl	3884 <usb_serial_peekchar>
			nxt = read();
		}
		if (peek() == '\n') {
     98e:	b2c0      	uxtb	r0, r0
     990:	280a      	cmp	r0, #10
     992:	d001      	beq.n	998 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x58>
			read();
		}
	}
}
     994:	b003      	add	sp, #12
     996:	bd30      	pop	{r4, r5, pc}
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
     998:	f002 ff50 	bl	383c <usb_serial_getchar>
     99c:	b003      	add	sp, #12
     99e:	bd30      	pop	{r4, r5, pc}
			nxt = read();
		}
		int pin = atoi(pinStr);	// at : so skip and read state char
		int state = read() - 48;
		if (state == 1 || state == 0) { // State check, not sure tri-state truly supported with DigiWrite
			digitalWrite(pin, state);
     9a0:	b2c9      	uxtb	r1, r1
     9a2:	b2e0      	uxtb	r0, r4
     9a4:	f001 ff48 	bl	2838 <digitalWrite>
     9a8:	e7ea      	b.n	980 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]+0x40>
     9aa:	bf00      	nop

000009ac <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9ac:	4807      	ldr	r0, [pc, #28]	; (9cc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
//#include "VM_mem_check.h"
#endif


void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
     9ae:	b082      	sub	sp, #8
     9b0:	6803      	ldr	r3, [r0, #0]
     9b2:	9301      	str	r3, [sp, #4]
	return ret;
     9b4:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     9b6:	4411      	add	r1, r2
     9b8:	e001      	b.n	9be <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     9ba:	4299      	cmp	r1, r3
     9bc:	d304      	bcc.n	9c8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9be:	6803      	ldr	r3, [r0, #0]
     9c0:	9300      	str	r3, [sp, #0]
	return ret;
     9c2:	9b00      	ldr	r3, [sp, #0]
     9c4:	429a      	cmp	r2, r3
     9c6:	d9f8      	bls.n	9ba <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>


void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
     9c8:	b002      	add	sp, #8
     9ca:	4770      	bx	lr
     9cc:	1fff1410 	.word	0x1fff1410

000009d0 <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
     9d2:	b082      	sub	sp, #8
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	9301      	str	r3, [sp, #4]
	return ret;
     9d8:	9801      	ldr	r0, [sp, #4]
	return millis();
}
     9da:	b002      	add	sp, #8
     9dc:	4770      	bx	lr
     9de:	bf00      	nop
     9e0:	1fff1410 	.word	0x1fff1410

000009e4 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
     9e4:	b510      	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9e6:	4b0b      	ldr	r3, [pc, #44]	; (a14 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x30>)
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
     9e8:	6882      	ldr	r2, [r0, #8]
     9ea:	681b      	ldr	r3, [r3, #0]
void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
     9ec:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
     9ee:	b082      	sub	sp, #8
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
     9f0:	2400      	movs	r4, #0
     9f2:	9301      	str	r3, [sp, #4]
	return ret;
     9f4:	9b01      	ldr	r3, [sp, #4]
     9f6:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
     9f8:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
     9fa:	6083      	str	r3, [r0, #8]
        virtual int peek() { return usb_serial_peekchar(); }
     9fc:	f002 ff42 	bl	3884 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
     a00:	b2c0      	uxtb	r0, r0
     a02:	2864      	cmp	r0, #100	; 0x64
     a04:	d001      	beq.n	a0a <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x26>
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
	BreakStartMillis = DBG_Millis();
	digitalWriteMessageCheck();
}
     a06:	b002      	add	sp, #8
     a08:	bd10      	pop	{r4, pc}
     a0a:	f7ff ff99 	bl	940 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
     a0e:	b002      	add	sp, #8
     a10:	bd10      	pop	{r4, pc}
     a12:	bf00      	nop
     a14:	1fff1410 	.word	0x1fff1410

00000a18 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:
		}
	}
}

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
     a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a1c:	4b1b      	ldr	r3, [pc, #108]	; (a8c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a1e:	4c1c      	ldr	r4, [pc, #112]	; (a90 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
     a20:	681b      	ldr	r3, [r3, #0]
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a22:	4e1c      	ldr	r6, [pc, #112]	; (a94 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
     a24:	b082      	sub	sp, #8
     a26:	4605      	mov	r5, r0
     a28:	9301      	str	r3, [sp, #4]
     a2a:	4688      	mov	r8, r1
     a2c:	481a      	ldr	r0, [pc, #104]	; (a98 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
     a2e:	9f01      	ldr	r7, [sp, #4]
     a30:	2106      	movs	r1, #6
     a32:	f002 ff69 	bl	3908 <usb_serial_write>
     a36:	4641      	mov	r1, r8
     a38:	2300      	movs	r3, #0
     a3a:	220a      	movs	r2, #10
     a3c:	4620      	mov	r0, r4
     a3e:	f003 f8eb 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a42:	2103      	movs	r1, #3
     a44:	4815      	ldr	r0, [pc, #84]	; (a9c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
     a46:	f002 ff5f 	bl	3908 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     a4a:	4639      	mov	r1, r7
     a4c:	2300      	movs	r3, #0
     a4e:	220a      	movs	r2, #10
     a50:	4620      	mov	r0, r4
     a52:	f003 f8e1 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a56:	4630      	mov	r0, r6
     a58:	2101      	movs	r1, #1
     a5a:	f002 ff55 	bl	3908 <usb_serial_write>
     a5e:	68a9      	ldr	r1, [r5, #8]
     a60:	2300      	movs	r3, #0
     a62:	1a79      	subs	r1, r7, r1
     a64:	220a      	movs	r2, #10
     a66:	4620      	mov	r0, r4
     a68:	f003 f8d6 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a6c:	4630      	mov	r0, r6
     a6e:	2101      	movs	r1, #1
     a70:	f002 ff4a 	bl	3908 <usb_serial_write>
     a74:	68eb      	ldr	r3, [r5, #12]
     a76:	68a9      	ldr	r1, [r5, #8]
     a78:	4620      	mov	r0, r4
     a7a:	1ac9      	subs	r1, r1, r3
     a7c:	220a      	movs	r2, #10
     a7e:	2300      	movs	r3, #0
     a80:	f003 f8ca 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
     a84:	b002      	add	sp, #8
     a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a8a:	bf00      	nop
     a8c:	1fff1410 	.word	0x1fff1410
     a90:	1fff08bc 	.word	0x1fff08bc
     a94:	000057d4 	.word	0x000057d4
     a98:	000057c8 	.word	0x000057c8
     a9c:	000057d0 	.word	0x000057d0

00000aa0 <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
     aa0:	b508      	push	{r3, lr}
     aa2:	2106      	movs	r1, #6
     aa4:	4803      	ldr	r0, [pc, #12]	; (ab4 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
     aa6:	f002 ff2f 	bl	3908 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     aaa:	4803      	ldr	r0, [pc, #12]	; (ab8 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
     aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     ab0:	f003 b8a2 	b.w	3bf8 <Print::println()>
     ab4:	000057d8 	.word	0x000057d8
     ab8:	1fff08bc 	.word	0x1fff08bc

00000abc <VisualMicroDebug::OnBreakPointEnd()>:

void VisualMicroDebug::OnBreakPointEnd()
{
     abc:	b510      	push	{r4, lr}
     abe:	b082      	sub	sp, #8
     ac0:	4604      	mov	r4, r0
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
     ac2:	f002 fedf 	bl	3884 <usb_serial_peekchar>
void VisualMicroDebug::digitalWriteMessageCheck()
{
	char nxtChar = peek();
	char pinStr[4];
	int pinCharRead = 0;
	if (nxtChar == 'd') {
     ac6:	b2c0      	uxtb	r0, r0
     ac8:	2864      	cmp	r0, #100	; 0x64
     aca:	d006      	beq.n	ada <VisualMicroDebug::OnBreakPointEnd()+0x1e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     acc:	4b04      	ldr	r3, [pc, #16]	; (ae0 <VisualMicroDebug::OnBreakPointEnd()+0x24>)
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	9301      	str	r3, [sp, #4]
	return ret;
     ad2:	9b01      	ldr	r3, [sp, #4]

void VisualMicroDebug::OnBreakPointEnd()
{
	digitalWriteMessageCheck(); // Check for Digital Pin
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
     ad4:	60a3      	str	r3, [r4, #8]

}
     ad6:	b002      	add	sp, #8
     ad8:	bd10      	pop	{r4, pc}
     ada:	f7ff ff31 	bl	940 <VisualMicroDebug::digitalWriteMessageCheck() [clone .part.1]>
     ade:	e7f5      	b.n	acc <VisualMicroDebug::OnBreakPointEnd()+0x10>
     ae0:	1fff1410 	.word	0x1fff1410

00000ae4 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
     ae4:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ae6:	4a10      	ldr	r2, [pc, #64]	; (b28 <VisualMicroDebug::outPacketStart(bool)+0x44>)
     ae8:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DBT != VM_DBT_NET_UDP)
	if (!noWait)
     aea:	b9a1      	cbnz	r1, b16 <VisualMicroDebug::outPacketStart(bool)+0x32>
     aec:	6813      	ldr	r3, [r2, #0]
     aee:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
     af0:	6841      	ldr	r1, [r0, #4]
	return ret;
     af2:	9b00      	ldr	r3, [sp, #0]
     af4:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
     af6:	2963      	cmp	r1, #99	; 0x63
     af8:	d80d      	bhi.n	b16 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     afa:	6813      	ldr	r3, [r2, #0]
     afc:	9302      	str	r3, [sp, #8]
	return ret;
     afe:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     b00:	f104 0364 	add.w	r3, r4, #100	; 0x64
     b04:	1a59      	subs	r1, r3, r1
     b06:	e001      	b.n	b0c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     b08:	4299      	cmp	r1, r3
     b0a:	d304      	bcc.n	b16 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b0c:	6813      	ldr	r3, [r2, #0]
     b0e:	9301      	str	r3, [sp, #4]
	return ret;
     b10:	9b01      	ldr	r3, [sp, #4]
     b12:	429c      	cmp	r4, r3
     b14:	d9f8      	bls.n	b08 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b16:	6813      	ldr	r3, [r2, #0]
     b18:	9303      	str	r3, [sp, #12]
	return ret;
     b1a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     b1c:	6043      	str	r3, [r0, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
     b1e:	2001      	movs	r0, #1
     b20:	b005      	add	sp, #20
     b22:	f85d 4b04 	ldr.w	r4, [sp], #4
     b26:	4770      	bx	lr
     b28:	1fff1410 	.word	0x1fff1410

00000b2c <VisualMicroDebug::outPacketEnd()>:
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
     b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     b34:	f001 be8c 	b.w	2850 <delay>

00000b38 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
     b38:	2300      	movs	r3, #0
     b3a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
     b3c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
     b3e:	b171      	cbz	r1, b5e <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b40:	4807      	ldr	r0, [pc, #28]	; (b60 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
     b42:	b082      	sub	sp, #8
     b44:	6803      	ldr	r3, [r0, #0]
     b46:	9301      	str	r3, [sp, #4]
	return ret;
     b48:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     b4a:	4411      	add	r1, r2
     b4c:	e001      	b.n	b52 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     b4e:	4299      	cmp	r1, r3
     b50:	d304      	bcc.n	b5c <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b52:	6803      	ldr	r3, [r0, #0]
     b54:	9300      	str	r3, [sp, #0]
	return ret;
     b56:	9b00      	ldr	r3, [sp, #0]
     b58:	429a      	cmp	r2, r3
     b5a:	d9f8      	bls.n	b4e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
     b5c:	b002      	add	sp, #8
     b5e:	4770      	bx	lr
     b60:	1fff1410 	.word	0x1fff1410

00000b64 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     b64:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b66:	4c13      	ldr	r4, [pc, #76]	; (bb4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
     b68:	b085      	sub	sp, #20
     b6a:	6823      	ldr	r3, [r4, #0]
     b6c:	9303      	str	r3, [sp, #12]
	return ret;
     b6e:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
     b70:	6043      	str	r3, [r0, #4]
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
     b72:	460d      	mov	r5, r1
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b74:	4810      	ldr	r0, [pc, #64]	; (bb8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
     b76:	2106      	movs	r1, #6
     b78:	f002 fec6 	bl	3908 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b7c:	2300      	movs	r3, #0
     b7e:	220a      	movs	r2, #10
     b80:	4629      	mov	r1, r5
     b82:	480e      	ldr	r0, [pc, #56]	; (bbc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
     b84:	f003 f848 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b88:	2106      	movs	r1, #6
     b8a:	480d      	ldr	r0, [pc, #52]	; (bc0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
     b8c:	f002 febc 	bl	3908 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b90:	480a      	ldr	r0, [pc, #40]	; (bbc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
     b92:	f003 f831 	bl	3bf8 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b96:	6823      	ldr	r3, [r4, #0]
     b98:	9302      	str	r3, [sp, #8]
	return ret;
     b9a:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     b9c:	f102 0132 	add.w	r1, r2, #50	; 0x32
     ba0:	e001      	b.n	ba6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     ba2:	4299      	cmp	r1, r3
     ba4:	d304      	bcc.n	bb0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ba6:	6823      	ldr	r3, [r4, #0]
     ba8:	9301      	str	r3, [sp, #4]
	return ret;
     baa:	9b01      	ldr	r3, [sp, #4]
     bac:	429a      	cmp	r2, r3
     bae:	d9f8      	bls.n	ba2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);

#endif //#if defined(VM_DBT) 
}
     bb0:	b005      	add	sp, #20
     bb2:	bd30      	pop	{r4, r5, pc}
     bb4:	1fff1410 	.word	0x1fff1410
     bb8:	000057e0 	.word	0x000057e0
     bbc:	1fff08bc 	.word	0x1fff08bc
     bc0:	000057e8 	.word	0x000057e8

00000bc4 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DBT) //&& ( VM_DBT == VM_DBT_HARDWARESERIAL || VM_DBT == VM_DBT_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
     bc4:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
     bc6:	7e03      	ldrb	r3, [r0, #24]
     bc8:	b90b      	cbnz	r3, bce <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DBT) && (VM_DBT == VM_DBT_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
     bca:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
     bcc:	bd38      	pop	{r3, r4, r5, pc}
     bce:	460d      	mov	r5, r1
     bd0:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     bd2:	f002 fe6f 	bl	38b4 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
     bd6:	f010 0fff 	tst.w	r0, #255	; 0xff
     bda:	d101      	bne.n	be0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
     bdc:	2065      	movs	r0, #101	; 0x65
     bde:	bd38      	pop	{r3, r4, r5, pc}
     be0:	f002 fe68 	bl	38b4 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
     be4:	f010 0fff 	tst.w	r0, #255	; 0xff
     be8:	d0f8      	beq.n	bdc <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
     bea:	f002 fe27 	bl	383c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
     bee:	b2c0      	uxtb	r0, r0
     bf0:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
     bf4:	2b1e      	cmp	r3, #30
     bf6:	d8f3      	bhi.n	be0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
     bf8:	a201      	add	r2, pc, #4	; (adr r2, c00 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
     bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bfe:	bf00      	nop
     c00:	00000c89 	.word	0x00000c89
     c04:	00000be1 	.word	0x00000be1
     c08:	00000be1 	.word	0x00000be1
     c0c:	00000be1 	.word	0x00000be1
     c10:	00000be1 	.word	0x00000be1
     c14:	00000be1 	.word	0x00000be1
     c18:	00000be1 	.word	0x00000be1
     c1c:	00000be1 	.word	0x00000be1
     c20:	00000be1 	.word	0x00000be1
     c24:	00000be1 	.word	0x00000be1
     c28:	00000be1 	.word	0x00000be1
     c2c:	00000c7d 	.word	0x00000c7d
     c30:	00000be1 	.word	0x00000be1
     c34:	00000be1 	.word	0x00000be1
     c38:	00000be1 	.word	0x00000be1
     c3c:	00000be1 	.word	0x00000be1
     c40:	00000bcb 	.word	0x00000bcb
     c44:	00000be1 	.word	0x00000be1
     c48:	00000be1 	.word	0x00000be1
     c4c:	00000be1 	.word	0x00000be1
     c50:	00000be1 	.word	0x00000be1
     c54:	00000be1 	.word	0x00000be1
     c58:	00000be1 	.word	0x00000be1
     c5c:	00000be1 	.word	0x00000be1
     c60:	00000be1 	.word	0x00000be1
     c64:	00000bcb 	.word	0x00000bcb
     c68:	00000be1 	.word	0x00000be1
     c6c:	00000be1 	.word	0x00000be1
     c70:	00000be1 	.word	0x00000be1
     c74:	00000be1 	.word	0x00000be1
     c78:	00000bcd 	.word	0x00000bcd
		{

		case 'c':
			sendContinuedACK(breakPointId);
     c7c:	4620      	mov	r0, r4
     c7e:	4629      	mov	r1, r5
     c80:	f7ff ff70 	bl	b64 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
     c84:	2063      	movs	r0, #99	; 0x63
     c86:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
     c88:	2300      	movs	r3, #0
     c8a:	7623      	strb	r3, [r4, #24]
			return 'c';
     c8c:	2063      	movs	r0, #99	; 0x63
     c8e:	bd38      	pop	{r3, r4, r5, pc}

00000c90 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
     c90:	b570      	push	{r4, r5, r6, lr}
     c92:	4605      	mov	r5, r0
     c94:	b082      	sub	sp, #8
     c96:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
     c98:	b1c9      	cbz	r1, cce <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
     c9a:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     c9c:	4c0d      	ldr	r4, [pc, #52]	; (cd4 <VisualMicroDebug::start(bool, bool)+0x44>)
     c9e:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     ca0:	2100      	movs	r1, #0
     ca2:	4628      	mov	r0, r5
     ca4:	f7ff ff8e 	bl	bc4 <VisualMicroDebug::breakWait(unsigned char)>
     ca8:	2863      	cmp	r0, #99	; 0x63
     caa:	d010      	beq.n	cce <VisualMicroDebug::start(bool, bool)+0x3e>
     cac:	6823      	ldr	r3, [r4, #0]
     cae:	9301      	str	r3, [sp, #4]
	return ret;
     cb0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
     cb2:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     cb4:	6823      	ldr	r3, [r4, #0]
     cb6:	9300      	str	r3, [sp, #0]
	return ret;
     cb8:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
     cba:	429a      	cmp	r2, r3
     cbc:	d8f0      	bhi.n	ca0 <VisualMicroDebug::start(bool, bool)+0x10>
     cbe:	4299      	cmp	r1, r3
     cc0:	d2f8      	bcs.n	cb4 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
     cc2:	2100      	movs	r1, #0
     cc4:	4628      	mov	r0, r5
     cc6:	f7ff ff7d 	bl	bc4 <VisualMicroDebug::breakWait(unsigned char)>
     cca:	2863      	cmp	r0, #99	; 0x63
     ccc:	d1ee      	bne.n	cac <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
     cce:	762e      	strb	r6, [r5, #24]
#endif

}
     cd0:	b002      	add	sp, #8
     cd2:	bd70      	pop	{r4, r5, r6, pc}
     cd4:	1fff1410 	.word	0x1fff1410

00000cd8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
     cd8:	4b03      	ldr	r3, [pc, #12]	; (ce8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
     cda:	2200      	movs	r2, #0
     cdc:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
     cde:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
     ce0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
     ce2:	615a      	str	r2, [r3, #20]
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop
     ce8:	1fff13c4 	.word	0x1fff13c4

00000cec <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     cec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
     cf0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
     cf4:	429a      	cmp	r2, r3
     cf6:	d905      	bls.n	d04 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     cf8:	1c5a      	adds	r2, r3, #1
     cfa:	4403      	add	r3, r0
     cfc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
     d00:	7e18      	ldrb	r0, [r3, #24]
     d02:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     d04:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
     d08:	4770      	bx	lr
     d0a:	bf00      	nop

00000d0c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)>:
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
     d0c:	2b00      	cmp	r3, #0
     d0e:	f000 80d4 	beq.w	eba <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ae>

    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
     d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi;
     d16:	6a1e      	ldr	r6, [r3, #32]
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
    if (_spi == NULL)
     d18:	2e00      	cmp	r6, #0
     d1a:	f000 80ab 	beq.w	e74 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x168>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     d1e:	7af4      	ldrb	r4, [r6, #11]
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi;
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
     d20:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
     d24:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
     d28:	b304      	cbz	r4, d6c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x60>
			__disable_irq();
     d2a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     d2c:	7af3      	ldrb	r3, [r6, #11]
     d2e:	07dc      	lsls	r4, r3, #31
     d30:	d506      	bpl.n	d40 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     d32:	4c6a      	ldr	r4, [pc, #424]	; (edc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     d34:	68f3      	ldr	r3, [r6, #12]
     d36:	6825      	ldr	r5, [r4, #0]
     d38:	402b      	ands	r3, r5
     d3a:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     d3c:	6023      	str	r3, [r4, #0]
     d3e:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     d40:	079d      	lsls	r5, r3, #30
     d42:	d506      	bpl.n	d52 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     d44:	4c66      	ldr	r4, [pc, #408]	; (ee0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     d46:	6933      	ldr	r3, [r6, #16]
     d48:	6825      	ldr	r5, [r4, #0]
     d4a:	402b      	ands	r3, r5
     d4c:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     d4e:	6023      	str	r3, [r4, #0]
     d50:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     d52:	075c      	lsls	r4, r3, #29
     d54:	d506      	bpl.n	d64 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     d56:	4c63      	ldr	r4, [pc, #396]	; (ee4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
     d58:	6973      	ldr	r3, [r6, #20]
     d5a:	6825      	ldr	r5, [r4, #0]
     d5c:	402b      	ands	r3, r5
     d5e:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     d60:	6023      	str	r3, [r4, #0]
     d62:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     d64:	071b      	lsls	r3, r3, #28
     d66:	f100 80b1 	bmi.w	ecc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c0>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     d6a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     d6c:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     d6e:	68e3      	ldr	r3, [r4, #12]
     d70:	4599      	cmp	r9, r3
     d72:	d008      	beq.n	d86 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x7a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     d74:	4b5c      	ldr	r3, [pc, #368]	; (ee8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     d76:	6023      	str	r3, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     d78:	4d5c      	ldr	r5, [pc, #368]	; (eec <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     d7a:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     d7e:	f049 4380 	orr.w	r3, r9, #1073741824	; 0x40000000
     d82:	6123      	str	r3, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     d84:	6025      	str	r5, [r4, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     d86:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
     d8a:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     d8c:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     d8e:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     d90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d92:	2b00      	cmp	r3, #0
     d94:	dafc      	bge.n	d90 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     d96:	7af3      	ldrb	r3, [r6, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     d98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     d9a:	b1b3      	cbz	r3, dca <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
			if (interruptMasksUsed & 0x01) {
     d9c:	07dd      	lsls	r5, r3, #31
     d9e:	d503      	bpl.n	da8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x9c>
				NVIC_ISER0 = interruptSave[0];
     da0:	4b53      	ldr	r3, [pc, #332]	; (ef0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     da2:	69f4      	ldr	r4, [r6, #28]
     da4:	601c      	str	r4, [r3, #0]
     da6:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     da8:	079c      	lsls	r4, r3, #30
     daa:	d503      	bpl.n	db4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xa8>
				NVIC_ISER1 = interruptSave[1];
     dac:	4b51      	ldr	r3, [pc, #324]	; (ef4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     dae:	6a34      	ldr	r4, [r6, #32]
     db0:	601c      	str	r4, [r3, #0]
     db2:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     db4:	075d      	lsls	r5, r3, #29
     db6:	d503      	bpl.n	dc0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xb4>
				NVIC_ISER2 = interruptSave[2];
     db8:	4b4f      	ldr	r3, [pc, #316]	; (ef8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     dba:	6a74      	ldr	r4, [r6, #36]	; 0x24
     dbc:	601c      	str	r4, [r3, #0]
     dbe:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     dc0:	071c      	lsls	r4, r3, #28
     dc2:	d502      	bpl.n	dca <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
				NVIC_ISER3 = interruptSave[3];
     dc4:	4b4d      	ldr	r3, [pc, #308]	; (efc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f0>)
     dc6:	6ab4      	ldr	r4, [r6, #40]	; 0x28
     dc8:	601c      	str	r4, [r3, #0]
     dca:	460d      	mov	r5, r1
     dcc:	4682      	mov	sl, r0
    // 'Kickstart' the SPI hardware. This is a fairly high amount of overhead, but it guarantees that the lines will start in the correct states
    _spi->beginTransaction(spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    digitalWrite(cs, LOW);
     dce:	2100      	movs	r1, #0
     dd0:	4638      	mov	r0, r7
     dd2:	4690      	mov	r8, r2
     dd4:	f001 fd30 	bl	2838 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     dd8:	7af3      	ldrb	r3, [r6, #11]
     dda:	b1fb      	cbz	r3, e1c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x110>
			__disable_irq();
     ddc:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     dde:	7af3      	ldrb	r3, [r6, #11]
     de0:	07d8      	lsls	r0, r3, #31
     de2:	d506      	bpl.n	df2 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     de4:	4a3d      	ldr	r2, [pc, #244]	; (edc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     de6:	68f3      	ldr	r3, [r6, #12]
     de8:	6811      	ldr	r1, [r2, #0]
     dea:	400b      	ands	r3, r1
     dec:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     dee:	6013      	str	r3, [r2, #0]
     df0:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     df2:	0799      	lsls	r1, r3, #30
     df4:	d506      	bpl.n	e04 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     df6:	4a3a      	ldr	r2, [pc, #232]	; (ee0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     df8:	6933      	ldr	r3, [r6, #16]
     dfa:	6811      	ldr	r1, [r2, #0]
     dfc:	400b      	ands	r3, r1
     dfe:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     e00:	6013      	str	r3, [r2, #0]
     e02:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     e04:	075a      	lsls	r2, r3, #29
     e06:	d506      	bpl.n	e16 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     e08:	4a36      	ldr	r2, [pc, #216]	; (ee4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
     e0a:	6973      	ldr	r3, [r6, #20]
     e0c:	6811      	ldr	r1, [r2, #0]
     e0e:	400b      	ands	r3, r1
     e10:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     e12:	6013      	str	r3, [r2, #0]
     e14:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     e16:	071c      	lsls	r4, r3, #28
     e18:	d451      	bmi.n	ebe <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1b2>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     e1a:	b662      	cpsie	i
     e1c:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     e1e:	68e3      	ldr	r3, [r4, #12]
     e20:	4599      	cmp	r9, r3
     e22:	d008      	beq.n	e36 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x12a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     e24:	4a30      	ldr	r2, [pc, #192]	; (ee8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     e26:	6022      	str	r2, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     e28:	4b30      	ldr	r3, [pc, #192]	; (eec <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     e2a:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     e2e:	f049 4280 	orr.w	r2, r9, #1073741824	; 0x40000000
     e32:	6122      	str	r2, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     e34:	6023      	str	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     e36:	f04a 0080 	orr.w	r0, sl, #128	; 0x80
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
     e40:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e44:	2b00      	cmp	r3, #0
     e46:	dafc      	bge.n	e42 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x136>
		return port().POPR;
     e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    //   delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x80));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's stupid implementation
    for (uint32_t indi = 0; indi < len; indi++)
     e4a:	f1b8 0f00 	cmp.w	r8, #0
     e4e:	d014      	beq.n	e7a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x16e>
     e50:	4629      	mov	r1, r5
     e52:	eb05 0208 	add.w	r2, r5, r8
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
     e56:	2000      	movs	r0, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     e58:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
     e5c:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     e5e:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e62:	2b00      	cmp	r3, #0
     e64:	dafc      	bge.n	e60 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x154>
		return port().POPR;
     e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    {
        *(buff + indi) = _spi->transfer(0x00);
     e68:	f801 3b01 	strb.w	r3, [r1], #1
    digitalWrite(cs, LOW);
    //   delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x80));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's stupid implementation
    for (uint32_t indi = 0; indi < len; indi++)
     e6c:	428a      	cmp	r2, r1
     e6e:	d004      	beq.n	e7a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x16e>
     e70:	6834      	ldr	r4, [r6, #0]
     e72:	e7f3      	b.n	e5c <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x150>

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     e74:	2003      	movs	r0, #3
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     e7a:	7af3      	ldrb	r3, [r6, #11]
     e7c:	b1b3      	cbz	r3, eac <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a0>
			if (interruptMasksUsed & 0x01) {
     e7e:	07d8      	lsls	r0, r3, #31
     e80:	d503      	bpl.n	e8a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x17e>
				NVIC_ISER0 = interruptSave[0];
     e82:	4b1b      	ldr	r3, [pc, #108]	; (ef0 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     e84:	69f2      	ldr	r2, [r6, #28]
     e86:	601a      	str	r2, [r3, #0]
     e88:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     e8a:	0799      	lsls	r1, r3, #30
     e8c:	d503      	bpl.n	e96 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x18a>
				NVIC_ISER1 = interruptSave[1];
     e8e:	4b19      	ldr	r3, [pc, #100]	; (ef4 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     e90:	6a32      	ldr	r2, [r6, #32]
     e92:	601a      	str	r2, [r3, #0]
     e94:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     e96:	075a      	lsls	r2, r3, #29
     e98:	d503      	bpl.n	ea2 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x196>
				NVIC_ISER2 = interruptSave[2];
     e9a:	4b17      	ldr	r3, [pc, #92]	; (ef8 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
     e9c:	6a72      	ldr	r2, [r6, #36]	; 0x24
     e9e:	601a      	str	r2, [r3, #0]
     ea0:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     ea2:	071b      	lsls	r3, r3, #28
     ea4:	d502      	bpl.n	eac <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a0>
				NVIC_ISER3 = interruptSave[3];
     ea6:	4b15      	ldr	r3, [pc, #84]	; (efc <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f0>)
     ea8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     eaa:	601a      	str	r2, [r3, #0]
    {
        *(buff + indi) = _spi->transfer(0x00);
    }
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);
     eac:	4638      	mov	r0, r7
     eae:	2101      	movs	r1, #1
     eb0:	f001 fcc2 	bl	2838 <digitalWrite>

    return ICM_20948_Stat_Ok;
     eb4:	2000      	movs	r0, #0
     eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
     eba:	2003      	movs	r0, #3
    _spi->endTransaction();
    //   delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
     ebc:	4770      	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     ebe:	4a10      	ldr	r2, [pc, #64]	; (f00 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f4>)
     ec0:	69b3      	ldr	r3, [r6, #24]
     ec2:	6811      	ldr	r1, [r2, #0]
     ec4:	400b      	ands	r3, r1
     ec6:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     ec8:	6013      	str	r3, [r2, #0]
     eca:	e7a6      	b.n	e1a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10e>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     ecc:	4c0c      	ldr	r4, [pc, #48]	; (f00 <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1f4>)
     ece:	69b3      	ldr	r3, [r6, #24]
     ed0:	6825      	ldr	r5, [r4, #0]
     ed2:	402b      	ands	r3, r5
     ed4:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
     ed6:	6023      	str	r3, [r4, #0]
     ed8:	e747      	b.n	d6a <ICM_20948_read_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x5e>
     eda:	bf00      	nop
     edc:	e000e180 	.word	0xe000e180
     ee0:	e000e184 	.word	0xe000e184
     ee4:	e000e188 	.word	0xe000e188
     ee8:	003f4001 	.word	0x003f4001
     eec:	803f0000 	.word	0x803f0000
     ef0:	e000e100 	.word	0xe000e100
     ef4:	e000e104 	.word	0xe000e104
     ef8:	e000e108 	.word	0xe000e108
     efc:	e000e10c 	.word	0xe000e10c
     f00:	e000e18c 	.word	0xe000e18c

00000f04 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)>:
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
     f04:	2b00      	cmp	r3, #0
     f06:	f000 80d1 	beq.w	10ac <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a8>
    }
    return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
     f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi; // Cast user field to ICM_20948_SPI type and extract the SPI interface pointer
     f0e:	6a1e      	ldr	r6, [r3, #32]
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
    if (_spi == NULL)
     f10:	2e00      	cmp	r6, #0
     f12:	f000 80c8 	beq.w	10a6 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1a2>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     f16:	7af4      	ldrb	r4, [r6, #11]
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    }
    SPIClass *_spi = ((ICM_20948_SPI *)user)->_spi; // Cast user field to ICM_20948_SPI type and extract the SPI interface pointer
    uint8_t cs = ((ICM_20948_SPI *)user)->_cs;
     f18:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
    SPISettings spisettings = ((ICM_20948_SPI *)user)->_spisettings;
     f1c:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
     f20:	b304      	cbz	r4, f64 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x60>
			__disable_irq();
     f22:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     f24:	7af3      	ldrb	r3, [r6, #11]
     f26:	07dc      	lsls	r4, r3, #31
     f28:	d506      	bpl.n	f38 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x34>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     f2a:	4c68      	ldr	r4, [pc, #416]	; (10cc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c8>)
     f2c:	68f3      	ldr	r3, [r6, #12]
     f2e:	6825      	ldr	r5, [r4, #0]
     f30:	402b      	ands	r3, r5
     f32:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     f34:	6023      	str	r3, [r4, #0]
     f36:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     f38:	079d      	lsls	r5, r3, #30
     f3a:	d506      	bpl.n	f4a <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x46>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     f3c:	4c64      	ldr	r4, [pc, #400]	; (10d0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1cc>)
     f3e:	6933      	ldr	r3, [r6, #16]
     f40:	6825      	ldr	r5, [r4, #0]
     f42:	402b      	ands	r3, r5
     f44:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     f46:	6023      	str	r3, [r4, #0]
     f48:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     f4a:	075c      	lsls	r4, r3, #29
     f4c:	d506      	bpl.n	f5c <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     f4e:	4c61      	ldr	r4, [pc, #388]	; (10d4 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
     f50:	6973      	ldr	r3, [r6, #20]
     f52:	6825      	ldr	r5, [r4, #0]
     f54:	402b      	ands	r3, r5
     f56:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
     f58:	6023      	str	r3, [r4, #0]
     f5a:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     f5c:	071b      	lsls	r3, r3, #28
     f5e:	f100 80ae 	bmi.w	10be <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ba>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
     f62:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
     f64:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
     f66:	68e3      	ldr	r3, [r4, #12]
     f68:	4599      	cmp	r9, r3
     f6a:	d008      	beq.n	f7e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x7a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
     f6c:	4b5a      	ldr	r3, [pc, #360]	; (10d8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
     f6e:	6023      	str	r3, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     f70:	4d5a      	ldr	r5, [pc, #360]	; (10dc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
     f72:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
     f76:	f049 4380 	orr.w	r3, r9, #1073741824	; 0x40000000
     f7a:	6123      	str	r3, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
     f7c:	6025      	str	r5, [r4, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f7e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
     f82:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
     f84:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
     f86:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
     f88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     f8a:	2b00      	cmp	r3, #0
     f8c:	dafc      	bge.n	f88 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     f8e:	7af3      	ldrb	r3, [r6, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
     f90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     f92:	b1b3      	cbz	r3, fc2 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
			if (interruptMasksUsed & 0x01) {
     f94:	07dd      	lsls	r5, r3, #31
     f96:	d503      	bpl.n	fa0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x9c>
				NVIC_ISER0 = interruptSave[0];
     f98:	4b51      	ldr	r3, [pc, #324]	; (10e0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
     f9a:	69f4      	ldr	r4, [r6, #28]
     f9c:	601c      	str	r4, [r3, #0]
     f9e:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     fa0:	079c      	lsls	r4, r3, #30
     fa2:	d503      	bpl.n	fac <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xa8>
				NVIC_ISER1 = interruptSave[1];
     fa4:	4b4f      	ldr	r3, [pc, #316]	; (10e4 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
     fa6:	6a34      	ldr	r4, [r6, #32]
     fa8:	601c      	str	r4, [r3, #0]
     faa:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     fac:	075d      	lsls	r5, r3, #29
     fae:	d503      	bpl.n	fb8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xb4>
				NVIC_ISER2 = interruptSave[2];
     fb0:	4b4d      	ldr	r3, [pc, #308]	; (10e8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
     fb2:	6a74      	ldr	r4, [r6, #36]	; 0x24
     fb4:	601c      	str	r4, [r3, #0]
     fb6:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
     fb8:	071c      	lsls	r4, r3, #28
     fba:	d502      	bpl.n	fc2 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xbe>
				NVIC_ISER3 = interruptSave[3];
     fbc:	4b4b      	ldr	r3, [pc, #300]	; (10ec <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
     fbe:	6ab4      	ldr	r4, [r6, #40]	; 0x28
     fc0:	601c      	str	r4, [r3, #0]
     fc2:	460d      	mov	r5, r1
     fc4:	4682      	mov	sl, r0
    // 'Kickstart' the SPI hardware. This is a fairly high amount of overhead, but it guarantees that the lines will start in the correct states even when sharing the SPI bus with devices that use other modes
    _spi->beginTransaction(spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    digitalWrite(cs, LOW);
     fc6:	2100      	movs	r1, #0
     fc8:	4638      	mov	r0, r7
     fca:	4690      	mov	r8, r2
     fcc:	f001 fc34 	bl	2838 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     fd0:	7af3      	ldrb	r3, [r6, #11]
     fd2:	b1fb      	cbz	r3, 1014 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x110>
			__disable_irq();
     fd4:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
     fd6:	7af3      	ldrb	r3, [r6, #11]
     fd8:	07d8      	lsls	r0, r3, #31
     fda:	d506      	bpl.n	fea <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xe6>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     fdc:	4a3b      	ldr	r2, [pc, #236]	; (10cc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1c8>)
     fde:	68f3      	ldr	r3, [r6, #12]
     fe0:	6811      	ldr	r1, [r2, #0]
     fe2:	400b      	ands	r3, r1
     fe4:	61f3      	str	r3, [r6, #28]
				NVIC_ICER0 = interruptSave[0];
     fe6:	6013      	str	r3, [r2, #0]
     fe8:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
     fea:	0799      	lsls	r1, r3, #30
     fec:	d506      	bpl.n	ffc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0xf8>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     fee:	4a38      	ldr	r2, [pc, #224]	; (10d0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1cc>)
     ff0:	6933      	ldr	r3, [r6, #16]
     ff2:	6811      	ldr	r1, [r2, #0]
     ff4:	400b      	ands	r3, r1
     ff6:	6233      	str	r3, [r6, #32]
				NVIC_ICER1 = interruptSave[1];
     ff8:	6013      	str	r3, [r2, #0]
     ffa:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
     ffc:	075a      	lsls	r2, r3, #29
     ffe:	d506      	bpl.n	100e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1000:	4a34      	ldr	r2, [pc, #208]	; (10d4 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d0>)
    1002:	6973      	ldr	r3, [r6, #20]
    1004:	6811      	ldr	r1, [r2, #0]
    1006:	400b      	ands	r3, r1
    1008:	6273      	str	r3, [r6, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    100a:	6013      	str	r3, [r2, #0]
    100c:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    100e:	071c      	lsls	r4, r3, #28
    1010:	d44e      	bmi.n	10b0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ac>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    1012:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1014:	6834      	ldr	r4, [r6, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    1016:	68e3      	ldr	r3, [r4, #12]
    1018:	4599      	cmp	r9, r3
    101a:	d008      	beq.n	102e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x12a>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    101c:	4a2e      	ldr	r2, [pc, #184]	; (10d8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d4>)
    101e:	6022      	str	r2, [r4, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1020:	4b2e      	ldr	r3, [pc, #184]	; (10dc <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1d8>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    1022:	f8c4 900c 	str.w	r9, [r4, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1026:	f049 4280 	orr.w	r2, r9, #1073741824	; 0x40000000
    102a:	6122      	str	r2, [r4, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    102c:	6023      	str	r3, [r4, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
    102e:	f00a 007f 	and.w	r0, sl, #127	; 0x7f
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    1036:	62e3      	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
    1038:	6360      	str	r0, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    103a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    103c:	2b00      	cmp	r3, #0
    103e:	dafc      	bge.n	103a <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x136>
		return port().POPR;
    1040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    // delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x00));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's poor implementation
    for (uint32_t indi = 0; indi < len; indi++)
    1042:	f1b8 0f00 	cmp.w	r8, #0
    1046:	d00e      	beq.n	1066 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x162>
    1048:	4629      	mov	r1, r5
    104a:	eb05 0208 	add.w	r2, r5, r8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    104e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    {
        _spi->transfer(*(data + indi));
    1052:	f811 3b01 	ldrb.w	r3, [r1], #1
    1056:	62e0      	str	r0, [r4, #44]	; 0x2c
		port().PUSHR = data;
    1058:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    105a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    105c:	2b00      	cmp	r3, #0
    105e:	dafc      	bge.n	105a <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x156>
    digitalWrite(cs, LOW);
    // delayMicroseconds(5);
    _spi->beginTransaction(spisettings);
    _spi->transfer(((reg & 0x7F) | 0x00));
    //  SPI.transfer(data, len); // Can't do this thanks to Arduino's poor implementation
    for (uint32_t indi = 0; indi < len; indi++)
    1060:	428a      	cmp	r2, r1
		return port().POPR;
    1062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1064:	d1f5      	bne.n	1052 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x14e>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1066:	7af3      	ldrb	r3, [r6, #11]
    1068:	b1b3      	cbz	r3, 1098 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x194>
			if (interruptMasksUsed & 0x01) {
    106a:	07d8      	lsls	r0, r3, #31
    106c:	d503      	bpl.n	1076 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x172>
				NVIC_ISER0 = interruptSave[0];
    106e:	4b1c      	ldr	r3, [pc, #112]	; (10e0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1dc>)
    1070:	69f2      	ldr	r2, [r6, #28]
    1072:	601a      	str	r2, [r3, #0]
    1074:	7af3      	ldrb	r3, [r6, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1076:	0799      	lsls	r1, r3, #30
    1078:	d503      	bpl.n	1082 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x17e>
				NVIC_ISER1 = interruptSave[1];
    107a:	4b1a      	ldr	r3, [pc, #104]	; (10e4 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e0>)
    107c:	6a32      	ldr	r2, [r6, #32]
    107e:	601a      	str	r2, [r3, #0]
    1080:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1082:	075a      	lsls	r2, r3, #29
    1084:	d503      	bpl.n	108e <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x18a>
				NVIC_ISER2 = interruptSave[2];
    1086:	4b18      	ldr	r3, [pc, #96]	; (10e8 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e4>)
    1088:	6a72      	ldr	r2, [r6, #36]	; 0x24
    108a:	601a      	str	r2, [r3, #0]
    108c:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    108e:	071b      	lsls	r3, r3, #28
    1090:	d502      	bpl.n	1098 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x194>
				NVIC_ISER3 = interruptSave[3];
    1092:	4b16      	ldr	r3, [pc, #88]	; (10ec <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1e8>)
    1094:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1096:	601a      	str	r2, [r3, #0]
    {
        _spi->transfer(*(data + indi));
    }
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);
    1098:	4638      	mov	r0, r7
    109a:	2101      	movs	r1, #1
    109c:	f001 fbcc 	bl	2838 <digitalWrite>

    return ICM_20948_Stat_Ok;
    10a0:	2000      	movs	r0, #0
    10a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    10a6:	2003      	movs	r0, #3
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
    10a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
    if (user == NULL)
    {
        return ICM_20948_Stat_ParamErr;
    10ac:	2003      	movs	r0, #3
    _spi->endTransaction();
    // delayMicroseconds(5);
    digitalWrite(cs, HIGH);

    return ICM_20948_Stat_Ok;
}
    10ae:	4770      	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    10b0:	4a0f      	ldr	r2, [pc, #60]	; (10f0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
    10b2:	69b3      	ldr	r3, [r6, #24]
    10b4:	6811      	ldr	r1, [r2, #0]
    10b6:	400b      	ands	r3, r1
    10b8:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    10ba:	6013      	str	r3, [r2, #0]
    10bc:	e7a9      	b.n	1012 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x10e>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    10be:	4c0c      	ldr	r4, [pc, #48]	; (10f0 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x1ec>)
    10c0:	69b3      	ldr	r3, [r6, #24]
    10c2:	6825      	ldr	r5, [r4, #0]
    10c4:	402b      	ands	r3, r5
    10c6:	62b3      	str	r3, [r6, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    10c8:	6023      	str	r3, [r4, #0]
    10ca:	e74a      	b.n	f62 <ICM_20948_write_SPI(unsigned char, unsigned char*, unsigned long, void*)+0x5e>
    10cc:	e000e180 	.word	0xe000e180
    10d0:	e000e184 	.word	0xe000e184
    10d4:	e000e188 	.word	0xe000e188
    10d8:	003f4001 	.word	0x003f4001
    10dc:	803f0000 	.word	0x803f0000
    10e0:	e000e100 	.word	0xe000e100
    10e4:	e000e104 	.word	0xe000e104
    10e8:	e000e108 	.word	0xe000e108
    10ec:	e000e10c 	.word	0xe000e10c
    10f0:	e000e18c 	.word	0xe000e18c

000010f4 <ICM_20948::getAGMT()>:
ICM_20948::ICM_20948()
{
}

ICM_20948_AGMT_t ICM_20948::getAGMT(void)
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	460e      	mov	r6, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
    10f8:	1d0c      	adds	r4, r1, #4
ICM_20948::ICM_20948()
{
}

ICM_20948_AGMT_t ICM_20948::getAGMT(void)
{
    10fa:	4605      	mov	r5, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
    10fc:	4621      	mov	r1, r4
    10fe:	4630      	mov	r0, r6
    1100:	f000 ff5e 	bl	1fc0 <ICM_20948_get_agmt>
    1104:	7730      	strb	r0, [r6, #28]

    return agmt;
    1106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1108:	6028      	str	r0, [r5, #0]
    110a:	6069      	str	r1, [r5, #4]
    110c:	cc03      	ldmia	r4!, {r0, r1}
    110e:	60aa      	str	r2, [r5, #8]
    1110:	6128      	str	r0, [r5, #16]
    1112:	60eb      	str	r3, [r5, #12]
    1114:	6169      	str	r1, [r5, #20]
}
    1116:	4628      	mov	r0, r5
    1118:	bd70      	pop	{r4, r5, r6, pc}
    111a:	bf00      	nop

0000111c <ICM_20948::magX()>:

float ICM_20948::magX(void)
{
    return getMagUT(agmt.mag.axes.x);
    111c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    1120:	eddf 7a04 	vldr	s15, [pc, #16]	; 1134 <ICM_20948::magX()+0x18>
    1124:	ee00 3a10 	vmov	s0, r3
    1128:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
    112c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1130:	4770      	bx	lr
    1132:	bf00      	nop
    1134:	3e19999a 	.word	0x3e19999a

00001138 <ICM_20948::magY()>:

float ICM_20948::magY(void)
{
    return getMagUT(agmt.mag.axes.y);
    1138:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    113c:	eddf 7a04 	vldr	s15, [pc, #16]	; 1150 <ICM_20948::magY()+0x18>
    1140:	ee00 3a10 	vmov	s0, r3
    1144:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
    1148:	ee20 0a27 	vmul.f32	s0, s0, s15
    114c:	4770      	bx	lr
    114e:	bf00      	nop
    1150:	3e19999a 	.word	0x3e19999a

00001154 <ICM_20948::magZ()>:

float ICM_20948::magZ(void)
{
    return getMagUT(agmt.mag.axes.z);
    1154:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
    1158:	eddf 7a04 	vldr	s15, [pc, #16]	; 116c <ICM_20948::magZ()+0x18>
    115c:	ee00 3a10 	vmov	s0, r3
    1160:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
    1164:	ee20 0a27 	vmul.f32	s0, s0, s15
    1168:	4770      	bx	lr
    116a:	bf00      	nop
    116c:	3e19999a 	.word	0x3e19999a

00001170 <ICM_20948::getAccMG(short)>:
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
    switch (agmt.fss.a)
    1170:	7e03      	ldrb	r3, [r0, #24]
{
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
    1172:	b082      	sub	sp, #8
    switch (agmt.fss.a)
    1174:	f003 0303 	and.w	r3, r3, #3
{
    return getAccMG(agmt.acc.axes.z);
}

float ICM_20948::getAccMG(int16_t axis_val)
{
    1178:	9101      	str	r1, [sp, #4]
    switch (agmt.fss.a)
    117a:	2b03      	cmp	r3, #3
    117c:	d82b      	bhi.n	11d6 <ICM_20948::getAccMG(short)+0x66>
    117e:	e8df f003 	tbb	[pc, r3]
    1182:	1620      	.short	0x1620
    1184:	020c      	.short	0x020c
        break;
    case 2:
        return (((float)axis_val) / 4.096);
        break;
    case 3:
        return (((float)axis_val) / 2.048);
    1186:	eddd 7a01 	vldr	s15, [sp, #4]
    118a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 11dc <ICM_20948::getAccMG(short)+0x6c>
    118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1192:	ee87 0a87 	vdiv.f32	s0, s15, s14
        break;
    default:
        return 0;
        break;
    }
}
    1196:	b002      	add	sp, #8
    1198:	4770      	bx	lr
        break;
    case 1:
        return (((float)axis_val) / 8.192);
        break;
    case 2:
        return (((float)axis_val) / 4.096);
    119a:	eddd 7a01 	vldr	s15, [sp, #4]
    119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    11a2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 11e0 <ICM_20948::getAccMG(short)+0x70>
    11a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    11aa:	b002      	add	sp, #8
    11ac:	4770      	bx	lr
    {
    case 0:
        return (((float)axis_val) / 16.384);
        break;
    case 1:
        return (((float)axis_val) / 8.192);
    11ae:	eddd 7a01 	vldr	s15, [sp, #4]
    11b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    11b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 11e4 <ICM_20948::getAccMG(short)+0x74>
    11ba:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    11be:	b002      	add	sp, #8
    11c0:	4770      	bx	lr
float ICM_20948::getAccMG(int16_t axis_val)
{
    switch (agmt.fss.a)
    {
    case 0:
        return (((float)axis_val) / 16.384);
    11c2:	eddd 7a01 	vldr	s15, [sp, #4]
    11c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    11ca:	eddf 7a07 	vldr	s15, [pc, #28]	; 11e8 <ICM_20948::getAccMG(short)+0x78>
    11ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    11d2:	b002      	add	sp, #8
    11d4:	4770      	bx	lr
        break;
    case 3:
        return (((float)axis_val) / 2.048);
        break;
    default:
        return 0;
    11d6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 11ec <ICM_20948::getAccMG(short)+0x7c>
    11da:	e7dc      	b.n	1196 <ICM_20948::getAccMG(short)+0x26>
    11dc:	4003126f 	.word	0x4003126f
    11e0:	4083126f 	.word	0x4083126f
    11e4:	4103126f 	.word	0x4103126f
    11e8:	4183126f 	.word	0x4183126f
    11ec:	00000000 	.word	0x00000000

000011f0 <ICM_20948::accX()>:
    return (((float)axis_val) * 0.15);
}

float ICM_20948::accX(void)
{
    return getAccMG(agmt.acc.axes.x);
    11f0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    11f4:	f7ff bfbc 	b.w	1170 <ICM_20948::getAccMG(short)>

000011f8 <ICM_20948::accY()>:
}

float ICM_20948::accY(void)
{
    return getAccMG(agmt.acc.axes.y);
    11f8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    11fc:	f7ff bfb8 	b.w	1170 <ICM_20948::getAccMG(short)>

00001200 <ICM_20948::accZ()>:
}

float ICM_20948::accZ(void)
{
    return getAccMG(agmt.acc.axes.z);
    1200:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    1204:	f7ff bfb4 	b.w	1170 <ICM_20948::getAccMG(short)>

00001208 <ICM_20948::getGyrDPS(short)>:
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
    switch (agmt.fss.g)
    1208:	7e03      	ldrb	r3, [r0, #24]
{
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
    120a:	b082      	sub	sp, #8
    switch (agmt.fss.g)
    120c:	f3c3 0381 	ubfx	r3, r3, #2, #2
{
    return getGyrDPS(agmt.gyr.axes.z);
}

float ICM_20948::getGyrDPS(int16_t axis_val)
{
    1210:	9101      	str	r1, [sp, #4]
    switch (agmt.fss.g)
    1212:	2b03      	cmp	r3, #3
    1214:	d82b      	bhi.n	126e <ICM_20948::getGyrDPS(short)+0x66>
    1216:	e8df f003 	tbb	[pc, r3]
    121a:	1620      	.short	0x1620
    121c:	020c      	.short	0x020c
        break;
    case 2:
        return (((float)axis_val) / 32.8);
        break;
    case 3:
        return (((float)axis_val) / 16.4);
    121e:	eddd 7a01 	vldr	s15, [sp, #4]
    1222:	ed9f 7a14 	vldr	s14, [pc, #80]	; 1274 <ICM_20948::getGyrDPS(short)+0x6c>
    1226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    122a:	ee87 0a87 	vdiv.f32	s0, s15, s14
        break;
    default:
        return 0;
        break;
    }
}
    122e:	b002      	add	sp, #8
    1230:	4770      	bx	lr
        break;
    case 1:
        return (((float)axis_val) / 65.5);
        break;
    case 2:
        return (((float)axis_val) / 32.8);
    1232:	eddd 7a01 	vldr	s15, [sp, #4]
    1236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    123a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 1278 <ICM_20948::getGyrDPS(short)+0x70>
    123e:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    1242:	b002      	add	sp, #8
    1244:	4770      	bx	lr
    {
    case 0:
        return (((float)axis_val) / 131);
        break;
    case 1:
        return (((float)axis_val) / 65.5);
    1246:	eddd 7a01 	vldr	s15, [sp, #4]
    124a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    124e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 127c <ICM_20948::getGyrDPS(short)+0x74>
    1252:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    1256:	b002      	add	sp, #8
    1258:	4770      	bx	lr
float ICM_20948::getGyrDPS(int16_t axis_val)
{
    switch (agmt.fss.g)
    {
    case 0:
        return (((float)axis_val) / 131);
    125a:	eddd 7a01 	vldr	s15, [sp, #4]
    125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1262:	eddf 7a07 	vldr	s15, [pc, #28]	; 1280 <ICM_20948::getGyrDPS(short)+0x78>
    1266:	ee87 0a27 	vdiv.f32	s0, s14, s15
        break;
    default:
        return 0;
        break;
    }
}
    126a:	b002      	add	sp, #8
    126c:	4770      	bx	lr
        break;
    case 3:
        return (((float)axis_val) / 16.4);
        break;
    default:
        return 0;
    126e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1284 <ICM_20948::getGyrDPS(short)+0x7c>
    1272:	e7dc      	b.n	122e <ICM_20948::getGyrDPS(short)+0x26>
    1274:	41833333 	.word	0x41833333
    1278:	42033333 	.word	0x42033333
    127c:	42830000 	.word	0x42830000
    1280:	43030000 	.word	0x43030000
    1284:	00000000 	.word	0x00000000

00001288 <ICM_20948::gyrX()>:
    }
}

float ICM_20948::gyrX(void)
{
    return getGyrDPS(agmt.gyr.axes.x);
    1288:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
    128c:	f7ff bfbc 	b.w	1208 <ICM_20948::getGyrDPS(short)>

00001290 <ICM_20948::gyrY()>:
}

float ICM_20948::gyrY(void)
{
    return getGyrDPS(agmt.gyr.axes.y);
    1290:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    1294:	f7ff bfb8 	b.w	1208 <ICM_20948::getGyrDPS(short)>

00001298 <ICM_20948::gyrZ()>:
}

float ICM_20948::gyrZ(void)
{
    return getGyrDPS(agmt.gyr.axes.z);
    1298:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
    129c:	f7ff bfb4 	b.w	1208 <ICM_20948::getGyrDPS(short)>

000012a0 <ICM_20948::temp()>:
    }
}

float ICM_20948::temp(void)
{
    return getTempC(agmt.tmp.val);
    12a0:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
    12a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 12c4 <ICM_20948::temp()+0x24>
    12a8:	ee07 3a90 	vmov	s15, r3
    12ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    12b0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    12b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    12b8:	ee87 0aa6 	vdiv.f32	s0, s15, s13
}
    12bc:	ee30 0a07 	vadd.f32	s0, s0, s14
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop
    12c4:	43a6ef5c 	.word	0x43a6ef5c

000012c8 <ICM_20948::statusString(ICM_20948_Status_e)>:
}

const char *ICM_20948::statusString(ICM_20948_Status_e stat)
{
    ICM_20948_Status_e val;
    if (stat == ICM_20948_Stat_NUM)
    12c8:	2908      	cmp	r1, #8
    {
        val = status;
    12ca:	bf08      	it	eq
    12cc:	7f01      	ldrbeq	r1, [r0, #28]
    12ce:	2907      	cmp	r1, #7
    12d0:	bf9a      	itte	ls
    12d2:	4b02      	ldrls	r3, [pc, #8]	; (12dc <ICM_20948::statusString(ICM_20948_Status_e)+0x14>)
    12d4:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
    return (((float)val - 21) / 333.87) + 21;
}

const char *ICM_20948::statusString(ICM_20948_Status_e stat)
{
    12d8:	4801      	ldrhi	r0, [pc, #4]	; (12e0 <ICM_20948::statusString(ICM_20948_Status_e)+0x18>)
    default:
        return "Unknown Status";
        break;
    }
    return "None";
}
    12da:	4770      	bx	lr
    12dc:	00005838 	.word	0x00005838
    12e0:	00005858 	.word	0x00005858

000012e4 <ICM_20948::dataReady()>:
    status = ICM_20948_check_id(&_device);
    return status;
}

bool ICM_20948::dataReady(void)
{
    12e4:	b510      	push	{r4, lr}
    12e6:	4604      	mov	r4, r0
    status = ICM_20948_data_ready(&_device);
    12e8:	f000 fb40 	bl	196c <ICM_20948_data_ready>
    12ec:	4603      	mov	r3, r0
    if (status == ICM_20948_Stat_Ok)
    {
        return true;
    }
    return false;
}
    12ee:	fab0 f080 	clz	r0, r0
    return status;
}

bool ICM_20948::dataReady(void)
{
    status = ICM_20948_data_ready(&_device);
    12f2:	7723      	strb	r3, [r4, #28]
    if (status == ICM_20948_Stat_Ok)
    {
        return true;
    }
    return false;
}
    12f4:	0940      	lsrs	r0, r0, #5
    12f6:	bd10      	pop	{r4, pc}

000012f8 <ICM_20948::magWhoIAm()>:

    return status;
}

ICM_20948_Status_e ICM_20948::magWhoIAm(void)
{
    12f8:	b530      	push	{r4, r5, lr}
    12fa:	b083      	sub	sp, #12
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
    12fc:	f10d 0307 	add.w	r3, sp, #7
    1300:	2200      	movs	r2, #0
    1302:	210c      	movs	r1, #12

    return status;
}

ICM_20948_Status_e ICM_20948::magWhoIAm(void)
{
    1304:	4604      	mov	r4, r0
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
    1306:	f000 fa5d 	bl	17c4 <ICM_20948_i2c_master_single_r>
    return data;
    130a:	f89d 5007 	ldrb.w	r5, [sp, #7]
    return status;
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
    130e:	7720      	strb	r0, [r4, #28]
    1310:	f10d 0307 	add.w	r3, sp, #7
    1314:	4620      	mov	r0, r4
    1316:	2201      	movs	r2, #1
    1318:	210c      	movs	r1, #12
    131a:	f000 fa53 	bl	17c4 <ICM_20948_i2c_master_single_r>
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
    131e:	2d48      	cmp	r5, #72	; 0x48
}
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
    uint8_t data;
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
    return data;
    1320:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
    1324:	d003      	beq.n	132e <ICM_20948::magWhoIAm()+0x36>
        retval = ICM_20948_Stat_Ok;
        status = retval;
        return status;
    }
    retval = ICM_20948_Stat_WrongID;
    status = retval;
    1326:	2004      	movs	r0, #4
    1328:	7720      	strb	r0, [r4, #28]
    return status;
}
    132a:	b003      	add	sp, #12
    132c:	bd30      	pop	{r4, r5, pc}
    if (retval != ICM_20948_Stat_Ok)
    {
        return retval;
    }

    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
    132e:	2b09      	cmp	r3, #9
    1330:	d1f9      	bne.n	1326 <ICM_20948::magWhoIAm()+0x2e>
    ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

    uint8_t whoiam1, whoiam2;
    whoiam1 = readMag(AK09916_REG_WIA1);
    whoiam2 = readMag(AK09916_REG_WIA2);
    status = retval;
    1332:	2000      	movs	r0, #0
    1334:	7720      	strb	r0, [r4, #28]
    1336:	e7f8      	b.n	132a <ICM_20948::magWhoIAm()+0x32>

00001338 <ICM_20948::startupMagnetometer()>:
    }
    return status;
}

ICM_20948_Status_e ICM_20948::startupMagnetometer(void)
{
    1338:	b530      	push	{r4, r5, lr}
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
    133a:	2100      	movs	r1, #0
    }
    return status;
}

ICM_20948_Status_e ICM_20948::startupMagnetometer(void)
{
    133c:	b089      	sub	sp, #36	; 0x24
    133e:	4605      	mov	r5, r0
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
    1340:	f000 fcfe 	bl	1d40 <ICM_20948_i2c_master_passthrough>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterEnable(bool enable)
{
    status = ICM_20948_i2c_master_enable(&_device, enable);
    1344:	2101      	movs	r1, #1
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
    1346:	7728      	strb	r0, [r5, #28]
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterEnable(bool enable)
{
    status = ICM_20948_i2c_master_enable(&_device, enable);
    1348:	4628      	mov	r0, r5
    134a:	f000 fd27 	bl	1d9c <ICM_20948_i2c_master_enable>
    134e:	2405      	movs	r4, #5
    1350:	7728      	strb	r0, [r5, #28]
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
    {
        //See if we can read the WhoIAm register correctly
        retval = magWhoIAm();
    1352:	4628      	mov	r0, r5
    1354:	f7ff ffd0 	bl	12f8 <ICM_20948::magWhoIAm()>
        if (retval == ICM_20948_Stat_Ok)
    1358:	b158      	cbz	r0, 1372 <ICM_20948::startupMagnetometer()+0x3a>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterReset()
{
    status = ICM_20948_i2c_master_reset(&_device);
    135a:	4628      	mov	r0, r5
    135c:	f000 fd80 	bl	1e60 <ICM_20948_i2c_master_reset>
    1360:	1e63      	subs	r3, r4, #1

    //After a ICM reset the Mag sensor may stop responding over the I2C master
    //Reset the Master I2C until it responds
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
    1362:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterReset()
{
    status = ICM_20948_i2c_master_reset(&_device);
    1366:	7728      	strb	r0, [r5, #28]

    //After a ICM reset the Mag sensor may stop responding over the I2C master
    //Reset the Master I2C until it responds
    uint8_t tries = 0;
    uint8_t maxTries = 5;
    while (tries < maxTries)
    1368:	d1f3      	bne.n	1352 <ICM_20948::startupMagnetometer()+0x1a>
        tries++;
    }

    if (tries == maxTries)
    {
        status = ICM_20948_Stat_WrongID;
    136a:	2004      	movs	r0, #4
    136c:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    return status;
}
    136e:	b009      	add	sp, #36	; 0x24
    1370:	bd30      	pop	{r4, r5, pc}
    1372:	ab08      	add	r3, sp, #32

    //Serial.printf("Mag connected tries: %d\n", tries);

    //Set up magnetometer
    AK09916_CNTL2_Reg_t reg;
    reg.MODE = AK09916_mode_cont_100hz;
    1374:	2208      	movs	r2, #8
    1376:	f803 2d01 	strb.w	r2, [r3, #-1]!
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterSingleW(uint8_t addr, uint8_t reg, uint8_t data)
{
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
    137a:	210c      	movs	r1, #12
    137c:	2231      	movs	r2, #49	; 0x31
    137e:	4628      	mov	r0, r5
    1380:	f000 fa14 	bl	17ac <ICM_20948_i2c_master_single_w>
    1384:	7728      	strb	r0, [r5, #28]

    //Set up magnetometer
    AK09916_CNTL2_Reg_t reg;
    reg.MODE = AK09916_mode_cont_100hz;
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
    if (retval != ICM_20948_Stat_Ok)
    1386:	2800      	cmp	r0, #0
    1388:	d1f1      	bne.n	136e <ICM_20948::startupMagnetometer()+0x36>
    return status;
}

ICM_20948_Status_e ICM_20948::i2cMasterConfigureSlave(uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
    138a:	2301      	movs	r3, #1
    138c:	2209      	movs	r2, #9
    138e:	e88d 000c 	stmia.w	sp, {r2, r3}
    1392:	9005      	str	r0, [sp, #20]
    1394:	9004      	str	r0, [sp, #16]
    1396:	9003      	str	r0, [sp, #12]
    1398:	4601      	mov	r1, r0
    139a:	9302      	str	r3, [sp, #8]
    139c:	220c      	movs	r2, #12
    139e:	2310      	movs	r3, #16
    13a0:	4628      	mov	r0, r5
    13a2:	f000 fd89 	bl	1eb8 <ICM_20948_i2c_master_configure_slave>
    13a6:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    return status;
}
    13a8:	b009      	add	sp, #36	; 0x24
    13aa:	bd30      	pop	{r4, r5, pc}

000013ac <ICM_20948::startupDefault()>:
}



ICM_20948_Status_e ICM_20948::startupDefault(void)
{
    13ac:	b530      	push	{r4, r5, lr}
    13ae:	b083      	sub	sp, #12
    13b0:	4605      	mov	r5, r0
    return status;
}

ICM_20948_Status_e ICM_20948::checkID(void)
{
    status = ICM_20948_check_id(&_device);
    13b2:	f000 fac9 	bl	1948 <ICM_20948_check_id>
    13b6:	4604      	mov	r4, r0
    13b8:	7728      	strb	r0, [r5, #28]
{
    
    ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

    retval = checkID();
    if (retval != ICM_20948_Stat_Ok)
    13ba:	b110      	cbz	r0, 13c2 <ICM_20948::startupDefault()+0x16>
    }

    return status;


}
    13bc:	4620      	mov	r0, r4
    13be:	b003      	add	sp, #12
    13c0:	bd30      	pop	{r4, r5, pc}
    return status;
}

ICM_20948_Status_e ICM_20948::swReset(void)
{
    status = ICM_20948_sw_reset(&_device);
    13c2:	4628      	mov	r0, r5
    13c4:	f000 fa08 	bl	17d8 <ICM_20948_sw_reset>
    13c8:	4604      	mov	r4, r0
    13ca:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = swReset();
    if (retval != ICM_20948_Stat_Ok)
    13cc:	2800      	cmp	r0, #0
    13ce:	d1f5      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    {
        status = retval;
        return status;
    }
    delay(50);
    13d0:	2032      	movs	r0, #50	; 0x32
    13d2:	f001 fa3d 	bl	2850 <delay>
    return status;
}

ICM_20948_Status_e ICM_20948::sleep(bool on)
{
    status = ICM_20948_sleep(&_device, on);
    13d6:	4621      	mov	r1, r4
    13d8:	4628      	mov	r0, r5
    13da:	f000 fa29 	bl	1830 <ICM_20948_sleep>
    13de:	4604      	mov	r4, r0
    13e0:	7728      	strb	r0, [r5, #28]
        return status;
    }
    delay(50);

    retval = sleep(false);
    if (retval != ICM_20948_Stat_Ok)
    13e2:	2800      	cmp	r0, #0
    13e4:	d1ea      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::lowPower(bool on)
{
    status = ICM_20948_low_power(&_device, on);
    13e6:	4601      	mov	r1, r0
    13e8:	4628      	mov	r0, r5
    13ea:	f000 fa57 	bl	189c <ICM_20948_low_power>
    13ee:	4604      	mov	r4, r0
    13f0:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = lowPower(false);
    if (retval != ICM_20948_Stat_Ok)
    13f2:	2800      	cmp	r0, #0
    13f4:	d1e2      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
}

// Internal Sensor Options
ICM_20948_Status_e ICM_20948::setSampleMode(uint8_t sensor_id_bm, uint8_t lp_config_cycle_mode)
{
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
    13f6:	4602      	mov	r2, r0
    13f8:	2103      	movs	r1, #3
    13fa:	4628      	mov	r0, r5
    13fc:	f000 fada 	bl	19b4 <ICM_20948_set_sample_mode>
    1400:	4604      	mov	r4, r0
    1402:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
    if (retval != ICM_20948_Stat_Ok)
    1404:	2800      	cmp	r0, #0
    1406:	d1d9      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    1408:	f04f 0200 	mov.w	r2, #0
    140c:	f360 0201 	bfi	r2, r0, #0, #2
    1410:	f360 0283 	bfi	r2, r0, #2, #2
    return status;
}

ICM_20948_Status_e ICM_20948::setFullScale(uint8_t sensor_id_bm, ICM_20948_fss_t fss)
{
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
    1414:	2103      	movs	r1, #3
    1416:	4628      	mov	r0, r5
    1418:	f000 fb12 	bl	1a40 <ICM_20948_set_full_scale>
    141c:	4604      	mov	r4, r0
    141e:	7728      	strb	r0, [r5, #28]

    ICM_20948_fss_t FSS;
    FSS.a = gpm2;   // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
    FSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
    if (retval != ICM_20948_Stat_Ok)
    1420:	2800      	cmp	r0, #0
    1422:	d1cb      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    1424:	2307      	movs	r3, #7
    1426:	f88d 3004 	strb.w	r3, [sp, #4]
    142a:	f88d 3005 	strb.w	r3, [sp, #5]
    return status;
}

ICM_20948_Status_e ICM_20948::setDLPFcfg(uint8_t sensor_id_bm, ICM_20948_dlpcfg_t cfg)
{
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
    142e:	9a01      	ldr	r2, [sp, #4]
    1430:	2103      	movs	r1, #3
    1432:	4628      	mov	r0, r5
    1434:	f000 fb84 	bl	1b40 <ICM_20948_set_dlpf_cfg>
    1438:	4604      	mov	r4, r0
    143a:	7728      	strb	r0, [r5, #28]

    ICM_20948_dlpcfg_t dlpcfg;
    dlpcfg.a = acc_d473bw_n499bw;
    dlpcfg.g = gyr_d361bw4_n376bw5;
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
    if (retval != ICM_20948_Stat_Ok)
    143c:	2800      	cmp	r0, #0
    143e:	d1bd      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::enableDLPF(uint8_t sensor_id_bm, bool enable)
{
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
    1440:	4602      	mov	r2, r0
    1442:	2101      	movs	r1, #1
    1444:	4628      	mov	r0, r5
    1446:	f000 fbf1 	bl	1c2c <ICM_20948_enable_dlpf>
    144a:	4604      	mov	r4, r0
    144c:	7728      	strb	r0, [r5, #28]
        status = retval;
        return status;
    }

    retval = enableDLPF(ICM_20948_Internal_Acc, false);
    if (retval != ICM_20948_Stat_Ok)
    144e:	2800      	cmp	r0, #0
    1450:	d1b4      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    return status;
}

ICM_20948_Status_e ICM_20948::enableDLPF(uint8_t sensor_id_bm, bool enable)
{
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
    1452:	4602      	mov	r2, r0
    1454:	2102      	movs	r1, #2
    1456:	4628      	mov	r0, r5
    1458:	f000 fbe8 	bl	1c2c <ICM_20948_enable_dlpf>
    145c:	4604      	mov	r4, r0
    145e:	7728      	strb	r0, [r5, #28]
    {
        status = retval;
        return status;
    }
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
    if (retval != ICM_20948_Stat_Ok)
    1460:	2800      	cmp	r0, #0
    1462:	d1ab      	bne.n	13bc <ICM_20948::startupDefault()+0x10>
    {
        status = retval;
        return status;
    }
    retval = startupMagnetometer();
    1464:	4628      	mov	r0, r5
    1466:	f7ff ff67 	bl	1338 <ICM_20948::startupMagnetometer()>
    if (retval != ICM_20948_Stat_Ok)
    146a:	b908      	cbnz	r0, 1470 <ICM_20948::startupDefault()+0xc4>
    {
        status = retval;
        return status;
    }

    return status;
    146c:	7f2c      	ldrb	r4, [r5, #28]
    146e:	e7a5      	b.n	13bc <ICM_20948::startupDefault()+0x10>
        return status;
    }
    retval = startupMagnetometer();
    if (retval != ICM_20948_Stat_Ok)
    {
        status = retval;
    1470:	7728      	strb	r0, [r5, #28]
        return status;
    1472:	4604      	mov	r4, r0
    1474:	e7a2      	b.n	13bc <ICM_20948::startupDefault()+0x10>
    1476:	bf00      	nop

00001478 <ICM_20948_SPI::ICM_20948_SPI()>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    1478:	4b01      	ldr	r3, [pc, #4]	; (1480 <ICM_20948_SPI::ICM_20948_SPI()+0x8>)
    147a:	6243      	str	r3, [r0, #36]	; 0x24

// SPISettings ICM_20948_SPI_DEFAULT_SETTINGS(ICM_20948_SPI_DEFAULT_FREQ, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);

ICM_20948_SPI::ICM_20948_SPI()
{
}
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	38002003 	.word	0x38002003

00001484 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)>:

ICM_20948_Status_e ICM_20948_SPI::begin(uint8_t csPin, SPIClass &spiPort, uint32_t SPIFreq)
{
    1484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1486:	4d48      	ldr	r5, [pc, #288]	; (15a8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x124>)
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    1488:	6202      	str	r2, [r0, #32]
    148a:	42ab      	cmp	r3, r5
ICM_20948_SPI::ICM_20948_SPI()
{
}

ICM_20948_Status_e ICM_20948_SPI::begin(uint8_t csPin, SPIClass &spiPort, uint32_t SPIFreq)
{
    148c:	4604      	mov	r4, r0
    148e:	bf28      	it	cs
    1490:	462b      	movcs	r3, r5
    1492:	4f46      	ldr	r7, [pc, #280]	; (15ac <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x128>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    1494:	4846      	ldr	r0, [pc, #280]	; (15b0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x12c>)
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    1496:	2500      	movs	r5, #0
    1498:	e002      	b.n	14a0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x1c>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    149a:	2e17      	cmp	r6, #23
    149c:	d008      	beq.n	14b0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x2c>
    149e:	4635      	mov	r5, r6
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    14a0:	f837 2f02 	ldrh.w	r2, [r7, #2]!
    14a4:	fb90 f2f2 	sdiv	r2, r0, r2
    14a8:	429a      	cmp	r2, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    14aa:	f105 0601 	add.w	r6, r5, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    14ae:	d8f4      	bhi.n	149a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x16>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    14b0:	4b40      	ldr	r3, [pc, #256]	; (15b4 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x130>)
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    _cs = csPin;
    14b2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    14b6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    14ba:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
    _cs = csPin;

    // Set pinmodes
    pinMode(_cs, OUTPUT);
    14be:	4608      	mov	r0, r1
    if (SPIFreq > 7000000)
        SPIFreq = 7000000;

    // Associate
    _spi = &spiPort;
    _spisettings = SPISettings(SPIFreq, ICM_20948_SPI_DEFAULT_ORDER, ICM_20948_SPI_DEFAULT_MODE);
    14c0:	6263      	str	r3, [r4, #36]	; 0x24
    _cs = csPin;

    // Set pinmodes
    pinMode(_cs, OUTPUT);
    14c2:	2101      	movs	r1, #1
    14c4:	f001 f9be 	bl	2844 <pinMode>

    // Set pins to default positions
    digitalWrite(_cs, HIGH);
    14c8:	2101      	movs	r1, #1
    14ca:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    14ce:	f001 f9b3 	bl	2838 <digitalWrite>

    // _spi->begin(); // Moved into user's sketch

    // 'Kickstart' the SPI hardware.
    _spi->beginTransaction(_spisettings);
    14d2:	6a23      	ldr	r3, [r4, #32]
    14d4:	6a62      	ldr	r2, [r4, #36]	; 0x24

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    14d6:	7ad9      	ldrb	r1, [r3, #11]
    14d8:	2900      	cmp	r1, #0
    14da:	d05c      	beq.n	1596 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x112>
			__disable_irq();
    14dc:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    14de:	7ad9      	ldrb	r1, [r3, #11]
    14e0:	07cd      	lsls	r5, r1, #31
    14e2:	d506      	bpl.n	14f2 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x6e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    14e4:	4834      	ldr	r0, [pc, #208]	; (15b8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x134>)
    14e6:	68d9      	ldr	r1, [r3, #12]
    14e8:	6805      	ldr	r5, [r0, #0]
    14ea:	4029      	ands	r1, r5
    14ec:	61d9      	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    14ee:	6001      	str	r1, [r0, #0]
    14f0:	7ad9      	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    14f2:	0788      	lsls	r0, r1, #30
    14f4:	d506      	bpl.n	1504 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x80>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    14f6:	4831      	ldr	r0, [pc, #196]	; (15bc <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x138>)
    14f8:	6919      	ldr	r1, [r3, #16]
    14fa:	6805      	ldr	r5, [r0, #0]
    14fc:	4029      	ands	r1, r5
    14fe:	6219      	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    1500:	6001      	str	r1, [r0, #0]
    1502:	7ad9      	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1504:	074f      	lsls	r7, r1, #29
    1506:	d506      	bpl.n	1516 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x92>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1508:	482d      	ldr	r0, [pc, #180]	; (15c0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x13c>)
    150a:	6959      	ldr	r1, [r3, #20]
    150c:	6805      	ldr	r5, [r0, #0]
    150e:	4029      	ands	r1, r5
    1510:	6259      	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    1512:	6001      	str	r1, [r0, #0]
    1514:	7ad9      	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    1516:	070e      	lsls	r6, r1, #28
    1518:	d43f      	bmi.n	159a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x116>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    151a:	b662      	cpsie	i
    151c:	6a21      	ldr	r1, [r4, #32]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    151e:	681b      	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    1520:	68d8      	ldr	r0, [r3, #12]
    1522:	4290      	cmp	r0, r2
    1524:	d007      	beq.n	1536 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xb2>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1526:	4d27      	ldr	r5, [pc, #156]	; (15c4 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x140>)
    1528:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    152a:	4827      	ldr	r0, [pc, #156]	; (15c8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x144>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    152c:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    152e:	f042 4580 	orr.w	r5, r2, #1073741824	; 0x40000000
    1532:	611d      	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1534:	6018      	str	r0, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1536:	680a      	ldr	r2, [r1, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1538:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
    153c:	2300      	movs	r3, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    153e:	62d0      	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data;
    1540:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1542:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1544:	2b00      	cmp	r3, #0
    1546:	dafc      	bge.n	1542 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xbe>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1548:	7acb      	ldrb	r3, [r1, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    154a:	6b92      	ldr	r2, [r2, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    154c:	b1b3      	cbz	r3, 157c <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xf8>
			if (interruptMasksUsed & 0x01) {
    154e:	07dd      	lsls	r5, r3, #31
    1550:	d503      	bpl.n	155a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xd6>
				NVIC_ISER0 = interruptSave[0];
    1552:	4b1e      	ldr	r3, [pc, #120]	; (15cc <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x148>)
    1554:	69ca      	ldr	r2, [r1, #28]
    1556:	601a      	str	r2, [r3, #0]
    1558:	7acb      	ldrb	r3, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    155a:	0798      	lsls	r0, r3, #30
    155c:	d503      	bpl.n	1566 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xe2>
				NVIC_ISER1 = interruptSave[1];
    155e:	4b1c      	ldr	r3, [pc, #112]	; (15d0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x14c>)
    1560:	6a0a      	ldr	r2, [r1, #32]
    1562:	601a      	str	r2, [r3, #0]
    1564:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1566:	075a      	lsls	r2, r3, #29
    1568:	d503      	bpl.n	1572 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xee>
				NVIC_ISER2 = interruptSave[2];
    156a:	4b1a      	ldr	r3, [pc, #104]	; (15d4 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x150>)
    156c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    156e:	601a      	str	r2, [r3, #0]
    1570:	7acb      	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    1572:	071b      	lsls	r3, r3, #28
    1574:	d502      	bpl.n	157c <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0xf8>
				NVIC_ISER3 = interruptSave[3];
    1576:	4b18      	ldr	r3, [pc, #96]	; (15d8 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x154>)
    1578:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    157a:	601a      	str	r2, [r3, #0]
    _spi->transfer(0x00);
    _spi->endTransaction();

    // Set up the serif
    _serif.write = ICM_20948_write_SPI;
    157c:	4917      	ldr	r1, [pc, #92]	; (15dc <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x158>)
    _serif.read = ICM_20948_read_SPI;
    157e:	4a18      	ldr	r2, [pc, #96]	; (15e0 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x15c>)
    _serif.user = (void *)this; // refer to yourself in the user field
    1580:	63e4      	str	r4, [r4, #60]	; 0x3c

    // Link the serif
    _device._serif = &_serif;
    1582:	f104 0334 	add.w	r3, r4, #52	; 0x34
    _spi->beginTransaction(_spisettings);
    _spi->transfer(0x00);
    _spi->endTransaction();

    // Set up the serif
    _serif.write = ICM_20948_write_SPI;
    1586:	6361      	str	r1, [r4, #52]	; 0x34
    _serif.read = ICM_20948_read_SPI;
    1588:	63a2      	str	r2, [r4, #56]	; 0x38
    _serif.user = (void *)this; // refer to yourself in the user field

    // Link the serif
    _device._serif = &_serif;
    158a:	6023      	str	r3, [r4, #0]

    // Perform default startup
    status = startupDefault();
    158c:	4620      	mov	r0, r4
    158e:	f7ff ff0d 	bl	13ac <ICM_20948::startupDefault()>
    1592:	7720      	strb	r0, [r4, #28]
    {
        return status;
    }

    return ICM_20948_Stat_Ok;
}
    1594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1596:	4619      	mov	r1, r3
    1598:	e7c1      	b.n	151e <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x9a>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    159a:	4812      	ldr	r0, [pc, #72]	; (15e4 <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x160>)
    159c:	6999      	ldr	r1, [r3, #24]
    159e:	6805      	ldr	r5, [r0, #0]
    15a0:	4029      	ands	r1, r5
    15a2:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    15a4:	6001      	str	r1, [r0, #0]
    15a6:	e7b8      	b.n	151a <ICM_20948_SPI::begin(unsigned char, SPIClass&, unsigned long)+0x96>
    15a8:	006acfc0 	.word	0x006acfc0
    15ac:	0000596e 	.word	0x0000596e
    15b0:	03938700 	.word	0x03938700
    15b4:	00005a34 	.word	0x00005a34
    15b8:	e000e180 	.word	0xe000e180
    15bc:	e000e184 	.word	0xe000e184
    15c0:	e000e188 	.word	0xe000e188
    15c4:	003f4001 	.word	0x003f4001
    15c8:	803f0000 	.word	0x803f0000
    15cc:	e000e100 	.word	0xe000e100
    15d0:	e000e104 	.word	0xe000e104
    15d4:	e000e108 	.word	0xe000e108
    15d8:	e000e10c 	.word	0xe000e10c
    15dc:	00000f05 	.word	0x00000f05
    15e0:	00000d0d 	.word	0x00000d0d
    15e4:	e000e18c 	.word	0xe000e18c

000015e8 <ICM_20948_i2c_master_slv4_txn>:
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    15e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15ec:	b087      	sub	sp, #28
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    15ee:	f04f 0930 	mov.w	r9, #48	; 0x30
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    15f2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    15f6:	f88d 2006 	strb.w	r2, [sp, #6]
	// Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	addr = (((Rw) ? 0x80 : 0x00) | addr);
    15fa:	f1ba 0f00 	cmp.w	sl, #0
    15fe:	bf0c      	ite	eq
    1600:	2200      	moveq	r2, #0
    1602:	f06f 027f 	mvnne.w	r2, #127	; 0x7f
    1606:	4311      	orrs	r1, r2
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1608:	6802      	ldr	r2, [r0, #0]
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
	// Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	addr = (((Rw) ? 0x80 : 0x00) | addr);
    160a:	f88d 1007 	strb.w	r1, [sp, #7]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    160e:	f88d 9012 	strb.w	r9, [sp, #18]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1612:	6817      	ldr	r7, [r2, #0]
}

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 slave slot
ICM_20948_Status_e ICM_20948_i2c_master_slv4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
    1614:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
    1618:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    161c:	2f00      	cmp	r7, #0
    161e:	f000 809a 	beq.w	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
    1622:	4606      	mov	r6, r0
    1624:	4698      	mov	r8, r3
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1626:	f10d 0112 	add.w	r1, sp, #18
    162a:	6893      	ldr	r3, [r2, #8]
    162c:	207f      	movs	r0, #127	; 0x7f
    162e:	2201      	movs	r2, #1
    1630:	47b8      	blx	r7
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1632:	6833      	ldr	r3, [r6, #0]
    1634:	681f      	ldr	r7, [r3, #0]
    1636:	2f00      	cmp	r7, #0
    1638:	f000 808d 	beq.w	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    163c:	689b      	ldr	r3, [r3, #8]
    163e:	2201      	movs	r2, #1
    1640:	f10d 0107 	add.w	r1, sp, #7
    1644:	2013      	movs	r0, #19
    1646:	47b8      	blx	r7

	addr = (((Rw) ? 0x80 : 0x00) | addr);

	retval = ICM_20948_set_bank(pdev, 3);
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
	if (retval != ICM_20948_Stat_Ok)
    1648:	2800      	cmp	r0, #0
    164a:	f040 8085 	bne.w	1758 <ICM_20948_i2c_master_slv4_txn+0x170>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    164e:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1650:	f88d 9013 	strb.w	r9, [sp, #19]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1654:	681f      	ldr	r7, [r3, #0]
    1656:	2f00      	cmp	r7, #0
    1658:	d07d      	beq.n	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    165a:	689b      	ldr	r3, [r3, #8]
    165c:	2201      	movs	r2, #1
    165e:	f10d 0113 	add.w	r1, sp, #19
    1662:	207f      	movs	r0, #127	; 0x7f
    1664:	47b8      	blx	r7
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1666:	6833      	ldr	r3, [r6, #0]
    1668:	681f      	ldr	r7, [r3, #0]
    166a:	2f00      	cmp	r7, #0
    166c:	d073      	beq.n	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    166e:	689b      	ldr	r3, [r3, #8]
    1670:	2201      	movs	r2, #1
    1672:	f10d 0106 	add.w	r1, sp, #6
    1676:	2014      	movs	r0, #20
    1678:	47b8      	blx	r7
		return retval;
	}

	retval = ICM_20948_set_bank(pdev, 3);
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
	if (retval != ICM_20948_Stat_Ok)
    167a:	2800      	cmp	r0, #0
    167c:	d16c      	bne.n	1758 <ICM_20948_i2c_master_slv4_txn+0x170>
	{
		return retval;
	}

	ICM_20948_I2C_SLV4_CTRL_t ctrl;
	ctrl.EN = 1;
    167e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	ctrl.INT_EN = false;
    1682:	f063 037f 	orn	r3, r3, #127	; 0x7f
    1686:	f360 1386 	bfi	r3, r0, #6, #1
	ctrl.DLY = 0;
    168a:	f360 0304 	bfi	r3, r0, #0, #5
	ctrl.REG_DIS = !send_reg_addr;
    168e:	f085 0501 	eor.w	r5, r5, #1
    1692:	f365 1345 	bfi	r3, r5, #5, #1

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    1696:	b2a4      	uxth	r4, r4

	ICM_20948_I2C_SLV4_CTRL_t ctrl;
	ctrl.EN = 1;
	ctrl.INT_EN = false;
	ctrl.DLY = 0;
	ctrl.REG_DIS = !send_reg_addr;
    1698:	f88d 300c 	strb.w	r3, [sp, #12]

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    169c:	2c00      	cmp	r4, #0
    169e:	d05b      	beq.n	1758 <ICM_20948_i2c_master_slv4_txn+0x170>
    16a0:	3c01      	subs	r4, #1
    16a2:	fa1f fb84 	uxth.w	fp, r4
    16a6:	f10b 0b01 	add.w	fp, fp, #1
    16aa:	44c3      	add	fp, r8
    16ac:	4607      	mov	r7, r0
	{
		if (!Rw)
    16ae:	f1ba 0f00 	cmp.w	sl, #0
    16b2:	d115      	bne.n	16e0 <ICM_20948_i2c_master_slv4_txn+0xf8>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16b4:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    16b6:	f88d 9014 	strb.w	r9, [sp, #20]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16ba:	681c      	ldr	r4, [r3, #0]
    16bc:	2c00      	cmp	r4, #0
    16be:	d04a      	beq.n	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16c0:	689b      	ldr	r3, [r3, #8]
    16c2:	2201      	movs	r2, #1
    16c4:	a905      	add	r1, sp, #20
    16c6:	207f      	movs	r0, #127	; 0x7f
    16c8:	47a0      	blx	r4
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16ca:	6833      	ldr	r3, [r6, #0]
    16cc:	681c      	ldr	r4, [r3, #0]
    16ce:	2c00      	cmp	r4, #0
    16d0:	d041      	beq.n	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16d2:	689b      	ldr	r3, [r3, #8]
    16d4:	2201      	movs	r2, #1
    16d6:	4641      	mov	r1, r8
    16d8:	2016      	movs	r0, #22
    16da:	47a0      	blx	r4
	{
		if (!Rw)
		{
			retval = ICM_20948_set_bank(pdev, 3);
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
			if (retval != ICM_20948_Stat_Ok)
    16dc:	2800      	cmp	r0, #0
    16de:	d13b      	bne.n	1758 <ICM_20948_i2c_master_slv4_txn+0x170>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16e0:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    16e2:	f88d 9015 	strb.w	r9, [sp, #21]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16e6:	681c      	ldr	r4, [r3, #0]
    16e8:	2c00      	cmp	r4, #0
    16ea:	d034      	beq.n	1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16ec:	689b      	ldr	r3, [r3, #8]
    16ee:	2201      	movs	r2, #1
    16f0:	f10d 0115 	add.w	r1, sp, #21
    16f4:	207f      	movs	r0, #127	; 0x7f
    16f6:	47a0      	blx	r4
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    16f8:	6833      	ldr	r3, [r6, #0]
    16fa:	681c      	ldr	r4, [r3, #0]
    16fc:	b35c      	cbz	r4, 1756 <ICM_20948_i2c_master_slv4_txn+0x16e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    16fe:	689b      	ldr	r3, [r3, #8]
    1700:	2201      	movs	r2, #1
    1702:	a903      	add	r1, sp, #12
    1704:	2015      	movs	r0, #21
    1706:	47a0      	blx	r4
		}

		// Kick off txn
		retval = ICM_20948_set_bank(pdev, 3);
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
		if (retval != ICM_20948_Stat_Ok)
    1708:	bb30      	cbnz	r0, 1758 <ICM_20948_i2c_master_slv4_txn+0x170>
    170a:	4604      	mov	r4, r0
    170c:	e00f      	b.n	172e <ICM_20948_i2c_master_slv4_txn+0x146>
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    170e:	689b      	ldr	r3, [r3, #8]
    1710:	47a8      	blx	r5
		while (!slave4Done)
		{
			retval = ICM_20948_set_bank(pdev, 0);
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);

			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
    1712:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1716:	f240 31e7 	movw	r1, #999	; 0x3e7
    171a:	f3c3 1280 	ubfx	r2, r3, #6, #1
    171e:	428c      	cmp	r4, r1
    1720:	bf88      	it	hi
    1722:	f042 0201 	orrhi.w	r2, r2, #1

		// long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
		uint32_t max_cycles = 1000;
		uint32_t count = 0;
		bool slave4Done = false;
		while (!slave4Done)
    1726:	07d2      	lsls	r2, r2, #31
			retval = ICM_20948_set_bank(pdev, 0);
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);

			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
			slave4Done |= (count >= max_cycles);
			count++;
    1728:	f104 0401 	add.w	r4, r4, #1

		// long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
		uint32_t max_cycles = 1000;
		uint32_t count = 0;
		bool slave4Done = false;
		while (!slave4Done)
    172c:	d417      	bmi.n	175e <ICM_20948_i2c_master_slv4_txn+0x176>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    172e:	6833      	ldr	r3, [r6, #0]
    1730:	f88d 7016 	strb.w	r7, [sp, #22]
    1734:	681d      	ldr	r5, [r3, #0]
    1736:	b135      	cbz	r5, 1746 <ICM_20948_i2c_master_slv4_txn+0x15e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1738:	689b      	ldr	r3, [r3, #8]
    173a:	2201      	movs	r2, #1
    173c:	f10d 0116 	add.w	r1, sp, #22
    1740:	207f      	movs	r0, #127	; 0x7f
    1742:	47a8      	blx	r5
    1744:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1746:	685d      	ldr	r5, [r3, #4]
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1748:	2201      	movs	r2, #1
    174a:	a904      	add	r1, sp, #16
    174c:	2017      	movs	r0, #23
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    174e:	2d00      	cmp	r5, #0
    1750:	d1dd      	bne.n	170e <ICM_20948_i2c_master_slv4_txn+0x126>
	{
		return ICM_20948_Stat_NotImpl;
    1752:	2002      	movs	r0, #2
    1754:	e7dd      	b.n	1712 <ICM_20948_i2c_master_slv4_txn+0x12a>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1756:	2002      	movs	r0, #2
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
	}

	return retval;
}
    1758:	b007      	add	sp, #28
    175a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			slave4Done |= (count >= max_cycles);
			count++;
		}
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
		txn_failed |= (count >= max_cycles);
		if (txn_failed)
    175e:	06db      	lsls	r3, r3, #27
    1760:	d420      	bmi.n	17a4 <ICM_20948_i2c_master_slv4_txn+0x1bc>
    1762:	428c      	cmp	r4, r1
    1764:	d81e      	bhi.n	17a4 <ICM_20948_i2c_master_slv4_txn+0x1bc>
			break;

		if (Rw)
    1766:	f1ba 0f00 	cmp.w	sl, #0
    176a:	d012      	beq.n	1792 <ICM_20948_i2c_master_slv4_txn+0x1aa>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    176c:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    176e:	f88d 9017 	strb.w	r9, [sp, #23]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1772:	681c      	ldr	r4, [r3, #0]
    1774:	b134      	cbz	r4, 1784 <ICM_20948_i2c_master_slv4_txn+0x19c>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1776:	689b      	ldr	r3, [r3, #8]
    1778:	2201      	movs	r2, #1
    177a:	f10d 0117 	add.w	r1, sp, #23
    177e:	207f      	movs	r0, #127	; 0x7f
    1780:	47a0      	blx	r4
    1782:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1784:	685c      	ldr	r4, [r3, #4]
    1786:	b15c      	cbz	r4, 17a0 <ICM_20948_i2c_master_slv4_txn+0x1b8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1788:	689b      	ldr	r3, [r3, #8]
    178a:	2201      	movs	r2, #1
    178c:	4641      	mov	r1, r8
    178e:	2017      	movs	r0, #23
    1790:	47a0      	blx	r4
    1792:	f108 0801 	add.w	r8, r8, #1

	ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
	bool txn_failed = false;
	uint16_t nByte = 0;

	while (nByte < len)
    1796:	45c3      	cmp	fp, r8
    1798:	d189      	bne.n	16ae <ICM_20948_i2c_master_slv4_txn+0xc6>
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
	}

	return retval;
}
    179a:	b007      	add	sp, #28
    179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    17a0:	2002      	movs	r0, #2
    17a2:	e7f6      	b.n	1792 <ICM_20948_i2c_master_slv4_txn+0x1aa>
	}

	if (txn_failed)
	{
		//We often fail here if mag is stuck
		return ICM_20948_Stat_Err;
    17a4:	2001      	movs	r0, #1
	}

	return retval;
}
    17a6:	b007      	add	sp, #28
    17a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000017ac <ICM_20948_i2c_master_single_w>:

ICM_20948_Status_e ICM_20948_i2c_master_single_w(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
    17ac:	b530      	push	{r4, r5, lr}
    17ae:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
    17b0:	2401      	movs	r4, #1
    17b2:	2500      	movs	r5, #0
    17b4:	9402      	str	r4, [sp, #8]
    17b6:	e88d 0030 	stmia.w	sp, {r4, r5}
    17ba:	f7ff ff15 	bl	15e8 <ICM_20948_i2c_master_slv4_txn>
}
    17be:	b005      	add	sp, #20
    17c0:	bd30      	pop	{r4, r5, pc}
    17c2:	bf00      	nop

000017c4 <ICM_20948_i2c_master_single_r>:

ICM_20948_Status_e ICM_20948_i2c_master_single_r(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
    17c4:	b510      	push	{r4, lr}
    17c6:	b084      	sub	sp, #16
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
    17c8:	2401      	movs	r4, #1
    17ca:	9402      	str	r4, [sp, #8]
    17cc:	9401      	str	r4, [sp, #4]
    17ce:	9400      	str	r4, [sp, #0]
    17d0:	f7ff ff0a 	bl	15e8 <ICM_20948_i2c_master_slv4_txn>
}
    17d4:	b004      	add	sp, #16
    17d6:	bd10      	pop	{r4, pc}

000017d8 <ICM_20948_sw_reset>:
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
}

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
    17d8:	b530      	push	{r4, r5, lr}
    17da:	b083      	sub	sp, #12
    17dc:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17de:	6803      	ldr	r3, [r0, #0]
    17e0:	f88d 2007 	strb.w	r2, [sp, #7]
    17e4:	681d      	ldr	r5, [r3, #0]
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
}

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
    17e6:	4604      	mov	r4, r0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    17e8:	b135      	cbz	r5, 17f8 <ICM_20948_sw_reset+0x20>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    17ea:	689b      	ldr	r3, [r3, #8]
    17ec:	2201      	movs	r2, #1
    17ee:	f10d 0107 	add.w	r1, sp, #7
    17f2:	207f      	movs	r0, #127	; 0x7f
    17f4:	47a8      	blx	r5
    17f6:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    17f8:	685d      	ldr	r5, [r3, #4]
    17fa:	b1ad      	cbz	r5, 1828 <ICM_20948_sw_reset+0x50>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    17fc:	689b      	ldr	r3, [r3, #8]
    17fe:	a901      	add	r1, sp, #4
    1800:	2201      	movs	r2, #1
    1802:	2006      	movs	r0, #6
    1804:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    1806:	b968      	cbnz	r0, 1824 <ICM_20948_sw_reset+0x4c>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1808:	6822      	ldr	r2, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
    180a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    180e:	6814      	ldr	r4, [r2, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
    1810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1814:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1818:	b134      	cbz	r4, 1828 <ICM_20948_sw_reset+0x50>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    181a:	6893      	ldr	r3, [r2, #8]
    181c:	a901      	add	r1, sp, #4
    181e:	2201      	movs	r2, #1
    1820:	2006      	movs	r0, #6
    1822:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1824:	b003      	add	sp, #12
    1826:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1828:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    182a:	b003      	add	sp, #12
    182c:	bd30      	pop	{r4, r5, pc}
    182e:	bf00      	nop

00001830 <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
    1830:	b570      	push	{r4, r5, r6, lr}
    1832:	b082      	sub	sp, #8
    1834:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1836:	6803      	ldr	r3, [r0, #0]
    1838:	f88d 2007 	strb.w	r2, [sp, #7]
    183c:	681d      	ldr	r5, [r3, #0]
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
    183e:	4604      	mov	r4, r0
    1840:	460e      	mov	r6, r1
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1842:	b135      	cbz	r5, 1852 <ICM_20948_sleep+0x22>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1844:	689b      	ldr	r3, [r3, #8]
    1846:	2201      	movs	r2, #1
    1848:	f10d 0107 	add.w	r1, sp, #7
    184c:	207f      	movs	r0, #127	; 0x7f
    184e:	47a8      	blx	r5
    1850:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1852:	685d      	ldr	r5, [r3, #4]
    1854:	b1f5      	cbz	r5, 1894 <ICM_20948_sleep+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1856:	689b      	ldr	r3, [r3, #8]
    1858:	a901      	add	r1, sp, #4
    185a:	2201      	movs	r2, #1
    185c:	2006      	movs	r0, #6
    185e:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    1860:	b970      	cbnz	r0, 1880 <ICM_20948_sleep+0x50>
		return retval;
	}

	if (on)
	{
		reg.SLEEP = 1;
    1862:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	if (on)
    1866:	b96e      	cbnz	r6, 1884 <ICM_20948_sleep+0x54>
	{
		reg.SLEEP = 1;
	}
	else
	{
		reg.SLEEP = 0;
    1868:	f366 1386 	bfi	r3, r6, #6, #1
    186c:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	681c      	ldr	r4, [r3, #0]
    1874:	b174      	cbz	r4, 1894 <ICM_20948_sleep+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1876:	689b      	ldr	r3, [r3, #8]
    1878:	a901      	add	r1, sp, #4
    187a:	2201      	movs	r2, #1
    187c:	2006      	movs	r0, #6
    187e:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1880:	b002      	add	sp, #8
    1882:	bd70      	pop	{r4, r5, r6, pc}
		return retval;
	}

	if (on)
	{
		reg.SLEEP = 1;
    1884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1888:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    188c:	6823      	ldr	r3, [r4, #0]
    188e:	681c      	ldr	r4, [r3, #0]
    1890:	2c00      	cmp	r4, #0
    1892:	d1f0      	bne.n	1876 <ICM_20948_sleep+0x46>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1894:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1896:	b002      	add	sp, #8
    1898:	bd70      	pop	{r4, r5, r6, pc}
    189a:	bf00      	nop

0000189c <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
    189c:	b570      	push	{r4, r5, r6, lr}
    189e:	b082      	sub	sp, #8
    18a0:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18a2:	6803      	ldr	r3, [r0, #0]
    18a4:	f88d 2007 	strb.w	r2, [sp, #7]
    18a8:	681d      	ldr	r5, [r3, #0]
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
    18aa:	4604      	mov	r4, r0
    18ac:	460e      	mov	r6, r1
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18ae:	b135      	cbz	r5, 18be <ICM_20948_low_power+0x22>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    18b0:	689b      	ldr	r3, [r3, #8]
    18b2:	2201      	movs	r2, #1
    18b4:	f10d 0107 	add.w	r1, sp, #7
    18b8:	207f      	movs	r0, #127	; 0x7f
    18ba:	47a8      	blx	r5
    18bc:	6823      	ldr	r3, [r4, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    18be:	685d      	ldr	r5, [r3, #4]
    18c0:	b1f5      	cbz	r5, 1900 <ICM_20948_low_power+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    18c2:	689b      	ldr	r3, [r3, #8]
    18c4:	a901      	add	r1, sp, #4
    18c6:	2201      	movs	r2, #1
    18c8:	2006      	movs	r0, #6
    18ca:	47a8      	blx	r5
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
	if (retval != ICM_20948_Stat_Ok)
    18cc:	b970      	cbnz	r0, 18ec <ICM_20948_low_power+0x50>
		return retval;
	}

	if (on)
	{
		reg.LP_EN = 1;
    18ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	if (on)
    18d2:	b96e      	cbnz	r6, 18f0 <ICM_20948_low_power+0x54>
	{
		reg.LP_EN = 1;
	}
	else
	{
		reg.LP_EN = 0;
    18d4:	f366 1345 	bfi	r3, r6, #5, #1
    18d8:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18dc:	6823      	ldr	r3, [r4, #0]
    18de:	681c      	ldr	r4, [r3, #0]
    18e0:	b174      	cbz	r4, 1900 <ICM_20948_low_power+0x64>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    18e2:	689b      	ldr	r3, [r3, #8]
    18e4:	a901      	add	r1, sp, #4
    18e6:	2201      	movs	r2, #1
    18e8:	2006      	movs	r0, #6
    18ea:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    18ec:	b002      	add	sp, #8
    18ee:	bd70      	pop	{r4, r5, r6, pc}
		return retval;
	}

	if (on)
	{
		reg.LP_EN = 1;
    18f0:	f043 0320 	orr.w	r3, r3, #32
    18f4:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    18f8:	6823      	ldr	r3, [r4, #0]
    18fa:	681c      	ldr	r4, [r3, #0]
    18fc:	2c00      	cmp	r4, #0
    18fe:	d1f0      	bne.n	18e2 <ICM_20948_low_power+0x46>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1900:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1902:	b002      	add	sp, #8
    1904:	bd70      	pop	{r4, r5, r6, pc}
    1906:	bf00      	nop

00001908 <ICM_20948_get_who_am_i>:
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
	if (whoami == NULL)
    1908:	b1c9      	cbz	r1, 193e <ICM_20948_get_who_am_i+0x36>
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
    190a:	b570      	push	{r4, r5, r6, lr}
    190c:	b082      	sub	sp, #8
    190e:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1910:	6803      	ldr	r3, [r0, #0]
    1912:	f88d 2007 	strb.w	r2, [sp, #7]
    1916:	681e      	ldr	r6, [r3, #0]
    1918:	460c      	mov	r4, r1
    191a:	4605      	mov	r5, r0
    191c:	b136      	cbz	r6, 192c <ICM_20948_get_who_am_i+0x24>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    191e:	689b      	ldr	r3, [r3, #8]
    1920:	2201      	movs	r2, #1
    1922:	f10d 0107 	add.w	r1, sp, #7
    1926:	207f      	movs	r0, #127	; 0x7f
    1928:	47b0      	blx	r6
    192a:	682b      	ldr	r3, [r5, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    192c:	685d      	ldr	r5, [r3, #4]
    192e:	b145      	cbz	r5, 1942 <ICM_20948_get_who_am_i+0x3a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1930:	689b      	ldr	r3, [r3, #8]
    1932:	4621      	mov	r1, r4
    1934:	2201      	movs	r2, #1
    1936:	2000      	movs	r0, #0
    1938:	47a8      	blx	r5
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    193a:	b002      	add	sp, #8
    193c:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
	if (whoami == NULL)
	{
		return ICM_20948_Stat_ParamErr;
    193e:	2003      	movs	r0, #3
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    1940:	4770      	bx	lr

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1942:	2002      	movs	r0, #2
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
}
    1944:	b002      	add	sp, #8
    1946:	bd70      	pop	{r4, r5, r6, pc}

00001948 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
    1948:	b500      	push	{lr}
    194a:	b083      	sub	sp, #12
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
    194c:	a902      	add	r1, sp, #8
    194e:	2300      	movs	r3, #0
    1950:	f801 3d01 	strb.w	r3, [r1, #-1]!
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
    1954:	f7ff ffd8 	bl	1908 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
    1958:	b928      	cbnz	r0, 1966 <ICM_20948_check_id+0x1e>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
    195a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    195e:	2bea      	cmp	r3, #234	; 0xea
    1960:	bf14      	ite	ne
    1962:	2004      	movne	r0, #4
    1964:	2000      	moveq	r0, #0
	{
		return ICM_20948_Stat_WrongID;
	}
	return retval;
}
    1966:	b003      	add	sp, #12
    1968:	f85d fb04 	ldr.w	pc, [sp], #4

0000196c <ICM_20948_data_ready>:

ICM_20948_Status_e ICM_20948_data_ready(ICM_20948_Device_t *pdev)
{
    196c:	b530      	push	{r4, r5, lr}
    196e:	b083      	sub	sp, #12
    1970:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1972:	6803      	ldr	r3, [r0, #0]
    1974:	f88d 2007 	strb.w	r2, [sp, #7]
    1978:	681d      	ldr	r5, [r3, #0]
    197a:	b1c5      	cbz	r5, 19ae <ICM_20948_data_ready+0x42>
    197c:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    197e:	689b      	ldr	r3, [r3, #8]
    1980:	2201      	movs	r2, #1
    1982:	f10d 0107 	add.w	r1, sp, #7
    1986:	207f      	movs	r0, #127	; 0x7f
    1988:	47a8      	blx	r5
ICM_20948_Status_e ICM_20948_data_ready(ICM_20948_Device_t *pdev)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_INT_STATUS_1_t reg;
	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	if (retval != ICM_20948_Stat_Ok)
    198a:	b970      	cbnz	r0, 19aa <ICM_20948_data_ready+0x3e>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    198c:	6823      	ldr	r3, [r4, #0]
    198e:	685c      	ldr	r4, [r3, #4]
    1990:	b16c      	cbz	r4, 19ae <ICM_20948_data_ready+0x42>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1992:	689b      	ldr	r3, [r3, #8]
    1994:	2201      	movs	r2, #1
    1996:	a901      	add	r1, sp, #4
    1998:	201a      	movs	r0, #26
    199a:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_STATUS_1, (uint8_t *)&reg, sizeof(ICM_20948_INT_STATUS_1_t));
	if (retval != ICM_20948_Stat_Ok)
    199c:	b928      	cbnz	r0, 19aa <ICM_20948_data_ready+0x3e>
	{
		return retval;
	}
	if (!reg.RAW_DATA_0_RDY_INT)
    199e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	{
		retval = ICM_20948_Stat_NoData;
    19a2:	f013 0f01 	tst.w	r3, #1
    19a6:	bf08      	it	eq
    19a8:	2006      	moveq	r0, #6
	}
	return retval;
}
    19aa:	b003      	add	sp, #12
    19ac:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    19ae:	2002      	movs	r0, #2
	if (!reg.RAW_DATA_0_RDY_INT)
	{
		retval = ICM_20948_Stat_NoData;
	}
	return retval;
}
    19b0:	b003      	add	sp, #12
    19b2:	bd30      	pop	{r4, r5, pc}

000019b4 <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
    19b4:	f011 0f13 	tst.w	r1, #19
    19b8:	d101      	bne.n	19be <ICM_20948_set_sample_mode+0xa>
	{
		return ICM_20948_Stat_SensorNotSupported;
    19ba:	2007      	movs	r0, #7
    19bc:	4770      	bx	lr

	return retval;
}

ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
    19be:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c0:	b083      	sub	sp, #12
    19c2:	2400      	movs	r4, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    19c4:	6803      	ldr	r3, [r0, #0]
    19c6:	f88d 4007 	strb.w	r4, [sp, #7]
    19ca:	681f      	ldr	r7, [r3, #0]
    19cc:	2f00      	cmp	r7, #0
    19ce:	d034      	beq.n	1a3a <ICM_20948_set_sample_mode+0x86>
    19d0:	4616      	mov	r6, r2
    19d2:	4605      	mov	r5, r0
    19d4:	460c      	mov	r4, r1
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    19d6:	689b      	ldr	r3, [r3, #8]
    19d8:	2201      	movs	r2, #1
    19da:	f10d 0107 	add.w	r1, sp, #7
    19de:	207f      	movs	r0, #127	; 0x7f
    19e0:	47b8      	blx	r7
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
	if (retval != ICM_20948_Stat_Ok)
    19e2:	bb40      	cbnz	r0, 1a36 <ICM_20948_set_sample_mode+0x82>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    19e4:	682b      	ldr	r3, [r5, #0]
    19e6:	685f      	ldr	r7, [r3, #4]
    19e8:	b33f      	cbz	r7, 1a3a <ICM_20948_set_sample_mode+0x86>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    19ea:	689b      	ldr	r3, [r3, #8]
    19ec:	a901      	add	r1, sp, #4
    19ee:	2201      	movs	r2, #1
    19f0:	2005      	movs	r0, #5
    19f2:	47b8      	blx	r7
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
	if (retval != ICM_20948_Stat_Ok)
    19f4:	b9f8      	cbnz	r0, 1a36 <ICM_20948_set_sample_mode+0x82>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
    19f6:	07e1      	lsls	r1, r4, #31
    19f8:	d505      	bpl.n	1a06 <ICM_20948_set_sample_mode+0x52>
	{
		reg.ACCEL_CYCLE = mode;
    19fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    19fe:	f366 1345 	bfi	r3, r6, #5, #1
    1a02:	f88d 3004 	strb.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
    1a06:	07a2      	lsls	r2, r4, #30
    1a08:	d505      	bpl.n	1a16 <ICM_20948_set_sample_mode+0x62>
	{
		reg.GYRO_CYCLE = mode;
    1a0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1a0e:	f366 1304 	bfi	r3, r6, #4, #1
    1a12:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
    1a16:	06e3      	lsls	r3, r4, #27
    1a18:	d505      	bpl.n	1a26 <ICM_20948_set_sample_mode+0x72>
	{
		reg.I2C_MST_CYCLE = mode;
    1a1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1a1e:	f366 1386 	bfi	r3, r6, #6, #1
    1a22:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a26:	682b      	ldr	r3, [r5, #0]
    1a28:	681c      	ldr	r4, [r3, #0]
    1a2a:	b134      	cbz	r4, 1a3a <ICM_20948_set_sample_mode+0x86>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a2c:	689b      	ldr	r3, [r3, #8]
    1a2e:	a901      	add	r1, sp, #4
    1a30:	2201      	movs	r2, #1
    1a32:	2005      	movs	r0, #5
    1a34:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1a36:	b003      	add	sp, #12
    1a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1a3a:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1a3c:	b003      	add	sp, #12
    1a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a40 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    1a40:	078b      	lsls	r3, r1, #30
    1a42:	d101      	bne.n	1a48 <ICM_20948_set_full_scale+0x8>
	{
		return ICM_20948_Stat_SensorNotSupported;
    1a44:	2007      	movs	r0, #7
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1a46:	4770      	bx	lr
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
    1a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a4c:	4606      	mov	r6, r0
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1a4e:	f011 0001 	ands.w	r0, r1, #1
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
    1a52:	b082      	sub	sp, #8
    1a54:	4617      	mov	r7, r2
    1a56:	460d      	mov	r5, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1a58:	d131      	bne.n	1abe <ICM_20948_set_full_scale+0x7e>
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1a5a:	07ab      	lsls	r3, r5, #30
	return retval;
}

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
    1a5c:	4604      	mov	r4, r0
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1a5e:	d55e      	bpl.n	1b1e <ICM_20948_set_full_scale+0xde>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1a60:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a62:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1a64:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a68:	681d      	ldr	r5, [r3, #0]
    1a6a:	2d00      	cmp	r5, #0
    1a6c:	d05b      	beq.n	1b26 <ICM_20948_set_full_scale+0xe6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1a6e:	689b      	ldr	r3, [r3, #8]
    1a70:	2201      	movs	r2, #1
    1a72:	a901      	add	r1, sp, #4
    1a74:	207f      	movs	r0, #127	; 0x7f
    1a76:	47a8      	blx	r5
    1a78:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1a7a:	685d      	ldr	r5, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    1a7c:	4320      	orrs	r0, r4
    1a7e:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1a80:	2d00      	cmp	r5, #0
    1a82:	d054      	beq.n	1b2e <ICM_20948_set_full_scale+0xee>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1a84:	2201      	movs	r2, #1
    1a86:	689b      	ldr	r3, [r3, #8]
    1a88:	4610      	mov	r0, r2
    1a8a:	4669      	mov	r1, sp
    1a8c:	47a8      	blx	r5
    1a8e:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
    1a90:	f89d 1000 	ldrb.w	r1, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1a94:	681d      	ldr	r5, [r3, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
    1a96:	f3c7 0281 	ubfx	r2, r7, #2, #2
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1a9a:	4320      	orrs	r0, r4
		reg.GYRO_FS_SEL = fss.g;
    1a9c:	f362 0142 	bfi	r1, r2, #1, #2
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1aa0:	b2c4      	uxtb	r4, r0
		reg.GYRO_FS_SEL = fss.g;
    1aa2:	f88d 1000 	strb.w	r1, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1aa6:	2d00      	cmp	r5, #0
    1aa8:	d03f      	beq.n	1b2a <ICM_20948_set_full_scale+0xea>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1aaa:	2201      	movs	r2, #1
    1aac:	689b      	ldr	r3, [r3, #8]
    1aae:	4610      	mov	r0, r2
    1ab0:	4669      	mov	r1, sp
    1ab2:	47a8      	blx	r5
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1ab4:	4320      	orrs	r0, r4
    1ab6:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    1ab8:	b002      	add	sp, #8
    1aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1abe:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ac0:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1ac2:	f88d 2003 	strb.w	r2, [sp, #3]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ac6:	681c      	ldr	r4, [r3, #0]
    1ac8:	2c00      	cmp	r4, #0
    1aca:	d032      	beq.n	1b32 <ICM_20948_set_full_scale+0xf2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1acc:	689b      	ldr	r3, [r3, #8]
    1ace:	2201      	movs	r2, #1
    1ad0:	f10d 0103 	add.w	r1, sp, #3
    1ad4:	207f      	movs	r0, #127	; 0x7f
    1ad6:	47a0      	blx	r4
    1ad8:	6833      	ldr	r3, [r6, #0]
    1ada:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1adc:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1ae0:	f1b8 0f00 	cmp.w	r8, #0
    1ae4:	d029      	beq.n	1b3a <ICM_20948_set_full_scale+0xfa>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1ae6:	689b      	ldr	r3, [r3, #8]
    1ae8:	2201      	movs	r2, #1
    1aea:	a901      	add	r1, sp, #4
    1aec:	2014      	movs	r0, #20
    1aee:	47c0      	blx	r8
    1af0:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
    1af2:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1af6:	f8d3 8000 	ldr.w	r8, [r3]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1afa:	4304      	orrs	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
    1afc:	f367 0242 	bfi	r2, r7, #1, #2

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1b00:	b2e4      	uxtb	r4, r4
		reg.ACCEL_FS_SEL = fss.a;
    1b02:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b06:	f1b8 0f00 	cmp.w	r8, #0
    1b0a:	d014      	beq.n	1b36 <ICM_20948_set_full_scale+0xf6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1b0c:	689b      	ldr	r3, [r3, #8]
    1b0e:	2201      	movs	r2, #1
    1b10:	a901      	add	r1, sp, #4
    1b12:	2014      	movs	r0, #20
    1b14:	47c0      	blx	r8
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1b16:	4304      	orrs	r4, r0
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1b18:	07ab      	lsls	r3, r5, #30
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_FS_SEL = fss.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1b1a:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1b1c:	d4a0      	bmi.n	1a60 <ICM_20948_set_full_scale+0x20>
    1b1e:	4620      	mov	r0, r4
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_FS_SEL = fss.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1b20:	b002      	add	sp, #8
    1b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1b26:	2002      	movs	r0, #2
    1b28:	e7a7      	b.n	1a7a <ICM_20948_set_full_scale+0x3a>
    1b2a:	2002      	movs	r0, #2
    1b2c:	e7c2      	b.n	1ab4 <ICM_20948_set_full_scale+0x74>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1b2e:	2002      	movs	r0, #2
    1b30:	e7ae      	b.n	1a90 <ICM_20948_set_full_scale+0x50>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1b32:	2402      	movs	r4, #2
    1b34:	e7d2      	b.n	1adc <ICM_20948_set_full_scale+0x9c>
    1b36:	2002      	movs	r0, #2
    1b38:	e7ed      	b.n	1b16 <ICM_20948_set_full_scale+0xd6>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1b3a:	2002      	movs	r0, #2
    1b3c:	e7d9      	b.n	1af2 <ICM_20948_set_full_scale+0xb2>
    1b3e:	bf00      	nop

00001b40 <ICM_20948_set_dlpf_cfg>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
    1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b42:	b085      	sub	sp, #20
    1b44:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    1b48:	078a      	lsls	r2, r1, #30
    1b4a:	d102      	bne.n	1b52 <ICM_20948_set_dlpf_cfg+0x12>
	{
		return ICM_20948_Stat_SensorNotSupported;
    1b4c:	2007      	movs	r0, #7
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1b4e:	b005      	add	sp, #20
    1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1b52:	f011 0401 	ands.w	r4, r1, #1
    1b56:	4606      	mov	r6, r0
    1b58:	460d      	mov	r5, r1
    1b5a:	d02b      	beq.n	1bb4 <ICM_20948_set_dlpf_cfg+0x74>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1b5c:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b5e:	6803      	ldr	r3, [r0, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1b60:	f88d 200b 	strb.w	r2, [sp, #11]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b64:	681c      	ldr	r4, [r3, #0]
    1b66:	2c00      	cmp	r4, #0
    1b68:	d05a      	beq.n	1c20 <ICM_20948_set_dlpf_cfg+0xe0>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1b6a:	689b      	ldr	r3, [r3, #8]
    1b6c:	2201      	movs	r2, #1
    1b6e:	f10d 010b 	add.w	r1, sp, #11
    1b72:	207f      	movs	r0, #127	; 0x7f
    1b74:	47a0      	blx	r4
    1b76:	6833      	ldr	r3, [r6, #0]
    1b78:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1b7a:	685f      	ldr	r7, [r3, #4]
    1b7c:	2f00      	cmp	r7, #0
    1b7e:	d053      	beq.n	1c28 <ICM_20948_set_dlpf_cfg+0xe8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1b80:	689b      	ldr	r3, [r3, #8]
    1b82:	2201      	movs	r2, #1
    1b84:	a903      	add	r1, sp, #12
    1b86:	2014      	movs	r0, #20
    1b88:	47b8      	blx	r7
    1b8a:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_DLPFCFG = cfg.a;
    1b8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b90:	f89d 1004 	ldrb.w	r1, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1b94:	681f      	ldr	r7, [r3, #0]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1b96:	4304      	orrs	r4, r0
		reg.ACCEL_DLPFCFG = cfg.a;
    1b98:	f361 02c5 	bfi	r2, r1, #3, #3

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1b9c:	b2e4      	uxtb	r4, r4
		reg.ACCEL_DLPFCFG = cfg.a;
    1b9e:	f88d 200c 	strb.w	r2, [sp, #12]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ba2:	2f00      	cmp	r7, #0
    1ba4:	d03e      	beq.n	1c24 <ICM_20948_set_dlpf_cfg+0xe4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1ba6:	689b      	ldr	r3, [r3, #8]
    1ba8:	2201      	movs	r2, #1
    1baa:	a903      	add	r1, sp, #12
    1bac:	2014      	movs	r0, #20
    1bae:	47b8      	blx	r7
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		reg.ACCEL_DLPFCFG = cfg.a;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1bb0:	4304      	orrs	r4, r0
    1bb2:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1bb4:	07ab      	lsls	r3, r5, #30
    1bb6:	d52c      	bpl.n	1c12 <ICM_20948_set_dlpf_cfg+0xd2>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1bb8:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bba:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1bbc:	f88d 200c 	strb.w	r2, [sp, #12]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bc0:	681d      	ldr	r5, [r3, #0]
    1bc2:	b325      	cbz	r5, 1c0e <ICM_20948_set_dlpf_cfg+0xce>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1bc4:	689b      	ldr	r3, [r3, #8]
    1bc6:	2201      	movs	r2, #1
    1bc8:	a903      	add	r1, sp, #12
    1bca:	207f      	movs	r0, #127	; 0x7f
    1bcc:	47a8      	blx	r5
    1bce:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1bd0:	685d      	ldr	r5, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    1bd2:	4320      	orrs	r0, r4
    1bd4:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1bd6:	b30d      	cbz	r5, 1c1c <ICM_20948_set_dlpf_cfg+0xdc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1bd8:	2201      	movs	r2, #1
    1bda:	689b      	ldr	r3, [r3, #8]
    1bdc:	4610      	mov	r0, r2
    1bde:	a902      	add	r1, sp, #8
    1be0:	47a8      	blx	r5
    1be2:	6833      	ldr	r3, [r6, #0]
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
    1be4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1be8:	f89d 1005 	ldrb.w	r1, [sp, #5]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bec:	681d      	ldr	r5, [r3, #0]
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1bee:	4320      	orrs	r0, r4
		reg.GYRO_DLPFCFG = cfg.g;
    1bf0:	f361 02c5 	bfi	r2, r1, #3, #3
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1bf4:	b2c4      	uxtb	r4, r0
		reg.GYRO_DLPFCFG = cfg.g;
    1bf6:	f88d 2008 	strb.w	r2, [sp, #8]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1bfa:	b16d      	cbz	r5, 1c18 <ICM_20948_set_dlpf_cfg+0xd8>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1bfc:	2201      	movs	r2, #1
    1bfe:	689b      	ldr	r3, [r3, #8]
    1c00:	4610      	mov	r0, r2
    1c02:	a902      	add	r1, sp, #8
    1c04:	47a8      	blx	r5
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1c06:	4320      	orrs	r0, r4
    1c08:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    1c0a:	b005      	add	sp, #20
    1c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c0e:	2002      	movs	r0, #2
    1c10:	e7de      	b.n	1bd0 <ICM_20948_set_dlpf_cfg+0x90>
    1c12:	4620      	mov	r0, r4
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		reg.GYRO_DLPFCFG = cfg.g;
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1c14:	b005      	add	sp, #20
    1c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c18:	2002      	movs	r0, #2
    1c1a:	e7f4      	b.n	1c06 <ICM_20948_set_dlpf_cfg+0xc6>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c1c:	2002      	movs	r0, #2
    1c1e:	e7e1      	b.n	1be4 <ICM_20948_set_dlpf_cfg+0xa4>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c20:	2402      	movs	r4, #2
    1c22:	e7aa      	b.n	1b7a <ICM_20948_set_dlpf_cfg+0x3a>
    1c24:	2002      	movs	r0, #2
    1c26:	e7c3      	b.n	1bb0 <ICM_20948_set_dlpf_cfg+0x70>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1c28:	2002      	movs	r0, #2
    1c2a:	e7af      	b.n	1b8c <ICM_20948_set_dlpf_cfg+0x4c>

00001c2c <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
    1c2c:	078b      	lsls	r3, r1, #30
    1c2e:	d101      	bne.n	1c34 <ICM_20948_enable_dlpf+0x8>
	{
		return ICM_20948_Stat_SensorNotSupported;
    1c30:	2007      	movs	r0, #7
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1c32:	4770      	bx	lr
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
    1c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c38:	4605      	mov	r5, r0
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1c3a:	f011 0001 	ands.w	r0, r1, #1
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
    1c3e:	b082      	sub	sp, #8
    1c40:	4616      	mov	r6, r2
    1c42:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
    1c44:	d131      	bne.n	1caa <ICM_20948_enable_dlpf+0x7e>
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1c46:	07bb      	lsls	r3, r7, #30
	return retval;
}

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
    1c48:	4604      	mov	r4, r0
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1c4a:	d55f      	bpl.n	1d0c <ICM_20948_enable_dlpf+0xe0>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1c4c:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1c4e:	682b      	ldr	r3, [r5, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1c50:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1c54:	681f      	ldr	r7, [r3, #0]
    1c56:	2f00      	cmp	r7, #0
    1c58:	d066      	beq.n	1d28 <ICM_20948_enable_dlpf+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1c5a:	689b      	ldr	r3, [r3, #8]
    1c5c:	2201      	movs	r2, #1
    1c5e:	a901      	add	r1, sp, #4
    1c60:	207f      	movs	r0, #127	; 0x7f
    1c62:	47b8      	blx	r7
    1c64:	682b      	ldr	r3, [r5, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1c66:	685f      	ldr	r7, [r3, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
    1c68:	4320      	orrs	r0, r4
    1c6a:	b2c4      	uxtb	r4, r0
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1c6c:	2f00      	cmp	r7, #0
    1c6e:	d05f      	beq.n	1d30 <ICM_20948_enable_dlpf+0x104>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1c70:	2201      	movs	r2, #1
    1c72:	689b      	ldr	r3, [r3, #8]
    1c74:	4610      	mov	r0, r2
    1c76:	4669      	mov	r1, sp
    1c78:	47b8      	blx	r7
    1c7a:	682b      	ldr	r3, [r5, #0]
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
		if (enable)
		{
			reg.GYRO_FCHOICE = 1;
    1c7c:	f89d 2000 	ldrb.w	r2, [sp]
	}
	if (sensors & ICM_20948_Internal_Gyr)
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1c80:	4320      	orrs	r0, r4
    1c82:	b2c4      	uxtb	r4, r0
		if (enable)
    1c84:	2e00      	cmp	r6, #0
    1c86:	d045      	beq.n	1d14 <ICM_20948_enable_dlpf+0xe8>
		{
			reg.GYRO_FCHOICE = 1;
    1c88:	f042 0201 	orr.w	r2, r2, #1
    1c8c:	f88d 2000 	strb.w	r2, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1c90:	681d      	ldr	r5, [r3, #0]
    1c92:	2d00      	cmp	r5, #0
    1c94:	d04a      	beq.n	1d2c <ICM_20948_enable_dlpf+0x100>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1c96:	2201      	movs	r2, #1
    1c98:	689b      	ldr	r3, [r3, #8]
    1c9a:	4610      	mov	r0, r2
    1c9c:	4669      	mov	r1, sp
    1c9e:	47a8      	blx	r5
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
    1ca0:	4320      	orrs	r0, r4
    1ca2:	b2c0      	uxtb	r0, r0
	}
	return retval;
}
    1ca4:	b002      	add	sp, #8
    1ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1caa:	2220      	movs	r2, #32
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cac:	682b      	ldr	r3, [r5, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1cae:	f88d 2003 	strb.w	r2, [sp, #3]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cb2:	681c      	ldr	r4, [r3, #0]
    1cb4:	2c00      	cmp	r4, #0
    1cb6:	d03d      	beq.n	1d34 <ICM_20948_enable_dlpf+0x108>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1cb8:	689b      	ldr	r3, [r3, #8]
    1cba:	2201      	movs	r2, #1
    1cbc:	f10d 0103 	add.w	r1, sp, #3
    1cc0:	207f      	movs	r0, #127	; 0x7f
    1cc2:	47a0      	blx	r4
    1cc4:	682b      	ldr	r3, [r5, #0]
    1cc6:	4604      	mov	r4, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1cc8:	f8d3 8004 	ldr.w	r8, [r3, #4]
    1ccc:	f1b8 0f00 	cmp.w	r8, #0
    1cd0:	d034      	beq.n	1d3c <ICM_20948_enable_dlpf+0x110>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1cd2:	689b      	ldr	r3, [r3, #8]
    1cd4:	2201      	movs	r2, #1
    1cd6:	a901      	add	r1, sp, #4
    1cd8:	2014      	movs	r0, #20
    1cda:	47c0      	blx	r8
    1cdc:	682b      	ldr	r3, [r5, #0]
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
		if (enable)
		{
			reg.ACCEL_FCHOICE = 1;
    1cde:	f89d 2004 	ldrb.w	r2, [sp, #4]

	if (sensors & ICM_20948_Internal_Acc)
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1ce2:	4304      	orrs	r4, r0
    1ce4:	b2e4      	uxtb	r4, r4
		if (enable)
    1ce6:	b1d6      	cbz	r6, 1d1e <ICM_20948_enable_dlpf+0xf2>
		{
			reg.ACCEL_FCHOICE = 1;
    1ce8:	f042 0201 	orr.w	r2, r2, #1
    1cec:	f88d 2004 	strb.w	r2, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1cf0:	f8d3 8000 	ldr.w	r8, [r3]
    1cf4:	f1b8 0f00 	cmp.w	r8, #0
    1cf8:	d01e      	beq.n	1d38 <ICM_20948_enable_dlpf+0x10c>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1cfa:	689b      	ldr	r3, [r3, #8]
    1cfc:	2201      	movs	r2, #1
    1cfe:	a901      	add	r1, sp, #4
    1d00:	2014      	movs	r0, #20
    1d02:	47c0      	blx	r8
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1d04:	4304      	orrs	r4, r0
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1d06:	07bb      	lsls	r3, r7, #30
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
    1d08:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
    1d0a:	d49f      	bmi.n	1c4c <ICM_20948_enable_dlpf+0x20>
    1d0c:	4620      	mov	r0, r4
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
	}
	return retval;
}
    1d0e:	b002      	add	sp, #8
    1d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			reg.GYRO_FCHOICE = 1;
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
    1d14:	f366 0200 	bfi	r2, r6, #0, #1
    1d18:	f88d 2000 	strb.w	r2, [sp]
    1d1c:	e7b8      	b.n	1c90 <ICM_20948_enable_dlpf+0x64>
		{
			reg.ACCEL_FCHOICE = 1;
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
    1d1e:	f366 0200 	bfi	r2, r6, #0, #1
    1d22:	f88d 2004 	strb.w	r2, [sp, #4]
    1d26:	e7e3      	b.n	1cf0 <ICM_20948_enable_dlpf+0xc4>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d28:	2002      	movs	r0, #2
    1d2a:	e79c      	b.n	1c66 <ICM_20948_enable_dlpf+0x3a>
    1d2c:	2002      	movs	r0, #2
    1d2e:	e7b7      	b.n	1ca0 <ICM_20948_enable_dlpf+0x74>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d30:	2002      	movs	r0, #2
    1d32:	e7a3      	b.n	1c7c <ICM_20948_enable_dlpf+0x50>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d34:	2402      	movs	r4, #2
    1d36:	e7c7      	b.n	1cc8 <ICM_20948_enable_dlpf+0x9c>
    1d38:	2002      	movs	r0, #2
    1d3a:	e7e3      	b.n	1d04 <ICM_20948_enable_dlpf+0xd8>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d3c:	2002      	movs	r0, #2
    1d3e:	e7ce      	b.n	1cde <ICM_20948_enable_dlpf+0xb2>

00001d40 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
    1d40:	b570      	push	{r4, r5, r6, lr}
    1d42:	b082      	sub	sp, #8
    1d44:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d46:	6803      	ldr	r3, [r0, #0]
    1d48:	f88d 2007 	strb.w	r2, [sp, #7]
    1d4c:	681d      	ldr	r5, [r3, #0]
    1d4e:	b30d      	cbz	r5, 1d94 <ICM_20948_i2c_master_passthrough+0x54>
    1d50:	460e      	mov	r6, r1
    1d52:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1d54:	689b      	ldr	r3, [r3, #8]
    1d56:	2201      	movs	r2, #1
    1d58:	f10d 0107 	add.w	r1, sp, #7
    1d5c:	207f      	movs	r0, #127	; 0x7f
    1d5e:	47a8      	blx	r5
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    1d60:	b9c8      	cbnz	r0, 1d96 <ICM_20948_i2c_master_passthrough+0x56>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1d62:	6823      	ldr	r3, [r4, #0]
    1d64:	685d      	ldr	r5, [r3, #4]
    1d66:	b1ad      	cbz	r5, 1d94 <ICM_20948_i2c_master_passthrough+0x54>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1d68:	689b      	ldr	r3, [r3, #8]
    1d6a:	a901      	add	r1, sp, #4
    1d6c:	2201      	movs	r2, #1
    1d6e:	200f      	movs	r0, #15
    1d70:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
    1d72:	b980      	cbnz	r0, 1d96 <ICM_20948_i2c_master_passthrough+0x56>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d74:	6822      	ldr	r2, [r4, #0]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
    1d76:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d7a:	6814      	ldr	r4, [r2, #0]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
    1d7c:	f366 0341 	bfi	r3, r6, #1, #1
    1d80:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1d84:	b134      	cbz	r4, 1d94 <ICM_20948_i2c_master_passthrough+0x54>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1d86:	6893      	ldr	r3, [r2, #8]
    1d88:	a901      	add	r1, sp, #4
    1d8a:	2201      	movs	r2, #1
    1d8c:	200f      	movs	r0, #15
    1d8e:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    1d90:	b002      	add	sp, #8
    1d92:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1d94:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    1d96:	b002      	add	sp, #8
    1d98:	bd70      	pop	{r4, r5, r6, pc}
    1d9a:	bf00      	nop

00001d9c <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
    1d9c:	b570      	push	{r4, r5, r6, lr}
    1d9e:	460e      	mov	r6, r1
    1da0:	b082      	sub	sp, #8
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
    1da2:	2100      	movs	r1, #0

	return retval;
}

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
    1da4:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
    1da6:	f7ff ffcb 	bl	1d40 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
    1daa:	2800      	cmp	r0, #0
    1dac:	d14e      	bne.n	1e4c <ICM_20948_i2c_master_enable+0xb0>
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1dae:	2230      	movs	r2, #48	; 0x30
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1db0:	6823      	ldr	r3, [r4, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1db2:	f88d 2006 	strb.w	r2, [sp, #6]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1db6:	681d      	ldr	r5, [r3, #0]
    1db8:	2d00      	cmp	r5, #0
    1dba:	d049      	beq.n	1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1dbc:	689b      	ldr	r3, [r3, #8]
    1dbe:	2201      	movs	r2, #1
    1dc0:	f10d 0106 	add.w	r1, sp, #6
    1dc4:	207f      	movs	r0, #127	; 0x7f
    1dc6:	47a8      	blx	r5
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
	if (retval != ICM_20948_Stat_Ok)
    1dc8:	2800      	cmp	r0, #0
    1dca:	d13f      	bne.n	1e4c <ICM_20948_i2c_master_enable+0xb0>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1dcc:	6823      	ldr	r3, [r4, #0]
    1dce:	685d      	ldr	r5, [r3, #4]
    1dd0:	2d00      	cmp	r5, #0
    1dd2:	d03d      	beq.n	1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1dd4:	2201      	movs	r2, #1
    1dd6:	689b      	ldr	r3, [r3, #8]
    1dd8:	4669      	mov	r1, sp
    1dda:	4610      	mov	r0, r2
    1ddc:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1dde:	2800      	cmp	r0, #0
    1de0:	d134      	bne.n	1e4c <ICM_20948_i2c_master_enable+0xb0>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
    1de2:	f89d 3000 	ldrb.w	r3, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1de6:	6821      	ldr	r1, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
    1de8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1dec:	680d      	ldr	r5, [r1, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
    1dee:	f043 0317 	orr.w	r3, r3, #23
    1df2:	f88d 3000 	strb.w	r3, [sp]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1df6:	b35d      	cbz	r5, 1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1df8:	2201      	movs	r2, #1
    1dfa:	688b      	ldr	r3, [r1, #8]
    1dfc:	4610      	mov	r0, r2
    1dfe:	4669      	mov	r1, sp
    1e00:	47a8      	blx	r5
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1e02:	bb18      	cbnz	r0, 1e4c <ICM_20948_i2c_master_enable+0xb0>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1e04:	6822      	ldr	r2, [r4, #0]
    1e06:	f88d 0007 	strb.w	r0, [sp, #7]
    1e0a:	6815      	ldr	r5, [r2, #0]
    1e0c:	b305      	cbz	r5, 1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1e0e:	6893      	ldr	r3, [r2, #8]
    1e10:	f10d 0107 	add.w	r1, sp, #7
    1e14:	2201      	movs	r2, #1
    1e16:	207f      	movs	r0, #127	; 0x7f
    1e18:	47a8      	blx	r5
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    1e1a:	b9b8      	cbnz	r0, 1e4c <ICM_20948_i2c_master_enable+0xb0>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1e1c:	6823      	ldr	r3, [r4, #0]
    1e1e:	685d      	ldr	r5, [r3, #4]
    1e20:	b1b5      	cbz	r5, 1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1e22:	689b      	ldr	r3, [r3, #8]
    1e24:	a901      	add	r1, sp, #4
    1e26:	2201      	movs	r2, #1
    1e28:	2003      	movs	r0, #3
    1e2a:	47a8      	blx	r5
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1e2c:	b970      	cbnz	r0, 1e4c <ICM_20948_i2c_master_enable+0xb0>
	{
		return retval;
	}
	if (enable)
	{
		reg.I2C_MST_EN = 1;
    1e2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	if (enable)
    1e32:	b986      	cbnz	r6, 1e56 <ICM_20948_i2c_master_enable+0xba>
	{
		reg.I2C_MST_EN = 1;
	}
	else
	{
		reg.I2C_MST_EN = 0;
    1e34:	f366 1345 	bfi	r3, r6, #5, #1
    1e38:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1e3c:	6823      	ldr	r3, [r4, #0]
    1e3e:	681c      	ldr	r4, [r3, #0]
    1e40:	b134      	cbz	r4, 1e50 <ICM_20948_i2c_master_enable+0xb4>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1e42:	689b      	ldr	r3, [r3, #8]
    1e44:	a901      	add	r1, sp, #4
    1e46:	2201      	movs	r2, #1
    1e48:	2003      	movs	r0, #3
    1e4a:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    1e4c:	b002      	add	sp, #8
    1e4e:	bd70      	pop	{r4, r5, r6, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1e50:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    1e52:	b002      	add	sp, #8
    1e54:	bd70      	pop	{r4, r5, r6, pc}
	{
		return retval;
	}
	if (enable)
	{
		reg.I2C_MST_EN = 1;
    1e56:	f043 0320 	orr.w	r3, r3, #32
    1e5a:	f88d 3004 	strb.w	r3, [sp, #4]
    1e5e:	e7ed      	b.n	1e3c <ICM_20948_i2c_master_enable+0xa0>

00001e60 <ICM_20948_i2c_master_reset>:

	return retval;
}

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
    1e60:	b530      	push	{r4, r5, lr}
    1e62:	b083      	sub	sp, #12
    1e64:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1e66:	6803      	ldr	r3, [r0, #0]
    1e68:	f88d 2007 	strb.w	r2, [sp, #7]
    1e6c:	681d      	ldr	r5, [r3, #0]
    1e6e:	b305      	cbz	r5, 1eb2 <ICM_20948_i2c_master_reset+0x52>
    1e70:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1e72:	689b      	ldr	r3, [r3, #8]
    1e74:	2201      	movs	r2, #1
    1e76:	f10d 0107 	add.w	r1, sp, #7
    1e7a:	207f      	movs	r0, #127	; 0x7f
    1e7c:	47a8      	blx	r5
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
	if (retval != ICM_20948_Stat_Ok)
    1e7e:	b9c8      	cbnz	r0, 1eb4 <ICM_20948_i2c_master_reset+0x54>
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1e80:	6823      	ldr	r3, [r4, #0]
    1e82:	685d      	ldr	r5, [r3, #4]
    1e84:	b1ad      	cbz	r5, 1eb2 <ICM_20948_i2c_master_reset+0x52>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1e86:	689b      	ldr	r3, [r3, #8]
    1e88:	a901      	add	r1, sp, #4
    1e8a:	2201      	movs	r2, #1
    1e8c:	2003      	movs	r0, #3
    1e8e:	47a8      	blx	r5
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
	if (retval != ICM_20948_Stat_Ok)
    1e90:	b980      	cbnz	r0, 1eb4 <ICM_20948_i2c_master_reset+0x54>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1e92:	6822      	ldr	r2, [r4, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
    1e94:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1e98:	6814      	ldr	r4, [r2, #0]
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
    1e9a:	f043 0302 	orr.w	r3, r3, #2
    1e9e:	f88d 3004 	strb.w	r3, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ea2:	b134      	cbz	r4, 1eb2 <ICM_20948_i2c_master_reset+0x52>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1ea4:	6893      	ldr	r3, [r2, #8]
    1ea6:	a901      	add	r1, sp, #4
    1ea8:	2201      	movs	r2, #1
    1eaa:	2003      	movs	r0, #3
    1eac:	47a0      	blx	r4
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1eae:	b003      	add	sp, #12
    1eb0:	bd30      	pop	{r4, r5, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1eb2:	2002      	movs	r0, #2
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
    1eb4:	b003      	add	sp, #12
    1eb6:	bd30      	pop	{r4, r5, pc}

00001eb8 <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
    1eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	b08b      	sub	sp, #44	; 0x2c
    1ebe:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    1ec2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
    1ec6:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
    1eca:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
    1ece:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
    1ed2:	f89d 8060 	ldrb.w	r8, [sp, #96]	; 0x60
    1ed6:	9401      	str	r4, [sp, #4]

	uint8_t slv_addr_reg;
	uint8_t slv_reg_reg;
	uint8_t slv_ctrl_reg;

	switch (slave)
    1ed8:	2903      	cmp	r1, #3
    1eda:	d86f      	bhi.n	1fbc <ICM_20948_i2c_master_configure_slave+0x104>
    1edc:	e8df f001 	tbb	[pc, r1]
    1ee0:	585e6402 	.word	0x585e6402
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
    1ee4:	2105      	movs	r1, #5
    1ee6:	9104      	str	r1, [sp, #16]

	switch (slave)
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
    1ee8:	2104      	movs	r1, #4
    1eea:	9102      	str	r1, [sp, #8]
	uint8_t slv_ctrl_reg;

	switch (slave)
	{
	case 0:
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
    1eec:	2703      	movs	r7, #3
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1eee:	2430      	movs	r4, #48	; 0x30
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ef0:	6801      	ldr	r1, [r0, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    1ef2:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1ef6:	680d      	ldr	r5, [r1, #0]
    1ef8:	2d00      	cmp	r5, #0
    1efa:	d05b      	beq.n	1fb4 <ICM_20948_i2c_master_configure_slave+0xfc>
    1efc:	9305      	str	r3, [sp, #20]
    1efe:	9203      	str	r2, [sp, #12]
    1f00:	4604      	mov	r4, r0
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1f02:	688b      	ldr	r3, [r1, #8]
    1f04:	2201      	movs	r2, #1
    1f06:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    1f0a:	207f      	movs	r0, #127	; 0x7f
    1f0c:	47a8      	blx	r5
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
	if (retval != ICM_20948_Stat_Ok)
    1f0e:	2800      	cmp	r0, #0
    1f10:	d13b      	bne.n	1f8a <ICM_20948_i2c_master_configure_slave+0xd2>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
    1f12:	f89d 301c 	ldrb.w	r3, [sp, #28]
    1f16:	9a03      	ldr	r2, [sp, #12]
    1f18:	f362 0306 	bfi	r3, r2, #0, #7
    1f1c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (Rw)
    1f20:	b126      	cbz	r6, 1f2c <ICM_20948_i2c_master_configure_slave+0x74>
	{
		address.RNW = 1;
    1f22:	b2db      	uxtb	r3, r3
    1f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f28:	f88d 301c 	strb.w	r3, [sp, #28]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f2c:	6823      	ldr	r3, [r4, #0]
    1f2e:	681d      	ldr	r5, [r3, #0]
    1f30:	2d00      	cmp	r5, #0
    1f32:	d03f      	beq.n	1fb4 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1f34:	689b      	ldr	r3, [r3, #8]
    1f36:	4638      	mov	r0, r7
    1f38:	2201      	movs	r2, #1
    1f3a:	a907      	add	r1, sp, #28
    1f3c:	47a8      	blx	r5
	if (Rw)
	{
		address.RNW = 1;
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
	if (retval != ICM_20948_Stat_Ok)
    1f3e:	bb20      	cbnz	r0, 1f8a <ICM_20948_i2c_master_configure_slave+0xd2>
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f40:	6823      	ldr	r3, [r4, #0]
		return retval;
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
    1f42:	f89d 2014 	ldrb.w	r2, [sp, #20]
    1f46:	f88d 2020 	strb.w	r2, [sp, #32]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f4a:	681d      	ldr	r5, [r3, #0]
    1f4c:	2d00      	cmp	r5, #0
    1f4e:	d031      	beq.n	1fb4 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1f50:	689b      	ldr	r3, [r3, #8]
    1f52:	9802      	ldr	r0, [sp, #8]
    1f54:	2201      	movs	r2, #1
    1f56:	a908      	add	r1, sp, #32
    1f58:	47a8      	blx	r5

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
	if (retval != ICM_20948_Stat_Ok)
    1f5a:	b9b0      	cbnz	r0, 1f8a <ICM_20948_i2c_master_configure_slave+0xd2>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
    1f5c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f60:	6822      	ldr	r2, [r4, #0]
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
    1f62:	9901      	ldr	r1, [sp, #4]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f64:	6814      	ldr	r4, [r2, #0]
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
    1f66:	f36b 0303 	bfi	r3, fp, #0, #4
	ctrl.EN = enable;
    1f6a:	f36a 13c7 	bfi	r3, sl, #7, #1
	ctrl.REG_DIS = data_only;
    1f6e:	f369 1345 	bfi	r3, r9, #5, #1
	ctrl.GRP = grp;
    1f72:	f368 1304 	bfi	r3, r8, #4, #1
	ctrl.BYTE_SW = swap;
    1f76:	f361 1386 	bfi	r3, r1, #6, #1
    1f7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1f7e:	b1cc      	cbz	r4, 1fb4 <ICM_20948_i2c_master_configure_slave+0xfc>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1f80:	6893      	ldr	r3, [r2, #8]
    1f82:	9804      	ldr	r0, [sp, #16]
    1f84:	2201      	movs	r2, #1
    1f86:	a909      	add	r1, sp, #36	; 0x24
    1f88:	47a0      	blx	r4
	{
		return retval;
	}

	return retval;
}
    1f8a:	b00b      	add	sp, #44	; 0x2c
    1f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
    1f90:	2111      	movs	r1, #17
    1f92:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
    1f94:	2110      	movs	r1, #16
    1f96:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
	case 3:
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
    1f98:	270f      	movs	r7, #15
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
		break;
    1f9a:	e7a8      	b.n	1eee <ICM_20948_i2c_master_configure_slave+0x36>
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
    1f9c:	210d      	movs	r1, #13
    1f9e:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
    1fa0:	210c      	movs	r1, #12
    1fa2:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
		break;
	case 2:
		slv_addr_reg = AGB3_REG_I2C_SLV2_ADDR;
    1fa4:	270b      	movs	r7, #11
		slv_reg_reg = AGB3_REG_I2C_SLV2_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV2_CTRL;
		break;
    1fa6:	e7a2      	b.n	1eee <ICM_20948_i2c_master_configure_slave+0x36>
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV1_CTRL;
    1fa8:	2109      	movs	r1, #9
    1faa:	9104      	str	r1, [sp, #16]
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV1_REG;
    1fac:	2108      	movs	r1, #8
    1fae:	9102      	str	r1, [sp, #8]
		slv_addr_reg = AGB3_REG_I2C_SLV0_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV0_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV0_CTRL;
		break;
	case 1:
		slv_addr_reg = AGB3_REG_I2C_SLV1_ADDR;
    1fb0:	2707      	movs	r7, #7
    1fb2:	e79c      	b.n	1eee <ICM_20948_i2c_master_configure_slave+0x36>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    1fb4:	2002      	movs	r0, #2
	{
		return retval;
	}

	return retval;
}
    1fb6:	b00b      	add	sp, #44	; 0x2c
    1fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		slv_addr_reg = AGB3_REG_I2C_SLV3_ADDR;
		slv_reg_reg = AGB3_REG_I2C_SLV3_REG;
		slv_ctrl_reg = AGB3_REG_I2C_SLV3_CTRL;
		break;
	default:
		return ICM_20948_Stat_ParamErr;
    1fbc:	2003      	movs	r0, #3
    1fbe:	e7e4      	b.n	1f8a <ICM_20948_i2c_master_configure_slave+0xd2>

00001fc0 <ICM_20948_get_agmt>:
}

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
	if (pagmt == NULL)
    1fc0:	2900      	cmp	r1, #0
    1fc2:	f000 80bb 	beq.w	213c <ICM_20948_get_agmt+0x17c>
	return retval;
}

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
    1fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc8:	b08b      	sub	sp, #44	; 0x2c
    1fca:	2200      	movs	r2, #0
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    1fcc:	6803      	ldr	r3, [r0, #0]
    1fce:	f88d 200f 	strb.w	r2, [sp, #15]
    1fd2:	681d      	ldr	r5, [r3, #0]
    1fd4:	460c      	mov	r4, r1
    1fd6:	4606      	mov	r6, r0
    1fd8:	2d00      	cmp	r5, #0
    1fda:	f000 80c8 	beq.w	216e <ICM_20948_get_agmt+0x1ae>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    1fde:	689b      	ldr	r3, [r3, #8]
    1fe0:	2201      	movs	r2, #1
    1fe2:	f10d 010f 	add.w	r1, sp, #15
    1fe6:	207f      	movs	r0, #127	; 0x7f
    1fe8:	47a8      	blx	r5
    1fea:	6833      	ldr	r3, [r6, #0]
    1fec:	4605      	mov	r5, r0
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    1fee:	685f      	ldr	r7, [r3, #4]
    1ff0:	2f00      	cmp	r7, #0
    1ff2:	f000 80ba 	beq.w	216a <ICM_20948_get_agmt+0x1aa>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    1ff6:	689b      	ldr	r3, [r3, #8]
    1ff8:	2217      	movs	r2, #23
    1ffa:	a904      	add	r1, sp, #16
    1ffc:	202d      	movs	r0, #45	; 0x2d
    1ffe:	47b8      	blx	r7
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    2000:	f89d 3013 	ldrb.w	r3, [sp, #19]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    2004:	f89d e014 	ldrb.w	lr, [sp, #20]
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    2008:	f89d 7012 	ldrb.w	r7, [sp, #18]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    200c:	f89d 1015 	ldrb.w	r1, [sp, #21]

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    2010:	f89d c010 	ldrb.w	ip, [sp, #16]
    2014:	f89d 2011 	ldrb.w	r2, [sp, #17]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    2018:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    201c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    2020:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2024:	f89d e016 	ldrb.w	lr, [sp, #22]
	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
    2028:	8067      	strh	r7, [r4, #2]

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    202a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    202e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
    2032:	8022      	strh	r2, [r4, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    2034:	f89d e018 	ldrb.w	lr, [sp, #24]
    2038:	f89d 2019 	ldrb.w	r2, [sp, #25]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    203c:	f89d 701b 	ldrb.w	r7, [sp, #27]
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
    2040:	80a1      	strh	r1, [r4, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    2042:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    2046:	f89d e01a 	ldrb.w	lr, [sp, #26]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    204a:	f89d 101d 	ldrb.w	r1, [sp, #29]

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
    204e:	80e3      	strh	r3, [r4, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    2050:	ea47 2e0e 	orr.w	lr, r7, lr, lsl #8

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    2054:	f89d 701c 	ldrb.w	r7, [sp, #28]

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    2058:	f89d 301f 	ldrb.w	r3, [sp, #31]
	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
    205c:	8122      	strh	r2, [r4, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    205e:	ea41 2707 	orr.w	r7, r1, r7, lsl #8

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    2062:	f89d 1020 	ldrb.w	r1, [sp, #32]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    2066:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
    206a:	f8a4 e00a 	strh.w	lr, [r4, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    206e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    2072:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    2076:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
    207a:	8267      	strh	r7, [r4, #18]

	pagmt->magStat1 = buff[14];
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    207c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    2080:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
    2084:	f89d 701e 	ldrb.w	r7, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
    2088:	81e2      	strh	r2, [r4, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    208a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));

	pagmt->magStat1 = buff[14];
    208e:	7567      	strb	r7, [r4, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
    2090:	81a1      	strh	r1, [r4, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
    2092:	8223      	strh	r3, [r4, #16]
	pagmt->magStat2 = buff[22];
    2094:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    2098:	75a3      	strb	r3, [r4, #22]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    209a:	6833      	ldr	r3, [r6, #0]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    209c:	2220      	movs	r2, #32
    209e:	f88d 200e 	strb.w	r2, [sp, #14]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    20a2:	681f      	ldr	r7, [r3, #0]
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
    20a4:	4305      	orrs	r5, r0
    20a6:	b2ed      	uxtb	r5, r5
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    20a8:	2f00      	cmp	r7, #0
    20aa:	d05c      	beq.n	2166 <ICM_20948_get_agmt+0x1a6>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    20ac:	689b      	ldr	r3, [r3, #8]
    20ae:	2201      	movs	r2, #1
    20b0:	f10d 010e 	add.w	r1, sp, #14
    20b4:	207f      	movs	r0, #127	; 0x7f
    20b6:	47b8      	blx	r7
    20b8:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    20ba:	685f      	ldr	r7, [r3, #4]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
    20bc:	4305      	orrs	r5, r0
    20be:	b2ed      	uxtb	r5, r5
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    20c0:	2f00      	cmp	r7, #0
    20c2:	d04e      	beq.n	2162 <ICM_20948_get_agmt+0x1a2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    20c4:	689b      	ldr	r3, [r3, #8]
    20c6:	2201      	movs	r2, #1
    20c8:	a901      	add	r1, sp, #4
    20ca:	2014      	movs	r0, #20
    20cc:	47b8      	blx	r7
    20ce:	6833      	ldr	r3, [r6, #0]

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    20d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    20d4:	7d21      	ldrb	r1, [r4, #20]
{
	if (bank > 3)
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
    20d6:	2720      	movs	r7, #32
    20d8:	f88d 700d 	strb.w	r7, [sp, #13]

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    20dc:	f3c2 0241 	ubfx	r2, r2, #1, #2
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    20e0:	681f      	ldr	r7, [r3, #0]
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
    20e2:	4305      	orrs	r5, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    20e4:	f362 0101 	bfi	r1, r2, #0, #2
	pagmt->magStat2 = buff[22];

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
    20e8:	b2ed      	uxtb	r5, r5
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
    20ea:	7521      	strb	r1, [r4, #20]
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
    20ec:	2f00      	cmp	r7, #0
    20ee:	d036      	beq.n	215e <ICM_20948_get_agmt+0x19e>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
    20f0:	689b      	ldr	r3, [r3, #8]
    20f2:	2201      	movs	r2, #1
    20f4:	f10d 010d 	add.w	r1, sp, #13
    20f8:	207f      	movs	r0, #127	; 0x7f
    20fa:	47b8      	blx	r7
    20fc:	6833      	ldr	r3, [r6, #0]
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    20fe:	685f      	ldr	r7, [r3, #4]
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
    2100:	4305      	orrs	r5, r0
    2102:	b2ed      	uxtb	r5, r5
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    2104:	b1e7      	cbz	r7, 2140 <ICM_20948_get_agmt+0x180>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    2106:	2201      	movs	r2, #1
    2108:	689b      	ldr	r3, [r3, #8]
    210a:	4610      	mov	r0, r2
    210c:	a902      	add	r1, sp, #8
    210e:	47b8      	blx	r7
    2110:	6832      	ldr	r2, [r6, #0]
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2112:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2116:	7d21      	ldrb	r1, [r4, #20]
    2118:	6856      	ldr	r6, [r2, #4]
    211a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    211e:	4328      	orrs	r0, r5
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2120:	f363 0183 	bfi	r1, r3, #2, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    2124:	b2c5      	uxtb	r5, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2126:	7521      	strb	r1, [r4, #20]
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
}

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
    2128:	b31e      	cbz	r6, 2172 <ICM_20948_get_agmt+0x1b2>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
    212a:	6893      	ldr	r3, [r2, #8]
    212c:	a903      	add	r1, sp, #12
    212e:	2201      	movs	r2, #1
    2130:	2015      	movs	r0, #21
    2132:	47b0      	blx	r6
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    2134:	4328      	orrs	r0, r5
    2136:	b2c0      	uxtb	r0, r0

	return retval;
}
    2138:	b00b      	add	sp, #44	; 0x2c
    213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
	if (pagmt == NULL)
	{
		return ICM_20948_Stat_ParamErr;
    213c:	2003      	movs	r0, #3
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));

	return retval;
}
    213e:	4770      	bx	lr
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2140:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2144:	7d22      	ldrb	r2, [r4, #20]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
    2146:	f045 0502 	orr.w	r5, r5, #2

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    214a:	2002      	movs	r0, #2
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    214c:	f3c3 0341 	ubfx	r3, r3, #1, #2
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    2150:	4328      	orrs	r0, r5
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2152:	f363 0283 	bfi	r2, r3, #2, #2
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
    2156:	b2c0      	uxtb	r0, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
    2158:	7522      	strb	r2, [r4, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));

	return retval;
}
    215a:	b00b      	add	sp, #44	; 0x2c
    215c:	bdf0      	pop	{r4, r5, r6, r7, pc}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    215e:	2002      	movs	r0, #2
    2160:	e7cd      	b.n	20fe <ICM_20948_get_agmt+0x13e>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    2162:	2002      	movs	r0, #2
    2164:	e7b4      	b.n	20d0 <ICM_20948_get_agmt+0x110>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    2166:	2002      	movs	r0, #2
    2168:	e7a7      	b.n	20ba <ICM_20948_get_agmt+0xfa>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    216a:	2002      	movs	r0, #2
    216c:	e748      	b.n	2000 <ICM_20948_get_agmt+0x40>

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->write == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    216e:	2502      	movs	r5, #2
    2170:	e73d      	b.n	1fee <ICM_20948_get_agmt+0x2e>

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
	if (pdev->_serif->read == NULL)
	{
		return ICM_20948_Stat_NotImpl;
    2172:	2002      	movs	r0, #2
    2174:	e7de      	b.n	2134 <ICM_20948_get_agmt+0x174>
    2176:	bf00      	nop

00002178 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2178:	2000      	movs	r0, #0
    217a:	4770      	bx	lr

0000217c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    217c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    2180:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
	}
    2184:	1a10      	subs	r0, r2, r0
    2186:	4770      	bx	lr

00002188 <TwoWire::peek()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2188:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    218c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    2190:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    2192:	bf86      	itte	hi
    2194:	181b      	addhi	r3, r3, r0
    2196:	7e18      	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2198:	f04f 30ff 	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    219c:	4770      	bx	lr
    219e:	bf00      	nop

000021a0 <TwoWire::flush()>:
	virtual void flush(void) {
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop

000021a4 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    21a4:	b538      	push	{r3, r4, r5, lr}
    21a6:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    21a8:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
    21ac:	b190      	cbz	r0, 21d4 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    21ae:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    21b2:	4614      	mov	r4, r2
    21b4:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    21b8:	4294      	cmp	r4, r2
    21ba:	d80c      	bhi.n	21d6 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    21bc:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    21c0:	4418      	add	r0, r3
    21c2:	4622      	mov	r2, r4
    21c4:	f000 f9b0 	bl	2528 <memcpy>
		txBufferLength += quantity;
    21c8:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    21cc:	4423      	add	r3, r4
    21ce:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    21d2:	4620      	mov	r0, r4
		return quantity;
	}
	return 0;
}
    21d4:	bd38      	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    21d6:	2001      	movs	r0, #1
    21d8:	4614      	mov	r4, r2
    21da:	7128      	strb	r0, [r5, #4]
    21dc:	e7ee      	b.n	21bc <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    21de:	bf00      	nop

000021e0 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    21e0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    21e4:	b16b      	cbz	r3, 2202 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    21e6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    21ea:	2b20      	cmp	r3, #32
    21ec:	d807      	bhi.n	21fe <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    21ee:	18c2      	adds	r2, r0, r3
    21f0:	3301      	adds	r3, #1
    21f2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    21f6:	2001      	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    21f8:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
    21fc:	4770      	bx	lr
    21fe:	2301      	movs	r3, #1
    2200:	7103      	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    2202:	2000      	movs	r0, #0
    2204:	4770      	bx	lr
    2206:	bf00      	nop

00002208 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    2208:	b538      	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    220a:	6902      	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    220c:	78d4      	ldrb	r4, [r2, #3]
    220e:	b2e4      	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2210:	06e1      	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    2212:	4605      	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2214:	d524      	bpl.n	2260 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2216:	2310      	movs	r3, #16
    2218:	70d3      	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    221a:	0663      	lsls	r3, r4, #25
    221c:	d51f      	bpl.n	225e <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    221e:	f004 0404 	and.w	r4, r4, #4
    2222:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    2226:	2c00      	cmp	r4, #0
    2228:	d05a      	beq.n	22e0 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    222a:	4942      	ldr	r1, [pc, #264]	; (2334 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    222c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    222e:	2300      	movs	r3, #0
    2230:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    2232:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2236:	2a00      	cmp	r2, #0
    2238:	d066      	beq.n	2308 <TwoWire::isr()+0x100>
				user_onRequest();
    223a:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    223c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    2240:	2b00      	cmp	r3, #0
    2242:	d061      	beq.n	2308 <TwoWire::isr()+0x100>
    2244:	692b      	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2246:	22d0      	movs	r2, #208	; 0xd0
    2248:	709a      	strb	r2, [r3, #2]
    224a:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    224c:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    2250:	711a      	strb	r2, [r3, #4]
    2252:	692b      	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    2254:	2201      	movs	r2, #1
    2256:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    225a:	2202      	movs	r2, #2
    225c:	70da      	strb	r2, [r3, #3]
    225e:	bd38      	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    2260:	f004 0340 	and.w	r3, r4, #64	; 0x40
    2264:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    2268:	2b00      	cmp	r3, #0
    226a:	d1d8      	bne.n	221e <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    226c:	7993      	ldrb	r3, [r2, #6]
    226e:	b2db      	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    2270:	f003 0160 	and.w	r1, r3, #96	; 0x60
    2274:	2960      	cmp	r1, #96	; 0x60
    2276:	d04e      	beq.n	2316 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    2278:	7893      	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    227a:	f003 0310 	and.w	r3, r3, #16
    227e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    2282:	b1b3      	cbz	r3, 22b2 <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    2284:	f014 0401 	ands.w	r4, r4, #1
    2288:	d137      	bne.n	22fa <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    228a:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    228e:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    2292:	4299      	cmp	r1, r3
    2294:	d94b      	bls.n	232e <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    2296:	1c59      	adds	r1, r3, #1
    2298:	442b      	add	r3, r5
    229a:	f885 105c 	strb.w	r1, [r5, #92]	; 0x5c
    229e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    22a2:	7113      	strb	r3, [r2, #4]
    22a4:	692b      	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    22a6:	22d0      	movs	r2, #208	; 0xd0
    22a8:	709a      	strb	r2, [r3, #2]
    22aa:	692b      	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    22ac:	2202      	movs	r2, #2
    22ae:	70da      	strb	r2, [r3, #3]
    22b0:	e7d5      	b.n	225e <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    22b2:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    22b6:	7993      	ldrb	r3, [r2, #6]
    22b8:	f043 0320 	orr.w	r3, r3, #32
    22bc:	7193      	strb	r3, [r2, #6]
    22be:	692b      	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    22c0:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    22c4:	791a      	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    22c6:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    22c8:	b2d2      	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    22ca:	d8c6      	bhi.n	225a <TwoWire::isr()+0x52>
    22cc:	4819      	ldr	r0, [pc, #100]	; (2334 <TwoWire::isr()+0x12c>)
    22ce:	7800      	ldrb	r0, [r0, #0]
    22d0:	2800      	cmp	r0, #0
    22d2:	d0c2      	beq.n	225a <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    22d4:	1868      	adds	r0, r5, r1
    22d6:	3101      	adds	r1, #1
    22d8:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
    22dc:	7602      	strb	r2, [r0, #24]
    22de:	e7bc      	b.n	225a <TwoWire::isr()+0x52>
    22e0:	692a      	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    22e2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    22e6:	23c0      	movs	r3, #192	; 0xc0
    22e8:	7093      	strb	r3, [r2, #2]
    22ea:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    22ec:	4a11      	ldr	r2, [pc, #68]	; (2334 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    22ee:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    22f0:	2101      	movs	r1, #1
    22f2:	7011      	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    22f4:	2202      	movs	r2, #2
    22f6:	70da      	strb	r2, [r3, #3]
    22f8:	e7b1      	b.n	225e <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    22fa:	23c0      	movs	r3, #192	; 0xc0
    22fc:	7093      	strb	r3, [r2, #2]
    22fe:	692b      	ldr	r3, [r5, #16]
			data = port().D;
    2300:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2302:	2202      	movs	r2, #2
    2304:	70da      	strb	r2, [r3, #3]
    2306:	e7aa      	b.n	225e <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2308:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    230a:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    230c:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    2310:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
    2314:	e796      	b.n	2244 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    2316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    231a:	7193      	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    231c:	6eab      	ldr	r3, [r5, #104]	; 0x68
    231e:	b123      	cbz	r3, 232a <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    2320:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    2324:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    2328:	4798      	blx	r3
    232a:	692a      	ldr	r2, [r5, #16]
    232c:	e7a4      	b.n	2278 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    232e:	7114      	strb	r4, [r2, #4]
    2330:	e7b8      	b.n	22a4 <TwoWire::isr()+0x9c>
    2332:	bf00      	nop
    2334:	1fff140c 	.word	0x1fff140c

00002338 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    2338:	4801      	ldr	r0, [pc, #4]	; (2340 <i2c0_isr+0x8>)
    233a:	f7ff bf65 	b.w	2208 <TwoWire::isr()>
    233e:	bf00      	nop
    2340:	1fff079c 	.word	0x1fff079c

00002344 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    2344:	4801      	ldr	r0, [pc, #4]	; (234c <i2c1_isr+0x8>)
    2346:	f7ff bf5f 	b.w	2208 <TwoWire::isr()>
    234a:	bf00      	nop
    234c:	1fff0808 	.word	0x1fff0808

00002350 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    2350:	4801      	ldr	r0, [pc, #4]	; (2358 <i2c2_isr+0x8>)
    2352:	f7ff bf59 	b.w	2208 <TwoWire::isr()>
    2356:	bf00      	nop
    2358:	1fff0730 	.word	0x1fff0730

0000235c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    235c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    235e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2360:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2362:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2364:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2366:	d003      	beq.n	2370 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2368:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    236c:	f001 bbd0 	b.w	3b10 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2370:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2372:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2376:	4718      	bx	r3

00002378 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2378:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    237a:	4b46      	ldr	r3, [pc, #280]	; (2494 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    237c:	4a46      	ldr	r2, [pc, #280]	; (2498 <_spi_dma_rxISR0()+0x120>)
    237e:	6b98      	ldr	r0, [r3, #56]	; 0x38
    2380:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    2382:	7901      	ldrb	r1, [r0, #4]
    2384:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2386:	4945      	ldr	r1, [pc, #276]	; (249c <_spi_dma_rxISR0()+0x124>)
    2388:	7922      	ldrb	r2, [r4, #4]
    238a:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    238e:	7900      	ldrb	r0, [r0, #4]
    2390:	7008      	strb	r0, [r1, #0]
    2392:	2a00      	cmp	r2, #0
    2394:	d046      	beq.n	2424 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    2396:	6859      	ldr	r1, [r3, #4]
    2398:	68c9      	ldr	r1, [r1, #12]
    239a:	428a      	cmp	r2, r1
    239c:	d83e      	bhi.n	241c <_spi_dma_rxISR0()+0xa4>
    239e:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    23a0:	8bcc      	ldrh	r4, [r1, #30]
    23a2:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    23a4:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    23a8:	d465      	bmi.n	2476 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    23aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
    23ae:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    23b0:	8bc8      	ldrh	r0, [r1, #30]
    23b2:	b280      	uxth	r0, r0
    23b4:	82c8      	strh	r0, [r1, #22]
    23b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    23b8:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    23ba:	8bc8      	ldrh	r0, [r1, #30]
    23bc:	0400      	lsls	r0, r0, #16
    23be:	d452      	bmi.n	2466 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    23c0:	f3c2 000e 	ubfx	r0, r2, #0, #15
    23c4:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    23c6:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    23c8:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    23ca:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    23cc:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    23d0:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    23d2:	bf18      	it	ne
    23d4:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    23d6:	631c      	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    23d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
    23da:	482e      	ldr	r0, [pc, #184]	; (2494 <_spi_dma_rxISR0()+0x11c>)
    23dc:	6809      	ldr	r1, [r1, #0]
    23de:	680d      	ldr	r5, [r1, #0]
    23e0:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    23e4:	42a5      	cmp	r5, r4
    23e6:	d036      	beq.n	2456 <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    23e8:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    23ea:	68c4      	ldr	r4, [r0, #12]
    23ec:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    23f0:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    23f2:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    23f4:	bf15      	itete	ne
    23f6:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    23f8:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    23fa:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    23fc:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    23fe:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2402:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2404:	6344      	str	r4, [r0, #52]	; 0x34
    2406:	6b99      	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2408:	4b25      	ldr	r3, [pc, #148]	; (24a0 <_spi_dma_rxISR0()+0x128>)
    240a:	7909      	ldrb	r1, [r1, #4]
    240c:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    240e:	4921      	ldr	r1, [pc, #132]	; (2494 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    2410:	b112      	cbz	r2, 2418 <_spi_dma_rxISR0()+0xa0>
    2412:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    2414:	7912      	ldrb	r2, [r2, #4]
    2416:	701a      	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2418:	bcf0      	pop	{r4, r5, r6, r7}
    241a:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    241c:	1a52      	subs	r2, r2, r1
    241e:	631a      	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2420:	2201      	movs	r2, #1
    2422:	e7d9      	b.n	23d8 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2424:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2426:	6819      	ldr	r1, [r3, #0]
    2428:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    242a:	4c1e      	ldr	r4, [pc, #120]	; (24a4 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    242c:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    242e:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2430:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2432:	682d      	ldr	r5, [r5, #0]
    2434:	4e1c      	ldr	r6, [pc, #112]	; (24a8 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2436:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    243a:	2703      	movs	r7, #3
    243c:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    243e:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2440:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
    2444:	d11f      	bne.n	2486 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2446:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2448:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    244a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    244c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    244e:	d01e      	beq.n	248e <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2450:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2452:	f001 bb5d 	b.w	3b10 <EventResponder::triggerEventNotImmediate()>
    2456:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2458:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    245c:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    245e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    2462:	6348      	str	r0, [r1, #52]	; 0x34
    2464:	e7cf      	b.n	2406 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2466:	8bcc      	ldrh	r4, [r1, #30]
    2468:	f3c2 0008 	ubfx	r0, r2, #0, #9
    246c:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2470:	4320      	orrs	r0, r4
    2472:	83c8      	strh	r0, [r1, #30]
    2474:	e7a7      	b.n	23c6 <_spi_dma_rxISR0()+0x4e>
    2476:	8bcc      	ldrh	r4, [r1, #30]
    2478:	f3c0 0008 	ubfx	r0, r0, #0, #9
    247c:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2480:	4320      	orrs	r0, r4
    2482:	83c8      	strh	r0, [r1, #30]
    2484:	e794      	b.n	23b0 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2486:	462b      	mov	r3, r5
    2488:	4611      	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    248a:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    248c:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    248e:	6883      	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2490:	bcf0      	pop	{r4, r5, r6, r7}
    2492:	4718      	bx	r3
    2494:	1fff0874 	.word	0x1fff0874
    2498:	4000801f 	.word	0x4000801f
    249c:	4000801c 	.word	0x4000801c
    24a0:	4000801b 	.word	0x4000801b
    24a4:	ff0f0000 	.word	0xff0f0000
    24a8:	0000235d 	.word	0x0000235d

000024ac <SPIClass::begin()>:
    24ac:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    24b0:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    24b2:	681c      	ldr	r4, [r3, #0]
    24b4:	6859      	ldr	r1, [r3, #4]
    24b6:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    24b8:	4f16      	ldr	r7, [pc, #88]	; (2514 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    24ba:	4e17      	ldr	r6, [pc, #92]	; (2518 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    24bc:	4329      	orrs	r1, r5
    24be:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    24c0:	4d16      	ldr	r5, [pc, #88]	; (251c <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    24c2:	4917      	ldr	r1, [pc, #92]	; (2520 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    24c4:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    24c6:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    24c8:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    24ca:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    24cc:	7a41      	ldrb	r1, [r0, #9]
    24ce:	4a15      	ldr	r2, [pc, #84]	; (2524 <SPIClass::begin()+0x78>)
    24d0:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    24d2:	310c      	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    24d4:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    24d8:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    24dc:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    24e0:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    24e2:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    24e4:	7a01      	ldrb	r1, [r0, #8]
    24e6:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    24e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    24ec:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    24ee:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    24f0:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    24f4:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    24f6:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    24f8:	7a81      	ldrb	r1, [r0, #10]
    24fa:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    24fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2500:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    2504:	6c59      	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2506:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    250a:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    250c:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    250e:	6019      	str	r1, [r3, #0]
}
    2510:	4770      	bx	lr
    2512:	bf00      	nop
    2514:	001f4001 	.word	0x001f4001
    2518:	38001001 	.word	0x38001001
    251c:	78001001 	.word	0x78001001
    2520:	801f0000 	.word	0x801f0000
    2524:	00005a90 	.word	0x00005a90

00002528 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2528:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    252a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    252e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2532:	d16d      	bne.n	2610 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2534:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2536:	d341      	bcc.n	25bc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2538:	f851 3b04 	ldr.w	r3, [r1], #4
    253c:	f840 3b04 	str.w	r3, [r0], #4
    2540:	f851 3b04 	ldr.w	r3, [r1], #4
    2544:	f840 3b04 	str.w	r3, [r0], #4
    2548:	f851 3b04 	ldr.w	r3, [r1], #4
    254c:	f840 3b04 	str.w	r3, [r0], #4
    2550:	f851 3b04 	ldr.w	r3, [r1], #4
    2554:	f840 3b04 	str.w	r3, [r0], #4
    2558:	f851 3b04 	ldr.w	r3, [r1], #4
    255c:	f840 3b04 	str.w	r3, [r0], #4
    2560:	f851 3b04 	ldr.w	r3, [r1], #4
    2564:	f840 3b04 	str.w	r3, [r0], #4
    2568:	f851 3b04 	ldr.w	r3, [r1], #4
    256c:	f840 3b04 	str.w	r3, [r0], #4
    2570:	f851 3b04 	ldr.w	r3, [r1], #4
    2574:	f840 3b04 	str.w	r3, [r0], #4
    2578:	f851 3b04 	ldr.w	r3, [r1], #4
    257c:	f840 3b04 	str.w	r3, [r0], #4
    2580:	f851 3b04 	ldr.w	r3, [r1], #4
    2584:	f840 3b04 	str.w	r3, [r0], #4
    2588:	f851 3b04 	ldr.w	r3, [r1], #4
    258c:	f840 3b04 	str.w	r3, [r0], #4
    2590:	f851 3b04 	ldr.w	r3, [r1], #4
    2594:	f840 3b04 	str.w	r3, [r0], #4
    2598:	f851 3b04 	ldr.w	r3, [r1], #4
    259c:	f840 3b04 	str.w	r3, [r0], #4
    25a0:	f851 3b04 	ldr.w	r3, [r1], #4
    25a4:	f840 3b04 	str.w	r3, [r0], #4
    25a8:	f851 3b04 	ldr.w	r3, [r1], #4
    25ac:	f840 3b04 	str.w	r3, [r0], #4
    25b0:	f851 3b04 	ldr.w	r3, [r1], #4
    25b4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    25b8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    25ba:	d2bd      	bcs.n	2538 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    25bc:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    25be:	d311      	bcc.n	25e4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    25c0:	f851 3b04 	ldr.w	r3, [r1], #4
    25c4:	f840 3b04 	str.w	r3, [r0], #4
    25c8:	f851 3b04 	ldr.w	r3, [r1], #4
    25cc:	f840 3b04 	str.w	r3, [r0], #4
    25d0:	f851 3b04 	ldr.w	r3, [r1], #4
    25d4:	f840 3b04 	str.w	r3, [r0], #4
    25d8:	f851 3b04 	ldr.w	r3, [r1], #4
    25dc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    25e0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    25e2:	d2ed      	bcs.n	25c0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    25e4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    25e6:	d305      	bcc.n	25f4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    25e8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    25ec:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    25f0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    25f2:	d2f9      	bcs.n	25e8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    25f4:	3204      	adds	r2, #4
	beq	.Ldone
    25f6:	d008      	beq.n	260a <memcpy+0xe2>

	lsls	r2, r2, #31
    25f8:	07d2      	lsls	r2, r2, #31
	itt ne
    25fa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    25fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2600:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2604:	d301      	bcc.n	260a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2606:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2608:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    260a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    260c:	4770      	bx	lr
    260e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2610:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2612:	d313      	bcc.n	263c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2614:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2616:	d08d      	beq.n	2534 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2618:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    261c:	d08a      	beq.n	2534 <memcpy+0xc>

	rsb	r3, #4
    261e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2622:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2624:	07db      	lsls	r3, r3, #31
	itt ne
    2626:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2628:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    262c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2630:	d380      	bcc.n	2534 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2632:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2636:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    263a:	e77b      	b.n	2534 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    263c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    263e:	d3d9      	bcc.n	25f4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2640:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2642:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2646:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    264a:	d2f9      	bcs.n	2640 <memcpy+0x118>

	ldrb	r3, [r1]
    264c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    264e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2650:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2652:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2654:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2656:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2658:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    265a:	4770      	bx	lr

0000265c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    265c:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    265e:	4c10      	ldr	r4, [pc, #64]	; (26a0 <fault_isr+0x44>)
    2660:	e008      	b.n	2674 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2662:	6823      	ldr	r3, [r4, #0]
    2664:	0559      	lsls	r1, r3, #21
    2666:	d40d      	bmi.n	2684 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2668:	6823      	ldr	r3, [r4, #0]
    266a:	051a      	lsls	r2, r3, #20
    266c:	d40f      	bmi.n	268e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    266e:	6823      	ldr	r3, [r4, #0]
    2670:	04db      	lsls	r3, r3, #19
    2672:	d411      	bmi.n	2698 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2674:	6823      	ldr	r3, [r4, #0]
    2676:	0358      	lsls	r0, r3, #13
    2678:	d5f3      	bpl.n	2662 <fault_isr+0x6>
    267a:	f000 facb 	bl	2c14 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    267e:	6823      	ldr	r3, [r4, #0]
    2680:	0559      	lsls	r1, r3, #21
    2682:	d5f1      	bpl.n	2668 <fault_isr+0xc>
    2684:	f000 f80e 	bl	26a4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2688:	6823      	ldr	r3, [r4, #0]
    268a:	051a      	lsls	r2, r3, #20
    268c:	d5ef      	bpl.n	266e <fault_isr+0x12>
    268e:	f000 f809 	bl	26a4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2692:	6823      	ldr	r3, [r4, #0]
    2694:	04db      	lsls	r3, r3, #19
    2696:	d5ed      	bpl.n	2674 <fault_isr+0x18>
    2698:	f000 f804 	bl	26a4 <unused_isr>
    269c:	e7ea      	b.n	2674 <fault_isr+0x18>
    269e:	bf00      	nop
    26a0:	40048034 	.word	0x40048034

000026a4 <unused_isr>:
	}
}

void unused_isr(void)
{
    26a4:	b508      	push	{r3, lr}
	fault_isr();
    26a6:	f7ff ffd9 	bl	265c <fault_isr>
    26aa:	bf00      	nop

000026ac <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    26ac:	4b01      	ldr	r3, [pc, #4]	; (26b4 <startup_early_hook+0x8>)
    26ae:	2210      	movs	r2, #16
    26b0:	801a      	strh	r2, [r3, #0]
    26b2:	4770      	bx	lr
    26b4:	40052000 	.word	0x40052000

000026b8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop

000026bc <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    26bc:	4909      	ldr	r1, [pc, #36]	; (26e4 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    26be:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    26c0:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    26c2:	b130      	cbz	r0, 26d2 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    26c4:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    26c6:	4418      	add	r0, r3
    26c8:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    26cc:	4290      	cmp	r0, r2
    26ce:	d202      	bcs.n	26d6 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    26d0:	6008      	str	r0, [r1, #0]
	}
	return prev;
    26d2:	4618      	mov	r0, r3
}
    26d4:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    26d6:	f002 f9ab 	bl	4a30 <__errno>
    26da:	230c      	movs	r3, #12
    26dc:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    26de:	f04f 30ff 	mov.w	r0, #4294967295
    26e2:	bd08      	pop	{r3, pc}
    26e4:	1fff08b4 	.word	0x1fff08b4

000026e8 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    26e8:	4a08      	ldr	r2, [pc, #32]	; (270c <kinetis_hsrun_disable+0x24>)
    26ea:	7813      	ldrb	r3, [r2, #0]
    26ec:	2b80      	cmp	r3, #128	; 0x80
    26ee:	d001      	beq.n	26f4 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    26f0:	2000      	movs	r0, #0
}
    26f2:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    26f4:	4906      	ldr	r1, [pc, #24]	; (2710 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    26f6:	4b07      	ldr	r3, [pc, #28]	; (2714 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    26f8:	4807      	ldr	r0, [pc, #28]	; (2718 <kinetis_hsrun_disable+0x30>)
    26fa:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    26fc:	2100      	movs	r1, #0
    26fe:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    2700:	7813      	ldrb	r3, [r2, #0]
    2702:	2b80      	cmp	r3, #128	; 0x80
    2704:	d0fc      	beq.n	2700 <kinetis_hsrun_disable+0x18>
		return 1;
    2706:	2001      	movs	r0, #1
    2708:	4770      	bx	lr
    270a:	bf00      	nop
    270c:	4007e003 	.word	0x4007e003
    2710:	40048044 	.word	0x40048044
    2714:	4007e001 	.word	0x4007e001
    2718:	22280000 	.word	0x22280000

0000271c <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    271c:	4a09      	ldr	r2, [pc, #36]	; (2744 <kinetis_hsrun_enable+0x28>)
    271e:	7813      	ldrb	r3, [r2, #0]
    2720:	2b01      	cmp	r3, #1
    2722:	d001      	beq.n	2728 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    2724:	2000      	movs	r0, #0
}
    2726:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    2728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    272c:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    2730:	2160      	movs	r1, #96	; 0x60
    2732:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    2734:	7813      	ldrb	r3, [r2, #0]
    2736:	2b80      	cmp	r3, #128	; 0x80
    2738:	d1fc      	bne.n	2734 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    273a:	4b03      	ldr	r3, [pc, #12]	; (2748 <kinetis_hsrun_enable+0x2c>)
    273c:	4a03      	ldr	r2, [pc, #12]	; (274c <kinetis_hsrun_enable+0x30>)
    273e:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    2740:	2001      	movs	r0, #1
    2742:	4770      	bx	lr
    2744:	4007e003 	.word	0x4007e003
    2748:	40048044 	.word	0x40048044
    274c:	02060000 	.word	0x02060000

00002750 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    2750:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2752:	4b11      	ldr	r3, [pc, #68]	; (2798 <digitalWrite.part.1+0x48>)
    2754:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    2758:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    275c:	b134      	cbz	r4, 276c <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    275e:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    2760:	b179      	cbz	r1, 2782 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    2762:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2766:	f85d 4b04 	ldr.w	r4, [sp], #4
    276a:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    276c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2770:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2772:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    2774:	b951      	cbnz	r1, 278c <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    2776:	f022 0202 	bic.w	r2, r2, #2
    277a:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    277c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2780:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    2782:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2786:	f85d 4b04 	ldr.w	r4, [sp], #4
    278a:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    278c:	f042 0203 	orr.w	r2, r2, #3
    2790:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    2792:	f85d 4b04 	ldr.w	r4, [sp], #4
    2796:	4770      	bx	lr
    2798:	00005a90 	.word	0x00005a90

0000279c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    279c:	4a1c      	ldr	r2, [pc, #112]	; (2810 <pinMode.part.2+0x74>)
    279e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    27a2:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    27a4:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    27a6:	d011      	beq.n	27cc <pinMode.part.2+0x30>
    27a8:	2904      	cmp	r1, #4
    27aa:	d01b      	beq.n	27e4 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    27ac:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    27b0:	2200      	movs	r2, #0
    27b2:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    27b6:	b129      	cbz	r1, 27c4 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    27b8:	2902      	cmp	r1, #2
    27ba:	d020      	beq.n	27fe <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    27bc:	2903      	cmp	r1, #3
    27be:	d022      	beq.n	2806 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    27c0:	601a      	str	r2, [r3, #0]
    27c2:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    27c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    27c8:	601a      	str	r2, [r3, #0]
    27ca:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    27cc:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    27d0:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    27d4:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    27d8:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    27da:	681a      	ldr	r2, [r3, #0]
    27dc:	f022 0220 	bic.w	r2, r2, #32
    27e0:	601a      	str	r2, [r3, #0]
    27e2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    27e4:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    27e8:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    27ec:	2001      	movs	r0, #1
    27ee:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    27f2:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    27f4:	681a      	ldr	r2, [r3, #0]
    27f6:	f042 0220 	orr.w	r2, r2, #32
    27fa:	601a      	str	r2, [r3, #0]
    27fc:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    27fe:	f240 1203 	movw	r2, #259	; 0x103
    2802:	601a      	str	r2, [r3, #0]
    2804:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    2806:	f44f 7281 	mov.w	r2, #258	; 0x102
    280a:	601a      	str	r2, [r3, #0]
    280c:	4770      	bx	lr
    280e:	bf00      	nop
    2810:	00005a90 	.word	0x00005a90

00002814 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    2814:	b430      	push	{r4, r5}
	RTC_SR = 0;
    2816:	4b05      	ldr	r3, [pc, #20]	; (282c <rtc_set+0x18>)
	RTC_TPR = 0;
    2818:	4d05      	ldr	r5, [pc, #20]	; (2830 <rtc_set+0x1c>)
	RTC_TSR = t;
    281a:	4c06      	ldr	r4, [pc, #24]	; (2834 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    281c:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    281e:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2820:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    2822:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    2824:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    2826:	6019      	str	r1, [r3, #0]
}
    2828:	bc30      	pop	{r4, r5}
    282a:	4770      	bx	lr
    282c:	4003d014 	.word	0x4003d014
    2830:	4003d004 	.word	0x4003d004
    2834:	4003d000 	.word	0x4003d000

00002838 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2838:	283f      	cmp	r0, #63	; 0x3f
    283a:	d801      	bhi.n	2840 <digitalWrite+0x8>
    283c:	f7ff bf88 	b.w	2750 <digitalWrite.part.1>
    2840:	4770      	bx	lr
    2842:	bf00      	nop

00002844 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    2844:	283f      	cmp	r0, #63	; 0x3f
    2846:	d801      	bhi.n	284c <pinMode+0x8>
    2848:	f7ff bfa8 	b.w	279c <pinMode.part.2>
    284c:	4770      	bx	lr
    284e:	bf00      	nop

00002850 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    2850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2854:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2856:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2858:	4f22      	ldr	r7, [pc, #136]	; (28e4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    285a:	4b23      	ldr	r3, [pc, #140]	; (28e8 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    285c:	4a23      	ldr	r2, [pc, #140]	; (28ec <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    285e:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2860:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2862:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2864:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2866:	0152      	lsls	r2, r2, #5
    2868:	d502      	bpl.n	2870 <delay+0x20>
    286a:	2b32      	cmp	r3, #50	; 0x32
    286c:	bf88      	it	hi
    286e:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    2870:	b3b5      	cbz	r5, 28e0 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2872:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    2876:	f203 331f 	addw	r3, r3, #799	; 0x31f
    287a:	4e1d      	ldr	r6, [pc, #116]	; (28f0 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    287c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 28e8 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2880:	f8df 8068 	ldr.w	r8, [pc, #104]	; 28ec <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2884:	089b      	lsrs	r3, r3, #2
    2886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    288a:	fba6 1303 	umull	r1, r3, r6, r3
    288e:	fb02 f404 	mul.w	r4, r2, r4
    2892:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2896:	b672      	cpsid	i
	current = SYST_CVR;
    2898:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    289c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    289e:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    28a2:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    28a4:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    28a8:	f203 331f 	addw	r3, r3, #799	; 0x31f
    28ac:	089b      	lsrs	r3, r3, #2
    28ae:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    28b2:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    28b6:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    28ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    28be:	d002      	beq.n	28c6 <delay+0x76>
    28c0:	2932      	cmp	r1, #50	; 0x32
    28c2:	bf88      	it	hi
    28c4:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    28c6:	fb00 3302 	mla	r3, r0, r2, r3
    28ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    28ce:	d304      	bcc.n	28da <delay+0x8a>
				ms--;
				if (ms == 0) return;
    28d0:	3d01      	subs	r5, #1
    28d2:	d005      	beq.n	28e0 <delay+0x90>
				start += 1000;
    28d4:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    28d8:	e7dd      	b.n	2896 <delay+0x46>
			}
			yield();
    28da:	f001 facd 	bl	3e78 <yield>
		}
    28de:	e7da      	b.n	2896 <delay+0x46>
    28e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    28e4:	1fff1410 	.word	0x1fff1410
    28e8:	e000e018 	.word	0xe000e018
    28ec:	e000ed04 	.word	0xe000ed04
    28f0:	16c16c17 	.word	0x16c16c17

000028f4 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    28f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    28f6:	4b4e      	ldr	r3, [pc, #312]	; (2a30 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    28f8:	484e      	ldr	r0, [pc, #312]	; (2a34 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    28fa:	f8df c15c 	ldr.w	ip, [pc, #348]	; 2a58 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    28fe:	4c4e      	ldr	r4, [pc, #312]	; (2a38 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    2900:	494e      	ldr	r1, [pc, #312]	; (2a3c <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2902:	f8df e158 	ldr.w	lr, [pc, #344]	; 2a5c <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2906:	4e4e      	ldr	r6, [pc, #312]	; (2a40 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    2908:	4d4e      	ldr	r5, [pc, #312]	; (2a44 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    290a:	4f4f      	ldr	r7, [pc, #316]	; (2a48 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    290c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2910:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2916:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    2918:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    291c:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    291e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2922:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2924:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2928:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    292a:	2200      	movs	r2, #0
    292c:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    292e:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2930:	f64e 70ff 	movw	r0, #61439	; 0xefff
    2934:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2938:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    293c:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    293e:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    2942:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    2944:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    2946:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2948:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    294c:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    294e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    2952:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    2954:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    2958:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    295a:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    295e:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2962:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    2966:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    296a:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    296e:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    2970:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    2974:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    2976:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    2978:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    297a:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    297e:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    2980:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    2982:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2984:	4c31      	ldr	r4, [pc, #196]	; (2a4c <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    2986:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    2988:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    298a:	2109      	movs	r1, #9
    298c:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    298e:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    2992:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    2996:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    2998:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    299a:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    299c:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    299e:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    29a0:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    29a2:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    29a6:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    29aa:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    29ae:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    29b0:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    29b4:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    29b6:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    29b8:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    29ba:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    29bc:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    29c0:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    29c2:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    29c6:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    29ca:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    29cc:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    29d0:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    29d4:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    29d6:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    29d8:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    29dc:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    29de:	481c      	ldr	r0, [pc, #112]	; (2a50 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    29e0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    29e4:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    29e6:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    29e8:	4c1a      	ldr	r4, [pc, #104]	; (2a54 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    29ea:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    29ee:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    29f2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    29f6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    29fa:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    29fe:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    2a02:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    2a04:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    2a08:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2a0c:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    2a0e:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    2a10:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    2a12:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    2a14:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    2a16:	f001 faa5 	bl	3f64 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    2a1a:	2019      	movs	r0, #25
    2a1c:	f7ff ff18 	bl	2850 <delay>
	usb_init();
    2a20:	f000 fe5e 	bl	36e0 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2a24:	f240 1013 	movw	r0, #275	; 0x113
}
    2a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    2a2c:	f7ff bf10 	b.w	2850 <delay>
    2a30:	e000e104 	.word	0xe000e104
    2a34:	40038004 	.word	0x40038004
    2a38:	40038014 	.word	0x40038014
    2a3c:	4003801c 	.word	0x4003801c
    2a40:	40038024 	.word	0x40038024
    2a44:	4003802c 	.word	0x4003802c
    2a48:	40038034 	.word	0x40038034
    2a4c:	40038000 	.word	0x40038000
    2a50:	40048004 	.word	0x40048004
    2a54:	400c9000 	.word	0x400c9000
    2a58:	40038008 	.word	0x40038008
    2a5c:	4003800c 	.word	0x4003800c

00002a60 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    2a60:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2a62:	2b03      	cmp	r3, #3
    2a64:	d814      	bhi.n	2a90 <usb_rx+0x30>
	__disable_irq();
    2a66:	b672      	cpsid	i
	ret = rx_first[endpoint];
    2a68:	490a      	ldr	r1, [pc, #40]	; (2a94 <usb_rx+0x34>)
    2a6a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    2a6e:	b168      	cbz	r0, 2a8c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    2a70:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2a72:	4c09      	ldr	r4, [pc, #36]	; (2a98 <usb_rx+0x38>)
    2a74:	8805      	ldrh	r5, [r0, #0]
    2a76:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    2a7a:	6846      	ldr	r6, [r0, #4]
    2a7c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    2a80:	1b52      	subs	r2, r2, r5
    2a82:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    2a86:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a88:	bc70      	pop	{r4, r5, r6}
    2a8a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2a8c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2a8e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2a90:	2000      	movs	r0, #0
    2a92:	4770      	bx	lr
    2a94:	1fff146c 	.word	0x1fff146c
    2a98:	1fff1574 	.word	0x1fff1574

00002a9c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2a9c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2a9e:	2803      	cmp	r0, #3
    2aa0:	d80b      	bhi.n	2aba <usb_tx_packet_count+0x1e>
	__disable_irq();
    2aa2:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    2aa4:	4b07      	ldr	r3, [pc, #28]	; (2ac4 <usb_tx_packet_count+0x28>)
    2aa6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2aaa:	b143      	cbz	r3, 2abe <usb_tx_packet_count+0x22>
    2aac:	2000      	movs	r0, #0
    2aae:	685b      	ldr	r3, [r3, #4]
    2ab0:	3001      	adds	r0, #1
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d1fb      	bne.n	2aae <usb_tx_packet_count+0x12>
	__enable_irq();
    2ab6:	b662      	cpsie	i
	return count;
    2ab8:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2aba:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2abc:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2abe:	4618      	mov	r0, r3
    2ac0:	e7f9      	b.n	2ab6 <usb_tx_packet_count+0x1a>
    2ac2:	bf00      	nop
    2ac4:	1fff14c0 	.word	0x1fff14c0

00002ac8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2ac8:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2aca:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2acc:	4a2b      	ldr	r2, [pc, #172]	; (2b7c <usb_rx_memory+0xb4>)
    2ace:	7813      	ldrb	r3, [r2, #0]
    2ad0:	071d      	lsls	r5, r3, #28
    2ad2:	d506      	bpl.n	2ae2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ad4:	4b2a      	ldr	r3, [pc, #168]	; (2b80 <usb_rx_memory+0xb8>)
    2ad6:	6a19      	ldr	r1, [r3, #32]
    2ad8:	2900      	cmp	r1, #0
    2ada:	d036      	beq.n	2b4a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2adc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2ade:	2900      	cmp	r1, #0
    2ae0:	d041      	beq.n	2b66 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2ae2:	7853      	ldrb	r3, [r2, #1]
    2ae4:	071c      	lsls	r4, r3, #28
    2ae6:	d506      	bpl.n	2af6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2ae8:	4b25      	ldr	r3, [pc, #148]	; (2b80 <usb_rx_memory+0xb8>)
    2aea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2aec:	2900      	cmp	r1, #0
    2aee:	d03e      	beq.n	2b6e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2af0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    2af2:	2900      	cmp	r1, #0
    2af4:	d039      	beq.n	2b6a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2af6:	7893      	ldrb	r3, [r2, #2]
    2af8:	0719      	lsls	r1, r3, #28
    2afa:	d505      	bpl.n	2b08 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2afc:	4b20      	ldr	r3, [pc, #128]	; (2b80 <usb_rx_memory+0xb8>)
    2afe:	6e19      	ldr	r1, [r3, #96]	; 0x60
    2b00:	2900      	cmp	r1, #0
    2b02:	d036      	beq.n	2b72 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b04:	6e99      	ldr	r1, [r3, #104]	; 0x68
    2b06:	b189      	cbz	r1, 2b2c <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2b08:	78d3      	ldrb	r3, [r2, #3]
    2b0a:	071b      	lsls	r3, r3, #28
    2b0c:	d507      	bpl.n	2b1e <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b0e:	4b1c      	ldr	r3, [pc, #112]	; (2b80 <usb_rx_memory+0xb8>)
    2b10:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    2b14:	b37a      	cbz	r2, 2b76 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2b1a:	2111      	movs	r1, #17
    2b1c:	b13a      	cbz	r2, 2b2e <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2b1e:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2b20:	4b18      	ldr	r3, [pc, #96]	; (2b84 <usb_rx_memory+0xbc>)
    2b22:	2200      	movs	r2, #0
    2b24:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    2b26:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    2b28:	f000 be62 	b.w	37f0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b2c:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b2e:	4c15      	ldr	r4, [pc, #84]	; (2b84 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b30:	4d15      	ldr	r5, [pc, #84]	; (2b88 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    2b32:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2b34:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2b38:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2b3c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b3e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    2b40:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    2b42:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2b44:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    2b46:	bc30      	pop	{r4, r5}
    2b48:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b4a:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b4c:	4c0d      	ldr	r4, [pc, #52]	; (2b84 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b4e:	4d0f      	ldr	r5, [pc, #60]	; (2b8c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    2b50:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2b52:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2b5a:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b5c:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    2b5e:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    2b60:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    2b62:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2b64:	e7ef      	b.n	2b46 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2b66:	2105      	movs	r1, #5
    2b68:	e7e1      	b.n	2b2e <usb_rx_memory+0x66>
    2b6a:	2109      	movs	r1, #9
    2b6c:	e7df      	b.n	2b2e <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2b6e:	2208      	movs	r2, #8
    2b70:	e7ec      	b.n	2b4c <usb_rx_memory+0x84>
    2b72:	220c      	movs	r2, #12
    2b74:	e7ea      	b.n	2b4c <usb_rx_memory+0x84>
    2b76:	2210      	movs	r2, #16
    2b78:	e7e8      	b.n	2b4c <usb_rx_memory+0x84>
    2b7a:	bf00      	nop
    2b7c:	00005cc8 	.word	0x00005cc8
    2b80:	1fff0000 	.word	0x1fff0000
    2b84:	1fff14e9 	.word	0x1fff14e9
    2b88:	004000c8 	.word	0x004000c8
    2b8c:	00400088 	.word	0x00400088

00002b90 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2b90:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2b92:	2b03      	cmp	r3, #3
    2b94:	d81d      	bhi.n	2bd2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2b96:	4a1b      	ldr	r2, [pc, #108]	; (2c04 <usb_tx+0x74>)
    2b98:	0140      	lsls	r0, r0, #5
    2b9a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2b9e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2ba0:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    2ba2:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    2ba4:	4c18      	ldr	r4, [pc, #96]	; (2c08 <usb_tx+0x78>)
    2ba6:	5ce2      	ldrb	r2, [r4, r3]
    2ba8:	2a03      	cmp	r2, #3
    2baa:	d81b      	bhi.n	2be4 <usb_tx+0x54>
    2bac:	e8df f002 	tbb	[pc, r2]
    2bb0:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    2bb4:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2bb6:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2bb8:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2bba:	f010 0f08 	tst.w	r0, #8
    2bbe:	bf14      	ite	ne
    2bc0:	23c8      	movne	r3, #200	; 0xc8
    2bc2:	2388      	moveq	r3, #136	; 0x88
    2bc4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2bc8:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2bca:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2bcc:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2bce:	b662      	cpsie	i
}
    2bd0:	bc30      	pop	{r4, r5}
    2bd2:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    2bd4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    2bd6:	2202      	movs	r2, #2
		break;
    2bd8:	e7ed      	b.n	2bb6 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2bda:	2205      	movs	r2, #5
    2bdc:	e7eb      	b.n	2bb6 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2bde:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2be0:	2204      	movs	r2, #4
		break;
    2be2:	e7e8      	b.n	2bb6 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    2be4:	4a09      	ldr	r2, [pc, #36]	; (2c0c <usb_tx+0x7c>)
    2be6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2bea:	b138      	cbz	r0, 2bfc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2bec:	4a08      	ldr	r2, [pc, #32]	; (2c10 <usb_tx+0x80>)
    2bee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2bf2:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    2bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2bf8:	b662      	cpsie	i
		return;
    2bfa:	e7e9      	b.n	2bd0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    2c00:	4a03      	ldr	r2, [pc, #12]	; (2c10 <usb_tx+0x80>)
    2c02:	e7f7      	b.n	2bf4 <usb_tx+0x64>
    2c04:	1fff0000 	.word	0x1fff0000
    2c08:	1fff14f8 	.word	0x1fff14f8
    2c0c:	1fff14c0 	.word	0x1fff14c0
    2c10:	1fff14d0 	.word	0x1fff14d0

00002c14 <usb_isr>:
}



void usb_isr(void)
{
    2c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2c18:	f8df b318 	ldr.w	fp, [pc, #792]	; 2f34 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2c1c:	f8df a318 	ldr.w	sl, [pc, #792]	; 2f38 <usb_isr+0x324>
}



void usb_isr(void)
{
    2c20:	b087      	sub	sp, #28
    2c22:	e044      	b.n	2cae <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2c24:	4fae      	ldr	r7, [pc, #696]	; (2ee0 <usb_isr+0x2cc>)
    2c26:	ea4f 0893 	mov.w	r8, r3, lsr #2
    2c2a:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2c2e:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2c30:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2c34:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2c38:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2c3a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2c3e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    2c42:	2b00      	cmp	r3, #0
    2c44:	f040 8104 	bne.w	2e50 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2c48:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    2c4c:	0c1b      	lsrs	r3, r3, #16
    2c4e:	b299      	uxth	r1, r3
    2c50:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    2c54:	2b00      	cmp	r3, #0
    2c56:	f000 80f2 	beq.w	2e3e <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    2c5a:	4ba2      	ldr	r3, [pc, #648]	; (2ee4 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    2c5c:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    2c60:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2c64:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    2c68:	2a00      	cmp	r2, #0
    2c6a:	f000 816e 	beq.w	2f4a <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2c6e:	4d9e      	ldr	r5, [pc, #632]	; (2ee8 <usb_isr+0x2d4>)
    2c70:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    2c74:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c76:	4c9d      	ldr	r4, [pc, #628]	; (2eec <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    2c78:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c7c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    2c80:	4419      	add	r1, r3
    2c82:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2c86:	f000 fd93 	bl	37b0 <usb_malloc>
					if (packet) {
    2c8a:	2800      	cmp	r0, #0
    2c8c:	f000 8156 	beq.w	2f3c <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2c90:	4a97      	ldr	r2, [pc, #604]	; (2ef0 <usb_isr+0x2dc>)
    2c92:	4b98      	ldr	r3, [pc, #608]	; (2ef4 <usb_isr+0x2e0>)
    2c94:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2c98:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2c9c:	bf18      	it	ne
    2c9e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2ca0:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    2ca4:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2ca8:	2308      	movs	r3, #8
    2caa:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2cae:	f89b 4000 	ldrb.w	r4, [fp]
    2cb2:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2cb4:	0761      	lsls	r1, r4, #29
    2cb6:	d51b      	bpl.n	2cf0 <usb_isr+0xdc>
		if (usb_configuration) {
    2cb8:	4b8f      	ldr	r3, [pc, #572]	; (2ef8 <usb_isr+0x2e4>)
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	b1ab      	cbz	r3, 2cea <usb_isr+0xd6>
			t = usb_reboot_timer;
    2cbe:	498f      	ldr	r1, [pc, #572]	; (2efc <usb_isr+0x2e8>)
    2cc0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    2cc2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2cc6:	b12a      	cbz	r2, 2cd4 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    2cc8:	3b01      	subs	r3, #1
    2cca:	b2db      	uxtb	r3, r3
    2ccc:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2cce:	2b00      	cmp	r3, #0
    2cd0:	f000 84ef 	beq.w	36b2 <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    2cd4:	498a      	ldr	r1, [pc, #552]	; (2f00 <usb_isr+0x2ec>)
    2cd6:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    2cd8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2cdc:	b12a      	cbz	r2, 2cea <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    2cde:	3b01      	subs	r3, #1
    2ce0:	b2db      	uxtb	r3, r3
    2ce2:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	f000 80f7 	beq.w	2ed8 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2cea:	2304      	movs	r3, #4
    2cec:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2cf0:	f004 0308 	and.w	r3, r4, #8
    2cf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	f000 80d6 	beq.w	2eaa <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    2cfe:	f89a 3000 	ldrb.w	r3, [sl]
    2d02:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2d04:	091e      	lsrs	r6, r3, #4
    2d06:	d18d      	bne.n	2c24 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d08:	089c      	lsrs	r4, r3, #2
    2d0a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2ee0 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d0e:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2d12:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d16:	f3c2 0283 	ubfx	r2, r2, #2, #4
    2d1a:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2d1c:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2d1e:	2a0c      	cmp	r2, #12
    2d20:	d87e      	bhi.n	2e20 <usb_isr+0x20c>
    2d22:	e8df f002 	tbb	[pc, r2]
    2d26:	8181      	.short	0x8181
    2d28:	7d7d7d7d 	.word	0x7d7d7d7d
    2d2c:	7d477d7d 	.word	0x7d477d7d
    2d30:	7d7d      	.short	0x7d7d
    2d32:	07          	.byte	0x07
    2d33:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2d34:	6808      	ldr	r0, [r1, #0]
    2d36:	4d73      	ldr	r5, [pc, #460]	; (2f04 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    2d38:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d3a:	4f73      	ldr	r7, [pc, #460]	; (2f08 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d3c:	4e73      	ldr	r6, [pc, #460]	; (2f0c <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    2d3e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d40:	b281      	uxth	r1, r0
    2d42:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2d46:	4b6a      	ldr	r3, [pc, #424]	; (2ef0 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    2d48:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d4a:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d4e:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d50:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2d52:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    2d56:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2d58:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    2d5c:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    2d60:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    2d64:	4c5e      	ldr	r4, [pc, #376]	; (2ee0 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2d66:	f200 80f4 	bhi.w	2f52 <usb_isr+0x33e>
    2d6a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2d6e:	f080 8378 	bcs.w	3462 <usb_isr+0x84e>
    2d72:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2d76:	f000 8362 	beq.w	343e <usb_isr+0x82a>
    2d7a:	f200 8287 	bhi.w	328c <usb_isr+0x678>
    2d7e:	2980      	cmp	r1, #128	; 0x80
    2d80:	f000 82ec 	beq.w	335c <usb_isr+0x748>
    2d84:	2982      	cmp	r1, #130	; 0x82
    2d86:	f040 831e 	bne.w	33c6 <usb_isr+0x7b2>
    2d8a:	88a9      	ldrh	r1, [r5, #4]
    2d8c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2d90:	2904      	cmp	r1, #4
    2d92:	f200 8318 	bhi.w	33c6 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d96:	485e      	ldr	r0, [pc, #376]	; (2f10 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d98:	4c5e      	ldr	r4, [pc, #376]	; (2f14 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2d9a:	0089      	lsls	r1, r1, #2
    2d9c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2d9e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2da0:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2da2:	7802      	ldrb	r2, [r0, #0]
    2da4:	0793      	lsls	r3, r2, #30
    2da6:	f140 8379 	bpl.w	349c <usb_isr+0x888>
    2daa:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    2dae:	f04f 0e02 	mov.w	lr, #2
    2db2:	e2d8      	b.n	3366 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2db4:	4f54      	ldr	r7, [pc, #336]	; (2f08 <usb_isr+0x2f4>)
    2db6:	683a      	ldr	r2, [r7, #0]
		if (data) {
    2db8:	b342      	cbz	r2, 2e0c <usb_isr+0x1f8>
			size = ep0_tx_len;
    2dba:	4b57      	ldr	r3, [pc, #348]	; (2f18 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2dbc:	4e53      	ldr	r6, [pc, #332]	; (2f0c <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dbe:	4957      	ldr	r1, [pc, #348]	; (2f1c <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2dc0:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2dc2:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2dc4:	780d      	ldrb	r5, [r1, #0]
    2dc6:	2840      	cmp	r0, #64	; 0x40
    2dc8:	4686      	mov	lr, r0
    2dca:	f045 0802 	orr.w	r8, r5, #2
    2dce:	bf28      	it	cs
    2dd0:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2dd4:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    2dd6:	f084 0401 	eor.w	r4, r4, #1
    2dda:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2ddc:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2de0:	bf0c      	ite	eq
    2de2:	2488      	moveq	r4, #136	; 0x88
    2de4:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2de6:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2dea:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2dec:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2df0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2df4:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2df6:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2df8:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2dfc:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2dfe:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2e00:	b918      	cbnz	r0, 2e0a <usb_isr+0x1f6>
    2e02:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    2e06:	bf18      	it	ne
    2e08:	2200      	movne	r2, #0
    2e0a:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2e0c:	4b3d      	ldr	r3, [pc, #244]	; (2f04 <usb_isr+0x2f0>)
    2e0e:	881a      	ldrh	r2, [r3, #0]
    2e10:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    2e14:	d104      	bne.n	2e20 <usb_isr+0x20c>
			setup.bRequest = 0;
    2e16:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e18:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    2e1a:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2e1c:	4b40      	ldr	r3, [pc, #256]	; (2f20 <usb_isr+0x30c>)
    2e1e:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2e20:	4a40      	ldr	r2, [pc, #256]	; (2f24 <usb_isr+0x310>)
    2e22:	2301      	movs	r3, #1
    2e24:	7013      	strb	r3, [r2, #0]
    2e26:	e73f      	b.n	2ca8 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2e28:	4a36      	ldr	r2, [pc, #216]	; (2f04 <usb_isr+0x2f0>)
    2e2a:	8815      	ldrh	r5, [r2, #0]
    2e2c:	f242 0021 	movw	r0, #8225	; 0x2021
    2e30:	4285      	cmp	r5, r0
    2e32:	f000 81ff 	beq.w	3234 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2e36:	4a2e      	ldr	r2, [pc, #184]	; (2ef0 <usb_isr+0x2dc>)
    2e38:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
    2e3c:	e7f0      	b.n	2e20 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2e3e:	4a2c      	ldr	r2, [pc, #176]	; (2ef0 <usb_isr+0x2dc>)
    2e40:	4b2c      	ldr	r3, [pc, #176]	; (2ef4 <usb_isr+0x2e0>)
    2e42:	f019 0f08 	tst.w	r9, #8
    2e46:	bf18      	it	ne
    2e48:	4613      	movne	r3, r2
    2e4a:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    2e4e:	e72b      	b.n	2ca8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    2e50:	f000 fcce 	bl	37f0 <usb_free>
				packet = tx_first[endpoint];
    2e54:	4a34      	ldr	r2, [pc, #208]	; (2f28 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2e56:	4935      	ldr	r1, [pc, #212]	; (2f2c <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    2e58:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	f000 81b6 	beq.w	31ce <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e62:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    2e64:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2e66:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    2e6a:	f103 0208 	add.w	r2, r3, #8
    2e6e:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    2e72:	2c03      	cmp	r4, #3
    2e74:	d805      	bhi.n	2e82 <usb_isr+0x26e>
    2e76:	e8df f004 	tbb	[pc, r4]
    2e7a:	0f12      	.short	0x0f12
    2e7c:	0215      	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2e7e:	2204      	movs	r2, #4
    2e80:	558a      	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2e82:	881a      	ldrh	r2, [r3, #0]
    2e84:	f019 0f08 	tst.w	r9, #8
    2e88:	bf0c      	ite	eq
    2e8a:	2388      	moveq	r3, #136	; 0x88
    2e8c:	23c8      	movne	r3, #200	; 0xc8
    2e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    2e92:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    2e96:	e707      	b.n	2ca8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2e98:	2202      	movs	r2, #2
    2e9a:	558a      	strb	r2, [r1, r6]
						break;
    2e9c:	e7f1      	b.n	2e82 <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2e9e:	2203      	movs	r2, #3
    2ea0:	558a      	strb	r2, [r1, r6]
						break;
    2ea2:	e7ee      	b.n	2e82 <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2ea4:	2205      	movs	r2, #5
    2ea6:	558a      	strb	r2, [r1, r6]
						break;
    2ea8:	e7eb      	b.n	2e82 <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2eaa:	07e0      	lsls	r0, r4, #31
    2eac:	f100 821a 	bmi.w	32e4 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2eb0:	0621      	lsls	r1, r4, #24
    2eb2:	f100 8249 	bmi.w	3348 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2eb6:	07a2      	lsls	r2, r4, #30
    2eb8:	d506      	bpl.n	2ec8 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    2eba:	4a1d      	ldr	r2, [pc, #116]	; (2f30 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ebc:	491d      	ldr	r1, [pc, #116]	; (2f34 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ebe:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ec0:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2ec2:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2ec4:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2ec6:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2ec8:	06e3      	lsls	r3, r4, #27
    2eca:	d502      	bpl.n	2ed2 <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2ecc:	4b19      	ldr	r3, [pc, #100]	; (2f34 <usb_isr+0x320>)
    2ece:	2210      	movs	r2, #16
    2ed0:	701a      	strb	r2, [r3, #0]
	}

}
    2ed2:	b007      	add	sp, #28
    2ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2ed8:	f000 fdf6 	bl	3ac8 <usb_serial_flush_callback>
    2edc:	e705      	b.n	2cea <usb_isr+0xd6>
    2ede:	bf00      	nop
    2ee0:	1fff0000 	.word	0x1fff0000
    2ee4:	1fff146c 	.word	0x1fff146c
    2ee8:	1fff1418 	.word	0x1fff1418
    2eec:	1fff1574 	.word	0x1fff1574
    2ef0:	004000c8 	.word	0x004000c8
    2ef4:	00400088 	.word	0x00400088
    2ef8:	1fff14f4 	.word	0x1fff14f4
    2efc:	1fff147d 	.word	0x1fff147d
    2f00:	1fff14fc 	.word	0x1fff14fc
    2f04:	1fff14e0 	.word	0x1fff14e0
    2f08:	1fff1414 	.word	0x1fff1414
    2f0c:	1fff147c 	.word	0x1fff147c
    2f10:	400720c0 	.word	0x400720c0
    2f14:	1fff14ec 	.word	0x1fff14ec
    2f18:	1fff1428 	.word	0x1fff1428
    2f1c:	1fff14e8 	.word	0x1fff14e8
    2f20:	40072098 	.word	0x40072098
    2f24:	40072094 	.word	0x40072094
    2f28:	1fff14c0 	.word	0x1fff14c0
    2f2c:	1fff14f8 	.word	0x1fff14f8
    2f30:	40072088 	.word	0x40072088
    2f34:	40072080 	.word	0x40072080
    2f38:	40072090 	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2f3c:	4aab      	ldr	r2, [pc, #684]	; (31ec <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2f3e:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2f42:	7813      	ldrb	r3, [r2, #0]
    2f44:	3301      	adds	r3, #1
    2f46:	7013      	strb	r3, [r2, #0]
    2f48:	e6ae      	b.n	2ca8 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2f4a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    2f4e:	4da8      	ldr	r5, [pc, #672]	; (31f0 <usb_isr+0x5dc>)
    2f50:	e691      	b.n	2c76 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2f52:	f242 0021 	movw	r0, #8225	; 0x2021
    2f56:	4281      	cmp	r1, r0
    2f58:	f000 8135 	beq.w	31c6 <usb_isr+0x5b2>
    2f5c:	f200 81af 	bhi.w	32be <usb_isr+0x6aa>
    2f60:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    2f64:	f000 821b 	beq.w	339e <usb_isr+0x78a>
    2f68:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2f6c:	f040 822b 	bne.w	33c6 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    2f70:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2f72:	49a0      	ldr	r1, [pc, #640]	; (31f4 <usb_isr+0x5e0>)
    2f74:	78a8      	ldrb	r0, [r5, #2]
    2f76:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    2f78:	0612      	lsls	r2, r2, #24
    2f7a:	f100 8345 	bmi.w	3608 <usb_isr+0x9f4>
    2f7e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    2f82:	499d      	ldr	r1, [pc, #628]	; (31f8 <usb_isr+0x5e4>)
    2f84:	0613      	lsls	r3, r2, #24
    2f86:	f100 833a 	bmi.w	35fe <usb_isr+0x9ea>
    2f8a:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    2f8e:	499a      	ldr	r1, [pc, #616]	; (31f8 <usb_isr+0x5e4>)
    2f90:	0615      	lsls	r5, r2, #24
    2f92:	f100 832f 	bmi.w	35f4 <usb_isr+0x9e0>
    2f96:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2f9a:	4997      	ldr	r1, [pc, #604]	; (31f8 <usb_isr+0x5e4>)
    2f9c:	0614      	lsls	r4, r2, #24
    2f9e:	f100 8324 	bmi.w	35ea <usb_isr+0x9d6>
    2fa2:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    2fa6:	4994      	ldr	r1, [pc, #592]	; (31f8 <usb_isr+0x5e4>)
    2fa8:	0610      	lsls	r0, r2, #24
    2faa:	f100 8319 	bmi.w	35e0 <usb_isr+0x9cc>
    2fae:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    2fb2:	4991      	ldr	r1, [pc, #580]	; (31f8 <usb_isr+0x5e4>)
    2fb4:	0612      	lsls	r2, r2, #24
    2fb6:	f100 830e 	bmi.w	35d6 <usb_isr+0x9c2>
    2fba:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    2fbe:	498e      	ldr	r1, [pc, #568]	; (31f8 <usb_isr+0x5e4>)
    2fc0:	0613      	lsls	r3, r2, #24
    2fc2:	f100 8303 	bmi.w	35cc <usb_isr+0x9b8>
    2fc6:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    2fca:	498b      	ldr	r1, [pc, #556]	; (31f8 <usb_isr+0x5e4>)
    2fcc:	0615      	lsls	r5, r2, #24
    2fce:	f100 82f8 	bmi.w	35c2 <usb_isr+0x9ae>
    2fd2:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    2fd6:	4988      	ldr	r1, [pc, #544]	; (31f8 <usb_isr+0x5e4>)
    2fd8:	0614      	lsls	r4, r2, #24
    2fda:	f100 8329 	bmi.w	3630 <usb_isr+0xa1c>
    2fde:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    2fe2:	4985      	ldr	r1, [pc, #532]	; (31f8 <usb_isr+0x5e4>)
    2fe4:	0610      	lsls	r0, r2, #24
    2fe6:	f100 831e 	bmi.w	3626 <usb_isr+0xa12>
    2fea:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    2fee:	4982      	ldr	r1, [pc, #520]	; (31f8 <usb_isr+0x5e4>)
    2ff0:	0612      	lsls	r2, r2, #24
    2ff2:	f100 8313 	bmi.w	361c <usb_isr+0xa08>
    2ff6:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    2ffa:	497f      	ldr	r1, [pc, #508]	; (31f8 <usb_isr+0x5e4>)
    2ffc:	0613      	lsls	r3, r2, #24
    2ffe:	f100 8308 	bmi.w	3612 <usb_isr+0x9fe>
    3002:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    3006:	497c      	ldr	r1, [pc, #496]	; (31f8 <usb_isr+0x5e4>)
    3008:	0615      	lsls	r5, r2, #24
    300a:	f100 831c 	bmi.w	3646 <usb_isr+0xa32>
    300e:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    3012:	4979      	ldr	r1, [pc, #484]	; (31f8 <usb_isr+0x5e4>)
    3014:	0614      	lsls	r4, r2, #24
    3016:	f100 8310 	bmi.w	363a <usb_isr+0xa26>
    301a:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    301e:	4976      	ldr	r1, [pc, #472]	; (31f8 <usb_isr+0x5e4>)
    3020:	0610      	lsls	r0, r2, #24
    3022:	f100 82c8 	bmi.w	35b6 <usb_isr+0x9a2>
    3026:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    302a:	4973      	ldr	r1, [pc, #460]	; (31f8 <usb_isr+0x5e4>)
    302c:	0612      	lsls	r2, r2, #24
    302e:	f100 82bc 	bmi.w	35aa <usb_isr+0x996>
    3032:	4872      	ldr	r0, [pc, #456]	; (31fc <usb_isr+0x5e8>)
    3034:	4a72      	ldr	r2, [pc, #456]	; (3200 <usb_isr+0x5ec>)
    3036:	4973      	ldr	r1, [pc, #460]	; (3204 <usb_isr+0x5f0>)
    3038:	9001      	str	r0, [sp, #4]
    303a:	4873      	ldr	r0, [pc, #460]	; (3208 <usb_isr+0x5f4>)
    303c:	4d6c      	ldr	r5, [pc, #432]	; (31f0 <usb_isr+0x5dc>)
    303e:	4c73      	ldr	r4, [pc, #460]	; (320c <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3040:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3042:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3044:	9605      	str	r6, [sp, #20]
    3046:	9502      	str	r5, [sp, #8]
    3048:	4680      	mov	r8, r0
    304a:	4617      	mov	r7, r2
    304c:	460e      	mov	r6, r1
    304e:	461d      	mov	r5, r3
    3050:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3052:	6838      	ldr	r0, [r7, #0]
			while (p) {
    3054:	b128      	cbz	r0, 3062 <usb_isr+0x44e>
				n = p->next;
    3056:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3058:	f000 fbca 	bl	37f0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    305c:	4620      	mov	r0, r4
    305e:	2c00      	cmp	r4, #0
    3060:	d1f9      	bne.n	3056 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3062:	2300      	movs	r3, #0
    3064:	603b      	str	r3, [r7, #0]
			rx_last[i] = NULL;
    3066:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    3068:	6830      	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    306a:	461a      	mov	r2, r3
    306c:	2300      	movs	r3, #0
    306e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3072:	b128      	cbz	r0, 3080 <usb_isr+0x46c>
				n = p->next;
    3074:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    3076:	f000 fbbb 	bl	37f0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    307a:	4620      	mov	r0, r4
    307c:	2c00      	cmp	r4, #0
    307e:	d1f9      	bne.n	3074 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3080:	2200      	movs	r2, #0
    3082:	6032      	str	r2, [r6, #0]
			tx_last[i] = NULL;
    3084:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3086:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    308a:	4611      	mov	r1, r2
    308c:	2200      	movs	r2, #0
    308e:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3092:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3094:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3096:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3098:	f04f 0100 	mov.w	r1, #0
    309c:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    30a0:	2b03      	cmp	r3, #3
    30a2:	d809      	bhi.n	30b8 <usb_isr+0x4a4>
    30a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    30a8:	0004014b 	.word	0x0004014b
    30ac:	0004014b 	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    30b0:	f04f 0301 	mov.w	r3, #1
    30b4:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    30b8:	3501      	adds	r5, #1
    30ba:	2d04      	cmp	r5, #4
    30bc:	f107 0704 	add.w	r7, r7, #4
    30c0:	f106 0604 	add.w	r6, r6, #4
    30c4:	f108 0801 	add.w	r8, r8, #1
    30c8:	d1c3      	bne.n	3052 <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    30ca:	4c51      	ldr	r4, [pc, #324]	; (3210 <usb_isr+0x5fc>)
			*reg = epconf;
    30cc:	4b51      	ldr	r3, [pc, #324]	; (3214 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    30ce:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    30d0:	4d46      	ldr	r5, [pc, #280]	; (31ec <usb_isr+0x5d8>)
    30d2:	9f04      	ldr	r7, [sp, #16]
    30d4:	9e05      	ldr	r6, [sp, #20]
    30d6:	2100      	movs	r1, #0
    30d8:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    30da:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    30dc:	0713      	lsls	r3, r2, #28
    30de:	f100 824f 	bmi.w	3580 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    30e2:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    30e4:	494c      	ldr	r1, [pc, #304]	; (3218 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    30e6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 31f8 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    30ea:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    30ec:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    30ee:	f04f 0100 	mov.w	r1, #0
    30f2:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    30f6:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    30fa:	f100 822b 	bmi.w	3554 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    30fe:	4947      	ldr	r1, [pc, #284]	; (321c <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3100:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    3102:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3104:	2100      	movs	r1, #0
    3106:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    310a:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    310e:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3110:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 31f8 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3114:	f100 81dc 	bmi.w	34d0 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3118:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    311a:	4941      	ldr	r1, [pc, #260]	; (3220 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    311c:	4c36      	ldr	r4, [pc, #216]	; (31f8 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    311e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3120:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3122:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3124:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3128:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    312c:	f100 81b9 	bmi.w	34a2 <usb_isr+0x88e>
    3130:	7833      	ldrb	r3, [r6, #0]
    3132:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3134:	2100      	movs	r1, #0
    3136:	f083 0201 	eor.w	r2, r3, #1
    313a:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    313e:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3142:	2000      	movs	r0, #0
    3144:	9002      	str	r0, [sp, #8]
    3146:	4680      	mov	r8, r0
    3148:	4684      	mov	ip, r0
    314a:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    314c:	4935      	ldr	r1, [pc, #212]	; (3224 <usb_isr+0x610>)
    314e:	780d      	ldrb	r5, [r1, #0]
    3150:	f045 0e02 	orr.w	lr, r5, #2
    3154:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    3158:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    315e:	9b03      	ldr	r3, [sp, #12]
    3160:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3162:	bf0c      	ite	eq
    3164:	2488      	moveq	r4, #136	; 0x88
    3166:	24c8      	movne	r4, #200	; 0xc8
    3168:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    316c:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3170:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3174:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3176:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3178:	f8df e07c 	ldr.w	lr, [pc, #124]	; 31f8 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    317c:	4b2a      	ldr	r3, [pc, #168]	; (3228 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    317e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 3224 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3182:	2800      	cmp	r0, #0
    3184:	f040 8126 	bne.w	33d4 <usb_isr+0x7c0>
    3188:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    318c:	d11b      	bne.n	31c6 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    318e:	f044 0c02 	orr.w	ip, r4, #2
    3192:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    3196:	9c02      	ldr	r4, [sp, #8]
    3198:	f8df e05c 	ldr.w	lr, [pc, #92]	; 31f8 <usb_isr+0x5e4>
    319c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    319e:	2a00      	cmp	r2, #0
    31a0:	f040 812e 	bne.w	3400 <usb_isr+0x7ec>
    31a4:	0402      	lsls	r2, r0, #16
    31a6:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    31aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    31ae:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31b2:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    31b4:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    31b6:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    31b8:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    31ba:	2840      	cmp	r0, #64	; 0x40
    31bc:	d103      	bne.n	31c6 <usb_isr+0x5b2>
    31be:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    31c0:	4a1a      	ldr	r2, [pc, #104]	; (322c <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    31c2:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    31c4:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    31c6:	4a1a      	ldr	r2, [pc, #104]	; (3230 <usb_isr+0x61c>)
    31c8:	2301      	movs	r3, #1
    31ca:	7013      	strb	r3, [r2, #0]
    31cc:	e628      	b.n	2e20 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    31ce:	5d8b      	ldrb	r3, [r1, r6]
    31d0:	2b03      	cmp	r3, #3
    31d2:	f200 812d 	bhi.w	3430 <usb_isr+0x81c>
    31d6:	a201      	add	r2, pc, #4	; (adr r2, 31dc <usb_isr+0x5c8>)
    31d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    31dc:	00002ca9 	.word	0x00002ca9
    31e0:	00002ca9 	.word	0x00002ca9
    31e4:	00003333 	.word	0x00003333
    31e8:	00003339 	.word	0x00003339
    31ec:	1fff14e9 	.word	0x1fff14e9
    31f0:	1fff1418 	.word	0x1fff1418
    31f4:	1fff14f4 	.word	0x1fff14f4
    31f8:	1fff0000 	.word	0x1fff0000
    31fc:	1fff14d0 	.word	0x1fff14d0
    3200:	1fff146c 	.word	0x1fff146c
    3204:	1fff14c0 	.word	0x1fff14c0
    3208:	1fff14f8 	.word	0x1fff14f8
    320c:	1fff1574 	.word	0x1fff1574
    3210:	00005cc8 	.word	0x00005cc8
    3214:	400720c4 	.word	0x400720c4
    3218:	400720c8 	.word	0x400720c8
    321c:	400720cc 	.word	0x400720cc
    3220:	400720d0 	.word	0x400720d0
    3224:	1fff14e8 	.word	0x1fff14e8
    3228:	1fff147c 	.word	0x1fff147c
    322c:	1fff1428 	.word	0x1fff1428
    3230:	40072094 	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    3234:	8892      	ldrh	r2, [r2, #4]
    3236:	b992      	cbnz	r2, 325e <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    3238:	4ab1      	ldr	r2, [pc, #708]	; (3500 <usb_isr+0x8ec>)
    323a:	780d      	ldrb	r5, [r1, #0]
    323c:	7848      	ldrb	r0, [r1, #1]
    323e:	7015      	strb	r5, [r2, #0]
    3240:	7050      	strb	r0, [r2, #1]
    3242:	788d      	ldrb	r5, [r1, #2]
    3244:	78c8      	ldrb	r0, [r1, #3]
    3246:	7095      	strb	r5, [r2, #2]
    3248:	70d0      	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    324a:	6810      	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    324c:	790d      	ldrb	r5, [r1, #4]
    324e:	7115      	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    3250:	2886      	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    3252:	794d      	ldrb	r5, [r1, #5]
    3254:	7989      	ldrb	r1, [r1, #6]
    3256:	7155      	strb	r5, [r2, #5]
    3258:	7191      	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    325a:	f000 80a5 	beq.w	33a8 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    325e:	49a9      	ldr	r1, [pc, #676]	; (3504 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3260:	4ea9      	ldr	r6, [pc, #676]	; (3508 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3262:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3264:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3266:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    326a:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    326c:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3270:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3272:	bf0c      	ite	eq
    3274:	2188      	moveq	r1, #136	; 0x88
    3276:	21c8      	movne	r1, #200	; 0xc8
    3278:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    327c:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3280:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3284:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3286:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3288:	6051      	str	r1, [r2, #4]
    328a:	e5d4      	b.n	2e36 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    328c:	f240 3202 	movw	r2, #770	; 0x302
    3290:	4291      	cmp	r1, r2
    3292:	f040 808d 	bne.w	33b0 <usb_isr+0x79c>
    3296:	88a9      	ldrh	r1, [r5, #4]
    3298:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    329c:	2904      	cmp	r1, #4
    329e:	f200 8092 	bhi.w	33c6 <usb_isr+0x7b2>
    32a2:	886a      	ldrh	r2, [r5, #2]
    32a4:	2a00      	cmp	r2, #0
    32a6:	f040 808e 	bne.w	33c6 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    32aa:	4898      	ldr	r0, [pc, #608]	; (350c <usb_isr+0x8f8>)
    32ac:	f8cd e004 	str.w	lr, [sp, #4]
    32b0:	0089      	lsls	r1, r1, #2
    32b2:	4408      	add	r0, r1
    32b4:	7801      	ldrb	r1, [r0, #0]
    32b6:	f041 0102 	orr.w	r1, r1, #2
    32ba:	7001      	strb	r1, [r0, #0]
    32bc:	e741      	b.n	3142 <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    32be:	f242 2021 	movw	r0, #8737	; 0x2221
    32c2:	4281      	cmp	r1, r0
    32c4:	d17b      	bne.n	33be <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    32c6:	88a9      	ldrh	r1, [r5, #4]
    32c8:	2900      	cmp	r1, #0
    32ca:	f040 80e4 	bne.w	3496 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32ce:	4b90      	ldr	r3, [pc, #576]	; (3510 <usb_isr+0x8fc>)
    32d0:	4a90      	ldr	r2, [pc, #576]	; (3514 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    32d2:	4891      	ldr	r0, [pc, #580]	; (3518 <usb_isr+0x904>)
    32d4:	78ac      	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    32d6:	681d      	ldr	r5, [r3, #0]
    32d8:	6015      	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    32da:	f8cd e004 	str.w	lr, [sp, #4]
    32de:	460a      	mov	r2, r1
    32e0:	7004      	strb	r4, [r0, #0]
    32e2:	e72e      	b.n	3142 <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    32e4:	4b8d      	ldr	r3, [pc, #564]	; (351c <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    32e6:	488e      	ldr	r0, [pc, #568]	; (3520 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    32e8:	4986      	ldr	r1, [pc, #536]	; (3504 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    32ea:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    32ec:	f04f 0e02 	mov.w	lr, #2
    32f0:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    32f4:	4f85      	ldr	r7, [pc, #532]	; (350c <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    32f6:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    32f8:	498a      	ldr	r1, [pc, #552]	; (3524 <usb_isr+0x910>)
    32fa:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    32fc:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    32fe:	4e8a      	ldr	r6, [pc, #552]	; (3528 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    3300:	4d8a      	ldr	r5, [pc, #552]	; (352c <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3302:	4c8b      	ldr	r4, [pc, #556]	; (3530 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3304:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3306:	210d      	movs	r1, #13
    3308:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    330a:	21ff      	movs	r1, #255	; 0xff
    330c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    330e:	f8df e240 	ldr.w	lr, [pc, #576]	; 3550 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3312:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3314:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3316:	4d87      	ldr	r5, [pc, #540]	; (3534 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3318:	4a87      	ldr	r2, [pc, #540]	; (3538 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    331a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    331e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3320:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3322:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3326:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3328:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    332a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    332c:	b007      	add	sp, #28
    332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3332:	2300      	movs	r3, #0
    3334:	558b      	strb	r3, [r1, r6]
						break;
    3336:	e4b7      	b.n	2ca8 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3338:	2301      	movs	r3, #1
    333a:	558b      	strb	r3, [r1, r6]
						break;
    333c:	e4b4      	b.n	2ca8 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    333e:	f04f 0300 	mov.w	r3, #0
    3342:	f888 3000 	strb.w	r3, [r8]
    3346:	e6b7      	b.n	30b8 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3348:	4970      	ldr	r1, [pc, #448]	; (350c <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    334a:	4b78      	ldr	r3, [pc, #480]	; (352c <usb_isr+0x918>)
    334c:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    334e:	200d      	movs	r0, #13
    3350:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3352:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3354:	07a2      	lsls	r2, r4, #30
    3356:	f57f adb7 	bpl.w	2ec8 <usb_isr+0x2b4>
    335a:	e5ae      	b.n	2eba <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    335c:	4c77      	ldr	r4, [pc, #476]	; (353c <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    335e:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3362:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3364:	7062      	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3366:	88ea      	ldrh	r2, [r5, #6]
    3368:	4572      	cmp	r2, lr
    336a:	f080 81a3 	bcs.w	36b4 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    336e:	4965      	ldr	r1, [pc, #404]	; (3504 <usb_isr+0x8f0>)
    3370:	780d      	ldrb	r5, [r1, #0]
    3372:	2a40      	cmp	r2, #64	; 0x40
    3374:	4694      	mov	ip, r2
    3376:	f045 0e02 	orr.w	lr, r5, #2
    337a:	bf28      	it	cs
    337c:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3380:	eb04 030c 	add.w	r3, r4, ip
    3384:	eb09 00ce 	add.w	r0, r9, lr, lsl #3
    3388:	9302      	str	r3, [sp, #8]
    338a:	2301      	movs	r3, #1
    338c:	6044      	str	r4, [r0, #4]
    338e:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3392:	ebcc 0002 	rsb	r0, ip, r2
    3396:	9301      	str	r3, [sp, #4]
    3398:	2200      	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    339a:	24c8      	movs	r4, #200	; 0xc8
    339c:	e6e4      	b.n	3168 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    339e:	4a68      	ldr	r2, [pc, #416]	; (3540 <usb_isr+0x92c>)
    33a0:	4c66      	ldr	r4, [pc, #408]	; (353c <usb_isr+0x928>)
    33a2:	7812      	ldrb	r2, [r2, #0]
    33a4:	7022      	strb	r2, [r4, #0]
    33a6:	e7de      	b.n	3366 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    33a8:	4a66      	ldr	r2, [pc, #408]	; (3544 <usb_isr+0x930>)
    33aa:	210f      	movs	r1, #15
    33ac:	7011      	strb	r1, [r2, #0]
    33ae:	e756      	b.n	325e <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    33b0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    33b4:	d107      	bne.n	33c6 <usb_isr+0x7b2>
    33b6:	2301      	movs	r3, #1
    33b8:	2200      	movs	r2, #0
    33ba:	9301      	str	r3, [sp, #4]
    33bc:	e6c1      	b.n	3142 <usb_isr+0x52e>
    33be:	f242 3221 	movw	r2, #8993	; 0x2321
    33c2:	4291      	cmp	r1, r2
    33c4:	d0f7      	beq.n	33b6 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    33c6:	4a51      	ldr	r2, [pc, #324]	; (350c <usb_isr+0x8f8>)
    33c8:	230f      	movs	r3, #15
    33ca:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    33cc:	4a54      	ldr	r2, [pc, #336]	; (3520 <usb_isr+0x90c>)
    33ce:	2301      	movs	r3, #1
    33d0:	7013      	strb	r3, [r2, #0]
    33d2:	e525      	b.n	2e20 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    33d4:	2840      	cmp	r0, #64	; 0x40
    33d6:	f67f aeda 	bls.w	318e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    33da:	f044 0402 	orr.w	r4, r4, #2
    33de:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    33e2:	9e02      	ldr	r6, [sp, #8]
    33e4:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33e6:	b1ba      	cbz	r2, 3418 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    33e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33ec:	4a56      	ldr	r2, [pc, #344]	; (3548 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    33ee:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    33f0:	4633      	mov	r3, r6
    33f2:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    33f4:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    33f8:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    33fa:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    33fe:	e6df      	b.n	31c0 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    3400:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3404:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3406:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3408:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    340a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    340c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3410:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3412:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    3416:	e6d0      	b.n	31ba <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    3418:	f89d 1004 	ldrb.w	r1, [sp, #4]
    341c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    341e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3420:	4a40      	ldr	r2, [pc, #256]	; (3524 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3422:	f888 5000 	strb.w	r5, [r8]
    3426:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3428:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    342a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    342e:	e6c7      	b.n	31c0 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3430:	f019 0f08 	tst.w	r9, #8
    3434:	bf0c      	ite	eq
    3436:	2302      	moveq	r3, #2
    3438:	2303      	movne	r3, #3
    343a:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    343c:	e434      	b.n	2ca8 <usb_isr+0x94>
    343e:	88a9      	ldrh	r1, [r5, #4]
    3440:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3444:	2904      	cmp	r1, #4
    3446:	d8be      	bhi.n	33c6 <usb_isr+0x7b2>
    3448:	886a      	ldrh	r2, [r5, #2]
    344a:	2a00      	cmp	r2, #0
    344c:	d1bb      	bne.n	33c6 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    344e:	482f      	ldr	r0, [pc, #188]	; (350c <usb_isr+0x8f8>)
    3450:	f8cd e004 	str.w	lr, [sp, #4]
    3454:	0089      	lsls	r1, r1, #2
    3456:	4408      	add	r0, r1
    3458:	7801      	ldrb	r1, [r0, #0]
    345a:	f021 0102 	bic.w	r1, r1, #2
    345e:	7001      	strb	r1, [r0, #0]
    3460:	e66f      	b.n	3142 <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3462:	4a3a      	ldr	r2, [pc, #232]	; (354c <usb_isr+0x938>)
    3464:	6854      	ldr	r4, [r2, #4]
    3466:	2c00      	cmp	r4, #0
    3468:	d0ad      	beq.n	33c6 <usb_isr+0x7b2>
    346a:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    346c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    3470:	e003      	b.n	347a <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3472:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    3474:	6854      	ldr	r4, [r2, #4]
    3476:	2c00      	cmp	r4, #0
    3478:	d0a5      	beq.n	33c6 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    347a:	8813      	ldrh	r3, [r2, #0]
    347c:	4283      	cmp	r3, r0
    347e:	d1f8      	bne.n	3472 <usb_isr+0x85e>
    3480:	8853      	ldrh	r3, [r2, #2]
    3482:	4573      	cmp	r3, lr
    3484:	d1f5      	bne.n	3472 <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3486:	0a00      	lsrs	r0, r0, #8
    3488:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    348a:	bf0c      	ite	eq
    348c:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    3490:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    3494:	e767      	b.n	3366 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    3496:	f8cd e004 	str.w	lr, [sp, #4]
    349a:	e652      	b.n	3142 <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    349c:	f04f 0e02 	mov.w	lr, #2
    34a0:	e761      	b.n	3366 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34a2:	f000 f985 	bl	37b0 <usb_malloc>
				if (p) {
    34a6:	2800      	cmp	r0, #0
    34a8:	f000 80f1 	beq.w	368e <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    34ac:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34ae:	4a1d      	ldr	r2, [pc, #116]	; (3524 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34b0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34b4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34b8:	f000 f97a 	bl	37b0 <usb_malloc>
				if (p) {
    34bc:	2800      	cmp	r0, #0
    34be:	f000 80e0 	beq.w	3682 <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    34c2:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34c4:	4a20      	ldr	r2, [pc, #128]	; (3548 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34c6:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34ca:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    34ce:	e62f      	b.n	3130 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    34d0:	f000 f96e 	bl	37b0 <usb_malloc>
				if (p) {
    34d4:	2800      	cmp	r0, #0
    34d6:	f000 80e6 	beq.w	36a6 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    34da:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34dc:	4a11      	ldr	r2, [pc, #68]	; (3524 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    34de:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    34e2:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    34e6:	f000 f963 	bl	37b0 <usb_malloc>
				if (p) {
    34ea:	2800      	cmp	r0, #0
    34ec:	f000 80d5 	beq.w	369a <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    34f0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f2:	4a15      	ldr	r2, [pc, #84]	; (3548 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    34f4:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    34f8:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    34fc:	e60c      	b.n	3118 <usb_isr+0x504>
    34fe:	bf00      	nop
    3500:	1fff157c 	.word	0x1fff157c
    3504:	1fff14e8 	.word	0x1fff14e8
    3508:	1fff147c 	.word	0x1fff147c
    350c:	400720c0 	.word	0x400720c0
    3510:	1fff1410 	.word	0x1fff1410
    3514:	1fff1584 	.word	0x1fff1584
    3518:	1fff150c 	.word	0x1fff150c
    351c:	1fff0000 	.word	0x1fff0000
    3520:	40072094 	.word	0x40072094
    3524:	00400088 	.word	0x00400088
    3528:	40072088 	.word	0x40072088
    352c:	40072080 	.word	0x40072080
    3530:	40072098 	.word	0x40072098
    3534:	1fff142c 	.word	0x1fff142c
    3538:	1fff1480 	.word	0x1fff1480
    353c:	1fff14ec 	.word	0x1fff14ec
    3540:	1fff14f4 	.word	0x1fff14f4
    3544:	1fff147d 	.word	0x1fff147d
    3548:	004000c8 	.word	0x004000c8
    354c:	00005ccc 	.word	0x00005ccc
    3550:	4007208c 	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3554:	f000 f92c 	bl	37b0 <usb_malloc>
				if (p) {
    3558:	2800      	cmp	r0, #0
    355a:	f000 808c 	beq.w	3676 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    355e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3560:	4a5d      	ldr	r2, [pc, #372]	; (36d8 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3562:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3566:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    356a:	f000 f921 	bl	37b0 <usb_malloc>
				if (p) {
    356e:	2800      	cmp	r0, #0
    3570:	d07b      	beq.n	366a <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    3572:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3574:	4a59      	ldr	r2, [pc, #356]	; (36dc <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3576:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    357a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    357e:	e5be      	b.n	30fe <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3580:	f000 f916 	bl	37b0 <usb_malloc>
				if (p) {
    3584:	2800      	cmp	r0, #0
    3586:	d06a      	beq.n	365e <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    3588:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    358a:	4a53      	ldr	r2, [pc, #332]	; (36d8 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    358c:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3590:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3594:	f000 f90c 	bl	37b0 <usb_malloc>
				if (p) {
    3598:	2800      	cmp	r0, #0
    359a:	d05a      	beq.n	3652 <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    359c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    359e:	4a4f      	ldr	r2, [pc, #316]	; (36dc <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    35a0:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35a4:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    35a8:	e59b      	b.n	30e2 <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    35aa:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    35ae:	3808      	subs	r0, #8
    35b0:	f000 f91e 	bl	37f0 <usb_free>
    35b4:	e53d      	b.n	3032 <usb_isr+0x41e>
    35b6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    35ba:	3808      	subs	r0, #8
    35bc:	f000 f918 	bl	37f0 <usb_free>
    35c0:	e531      	b.n	3026 <usb_isr+0x412>
    35c2:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    35c4:	3808      	subs	r0, #8
    35c6:	f000 f913 	bl	37f0 <usb_free>
    35ca:	e502      	b.n	2fd2 <usb_isr+0x3be>
    35cc:	6d48      	ldr	r0, [r1, #84]	; 0x54
    35ce:	3808      	subs	r0, #8
    35d0:	f000 f90e 	bl	37f0 <usb_free>
    35d4:	e4f7      	b.n	2fc6 <usb_isr+0x3b2>
    35d6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    35d8:	3808      	subs	r0, #8
    35da:	f000 f909 	bl	37f0 <usb_free>
    35de:	e4ec      	b.n	2fba <usb_isr+0x3a6>
    35e0:	6c48      	ldr	r0, [r1, #68]	; 0x44
    35e2:	3808      	subs	r0, #8
    35e4:	f000 f904 	bl	37f0 <usb_free>
    35e8:	e4e1      	b.n	2fae <usb_isr+0x39a>
    35ea:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    35ec:	3808      	subs	r0, #8
    35ee:	f000 f8ff 	bl	37f0 <usb_free>
    35f2:	e4d6      	b.n	2fa2 <usb_isr+0x38e>
    35f4:	6b48      	ldr	r0, [r1, #52]	; 0x34
    35f6:	3808      	subs	r0, #8
    35f8:	f000 f8fa 	bl	37f0 <usb_free>
    35fc:	e4cb      	b.n	2f96 <usb_isr+0x382>
    35fe:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    3600:	3808      	subs	r0, #8
    3602:	f000 f8f5 	bl	37f0 <usb_free>
    3606:	e4c0      	b.n	2f8a <usb_isr+0x376>
    3608:	6a60      	ldr	r0, [r4, #36]	; 0x24
    360a:	3808      	subs	r0, #8
    360c:	f000 f8f0 	bl	37f0 <usb_free>
    3610:	e4b5      	b.n	2f7e <usb_isr+0x36a>
    3612:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    3614:	3808      	subs	r0, #8
    3616:	f000 f8eb 	bl	37f0 <usb_free>
    361a:	e4f2      	b.n	3002 <usb_isr+0x3ee>
    361c:	6f48      	ldr	r0, [r1, #116]	; 0x74
    361e:	3808      	subs	r0, #8
    3620:	f000 f8e6 	bl	37f0 <usb_free>
    3624:	e4e7      	b.n	2ff6 <usb_isr+0x3e2>
    3626:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    3628:	3808      	subs	r0, #8
    362a:	f000 f8e1 	bl	37f0 <usb_free>
    362e:	e4dc      	b.n	2fea <usb_isr+0x3d6>
    3630:	6e48      	ldr	r0, [r1, #100]	; 0x64
    3632:	3808      	subs	r0, #8
    3634:	f000 f8dc 	bl	37f0 <usb_free>
    3638:	e4d1      	b.n	2fde <usb_isr+0x3ca>
    363a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    363e:	3808      	subs	r0, #8
    3640:	f000 f8d6 	bl	37f0 <usb_free>
    3644:	e4e9      	b.n	301a <usb_isr+0x406>
    3646:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    364a:	3808      	subs	r0, #8
    364c:	f000 f8d0 	bl	37f0 <usb_free>
    3650:	e4dd      	b.n	300e <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3652:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3654:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3658:	3201      	adds	r2, #1
    365a:	702a      	strb	r2, [r5, #0]
    365c:	e541      	b.n	30e2 <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    365e:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3660:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3664:	3201      	adds	r2, #1
    3666:	702a      	strb	r2, [r5, #0]
    3668:	e794      	b.n	3594 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    366a:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    366c:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    3670:	3201      	adds	r2, #1
    3672:	702a      	strb	r2, [r5, #0]
    3674:	e543      	b.n	30fe <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3676:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3678:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    367c:	3201      	adds	r2, #1
    367e:	702a      	strb	r2, [r5, #0]
    3680:	e773      	b.n	356a <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3682:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3684:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    3688:	3201      	adds	r2, #1
    368a:	702a      	strb	r2, [r5, #0]
    368c:	e550      	b.n	3130 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    368e:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3690:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    3694:	3201      	adds	r2, #1
    3696:	702a      	strb	r2, [r5, #0]
    3698:	e70e      	b.n	34b8 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    369a:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    369c:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    36a0:	3201      	adds	r2, #1
    36a2:	702a      	strb	r2, [r5, #0]
    36a4:	e538      	b.n	3118 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    36a6:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    36a8:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    36ac:	3201      	adds	r2, #1
    36ae:	702a      	strb	r2, [r5, #0]
    36b0:	e719      	b.n	34e6 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    36b2:	be00      	bkpt	0x0000
    36b4:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    36b8:	46f4      	mov	ip, lr
    36ba:	bf28      	it	cs
    36bc:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    36c0:	eb04 030c 	add.w	r3, r4, ip
    36c4:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    36c6:	2301      	movs	r3, #1
    36c8:	ebcc 000e 	rsb	r0, ip, lr
    36cc:	ea4f 480c 	mov.w	r8, ip, lsl #16
    36d0:	2200      	movs	r2, #0
    36d2:	9301      	str	r3, [sp, #4]
    36d4:	e53a      	b.n	314c <usb_isr+0x538>
    36d6:	bf00      	nop
    36d8:	00400088 	.word	0x00400088
    36dc:	004000c8 	.word	0x004000c8

000036e0 <usb_init>:
}



void usb_init(void)
{
    36e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36e4:	4c27      	ldr	r4, [pc, #156]	; (3784 <usb_init+0xa4>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    36e6:	f000 fcd3 	bl	4090 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    36ea:	2200      	movs	r2, #0
    36ec:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    36f0:	4623      	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    36f2:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    36f4:	605a      	str	r2, [r3, #4]
    36f6:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    36f8:	4283      	cmp	r3, r0
		table[i].desc = 0;
    36fa:	f04f 0100 	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    36fe:	d1f8      	bne.n	36f2 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3700:	4821      	ldr	r0, [pc, #132]	; (3788 <usb_init+0xa8>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    3702:	4a22      	ldr	r2, [pc, #136]	; (378c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3704:	6803      	ldr	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3706:	f8df e09c 	ldr.w	lr, [pc, #156]	; 37a4 <usb_init+0xc4>
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    370a:	4e21      	ldr	r6, [pc, #132]	; (3790 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    370c:	4d21      	ldr	r5, [pc, #132]	; (3794 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    370e:	4f22      	ldr	r7, [pc, #136]	; (3798 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3710:	f8df c094 	ldr.w	ip, [pc, #148]	; 37a8 <usb_init+0xc8>
	USB0_ERRSTAT = 0xFF;
    3714:	f8df 8094 	ldr.w	r8, [pc, #148]	; 37ac <usb_init+0xcc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    371c:	6003      	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    371e:	6813      	ldr	r3, [r2, #0]
    3720:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    3724:	6013      	str	r3, [r2, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    3726:	2303      	movs	r3, #3
    3728:	f88e 3000 	strb.w	r3, [lr]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    372c:	23a0      	movs	r3, #160	; 0xa0
    372e:	7033      	strb	r3, [r6, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3730:	f502 22c9 	add.w	r2, r2, #411648	; 0x64800
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3734:	f3c4 2307 	ubfx	r3, r4, #8, #8
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3738:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    373c:	702b      	strb	r3, [r5, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    373e:	3080      	adds	r0, #128	; 0x80
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3740:	f3c4 4307 	ubfx	r3, r4, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    3744:	3210      	adds	r2, #16
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3746:	703b      	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    3748:	0e24      	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    374a:	23ff      	movs	r3, #255	; 0xff
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    374c:	7004      	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    374e:	4d13      	ldr	r5, [pc, #76]	; (379c <usb_init+0xbc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    3750:	f88c 3000 	strb.w	r3, [ip]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3754:	4812      	ldr	r0, [pc, #72]	; (37a0 <usb_init+0xc0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    3756:	f888 3000 	strb.w	r3, [r8]
	USB0_OTGISTAT = 0xFF;
    375a:	7013      	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    375c:	2301      	movs	r3, #1
    375e:	f806 3cac 	strb.w	r3, [r6, #-172]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3762:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    3766:	f80e 1c44 	strb.w	r1, [lr, #-68]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    376a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    376c:	2110      	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    376e:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    3772:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3774:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3776:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    377a:	f1ae 0e44 	sub.w	lr, lr, #68	; 0x44
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3782:	bf00      	nop
    3784:	1fff0000 	.word	0x1fff0000
    3788:	40048034 	.word	0x40048034
    378c:	4000d800 	.word	0x4000d800
    3790:	40072140 	.word	0x40072140
    3794:	4007209c 	.word	0x4007209c
    3798:	400720b0 	.word	0x400720b0
    379c:	e000e435 	.word	0xe000e435
    37a0:	e000e104 	.word	0xe000e104
    37a4:	40072144 	.word	0x40072144
    37a8:	40072080 	.word	0x40072080
    37ac:	40072088 	.word	0x40072088

000037b0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    37b0:	b672      	cpsid	i
	avail = usb_buffer_available;
    37b2:	480d      	ldr	r0, [pc, #52]	; (37e8 <usb_malloc+0x38>)
    37b4:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    37b6:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    37ba:	2b0b      	cmp	r3, #11
    37bc:	dc10      	bgt.n	37e0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    37be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    37c2:	40d9      	lsrs	r1, r3
    37c4:	ea22 0201 	bic.w	r2, r2, r1
    37c8:	6002      	str	r2, [r0, #0]
	__enable_irq();
    37ca:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    37cc:	4807      	ldr	r0, [pc, #28]	; (37ec <usb_malloc+0x3c>)
    37ce:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    37d6:	2100      	movs	r1, #0
    37d8:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    37da:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    37dc:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    37de:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    37e0:	b662      	cpsie	i
		return NULL;
    37e2:	2000      	movs	r0, #0
    37e4:	4770      	bx	lr
    37e6:	bf00      	nop
    37e8:	1fff08b8 	.word	0x1fff08b8
    37ec:	1fff03d0 	.word	0x1fff03d0

000037f0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    37f0:	4b0d      	ldr	r3, [pc, #52]	; (3828 <usb_free+0x38>)
    37f2:	4a0e      	ldr	r2, [pc, #56]	; (382c <usb_free+0x3c>)
    37f4:	1ac3      	subs	r3, r0, r3
    37f6:	fba2 2303 	umull	r2, r3, r2, r3
    37fa:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    37fc:	2b0b      	cmp	r3, #11
    37fe:	d80c      	bhi.n	381a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3800:	4a0b      	ldr	r2, [pc, #44]	; (3830 <usb_free+0x40>)
    3802:	7812      	ldrb	r2, [r2, #0]
    3804:	b952      	cbnz	r2, 381c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3806:	b672      	cpsid	i
	usb_buffer_available |= mask;
    3808:	480a      	ldr	r0, [pc, #40]	; (3834 <usb_free+0x44>)
    380a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    380e:	6802      	ldr	r2, [r0, #0]
    3810:	fa21 f303 	lsr.w	r3, r1, r3
    3814:	431a      	orrs	r2, r3
    3816:	6002      	str	r2, [r0, #0]
	__enable_irq();
    3818:	b662      	cpsie	i
    381a:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    381c:	4a06      	ldr	r2, [pc, #24]	; (3838 <usb_free+0x48>)
    381e:	7812      	ldrb	r2, [r2, #0]
    3820:	2a00      	cmp	r2, #0
    3822:	d0f0      	beq.n	3806 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3824:	f7ff b950 	b.w	2ac8 <usb_rx_memory>
    3828:	1fff03d0 	.word	0x1fff03d0
    382c:	38e38e39 	.word	0x38e38e39
    3830:	1fff14e9 	.word	0x1fff14e9
    3834:	1fff08b8 	.word	0x1fff08b8
    3838:	1fff14f4 	.word	0x1fff14f4

0000383c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    383c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    383e:	4d0f      	ldr	r5, [pc, #60]	; (387c <usb_serial_getchar+0x40>)
    3840:	6828      	ldr	r0, [r5, #0]
    3842:	b178      	cbz	r0, 3864 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3844:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    3846:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3848:	18c1      	adds	r1, r0, r3
    384a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    384c:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    384e:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    3850:	d202      	bcs.n	3858 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3852:	8043      	strh	r3, [r0, #2]
	}
	return c;
    3854:	4620      	mov	r0, r4
}
    3856:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    3858:	f7ff ffca 	bl	37f0 <usb_free>
		rx_packet = NULL;
    385c:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    385e:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3860:	602b      	str	r3, [r5, #0]
    3862:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3864:	4b06      	ldr	r3, [pc, #24]	; (3880 <usb_serial_getchar+0x44>)
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	b12b      	cbz	r3, 3876 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    386a:	2003      	movs	r0, #3
    386c:	f7ff f8f8 	bl	2a60 <usb_rx>
    3870:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    3872:	2800      	cmp	r0, #0
    3874:	d1e6      	bne.n	3844 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3876:	f04f 30ff 	mov.w	r0, #4294967295
    387a:	bd38      	pop	{r3, r4, r5, pc}
    387c:	1fff1508 	.word	0x1fff1508
    3880:	1fff14f4 	.word	0x1fff14f4

00003884 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3884:	b510      	push	{r4, lr}
	if (!rx_packet) {
    3886:	4c09      	ldr	r4, [pc, #36]	; (38ac <usb_serial_peekchar+0x28>)
    3888:	6820      	ldr	r0, [r4, #0]
    388a:	b118      	cbz	r0, 3894 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    388c:	8843      	ldrh	r3, [r0, #2]
    388e:	4418      	add	r0, r3
    3890:	7a00      	ldrb	r0, [r0, #8]
}
    3892:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3894:	4b06      	ldr	r3, [pc, #24]	; (38b0 <usb_serial_peekchar+0x2c>)
    3896:	781b      	ldrb	r3, [r3, #0]
    3898:	b12b      	cbz	r3, 38a6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    389a:	2003      	movs	r0, #3
    389c:	f7ff f8e0 	bl	2a60 <usb_rx>
    38a0:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    38a2:	2800      	cmp	r0, #0
    38a4:	d1f2      	bne.n	388c <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    38a6:	f04f 30ff 	mov.w	r0, #4294967295
    38aa:	bd10      	pop	{r4, pc}
    38ac:	1fff1508 	.word	0x1fff1508
    38b0:	1fff14f4 	.word	0x1fff14f4

000038b4 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    38b4:	4b04      	ldr	r3, [pc, #16]	; (38c8 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    38b6:	4a05      	ldr	r2, [pc, #20]	; (38cc <usb_serial_available+0x18>)
    38b8:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    38ba:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    38bc:	b11b      	cbz	r3, 38c6 <usb_serial_available+0x12>
    38be:	881a      	ldrh	r2, [r3, #0]
    38c0:	885b      	ldrh	r3, [r3, #2]
    38c2:	1ad3      	subs	r3, r2, r3
    38c4:	4418      	add	r0, r3
	return count;
}
    38c6:	4770      	bx	lr
    38c8:	1fff1508 	.word	0x1fff1508
    38cc:	1fff1574 	.word	0x1fff1574

000038d0 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    38d0:	4b0b      	ldr	r3, [pc, #44]	; (3900 <usb_serial_flush_input+0x30>)
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	b19b      	cbz	r3, 38fe <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    38d6:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    38d8:	4c0a      	ldr	r4, [pc, #40]	; (3904 <usb_serial_flush_input+0x34>)
    38da:	6820      	ldr	r0, [r4, #0]
    38dc:	b148      	cbz	r0, 38f2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    38de:	f7ff ff87 	bl	37f0 <usb_free>
		rx_packet = NULL;
    38e2:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    38e4:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    38e6:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    38e8:	f7ff f8ba 	bl	2a60 <usb_rx>
		if (!rx) break;
    38ec:	b130      	cbz	r0, 38fc <usb_serial_flush_input+0x2c>
		usb_free(rx);
    38ee:	f7ff ff7f 	bl	37f0 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    38f2:	2003      	movs	r0, #3
    38f4:	f7ff f8b4 	bl	2a60 <usb_rx>
		if (!rx) break;
    38f8:	2800      	cmp	r0, #0
    38fa:	d1f8      	bne.n	38ee <usb_serial_flush_input+0x1e>
    38fc:	bd10      	pop	{r4, pc}
    38fe:	4770      	bx	lr
    3900:	1fff14f4 	.word	0x1fff14f4
    3904:	1fff1508 	.word	0x1fff1508

00003908 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    390c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 3a08 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3910:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3912:	2201      	movs	r2, #1
    3914:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    3918:	9101      	str	r1, [sp, #4]
    391a:	b369      	cbz	r1, 3978 <usb_serial_write+0x70>
    391c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3a0c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3920:	4f35      	ldr	r7, [pc, #212]	; (39f8 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3922:	9e01      	ldr	r6, [sp, #4]
    3924:	4683      	mov	fp, r0
		if (!tx_packet) {
    3926:	f8d8 0000 	ldr.w	r0, [r8]
    392a:	b3b0      	cbz	r0, 399a <usb_serial_write+0x92>
    392c:	4d33      	ldr	r5, [pc, #204]	; (39fc <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    392e:	8844      	ldrh	r4, [r0, #2]
    3930:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    3934:	42b1      	cmp	r1, r6
    3936:	bf28      	it	cs
    3938:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    393a:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    393e:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3940:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3944:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    3946:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3948:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    394c:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    3950:	b151      	cbz	r1, 3968 <usb_serial_write+0x60>
    3952:	3c01      	subs	r4, #1
    3954:	4422      	add	r2, r4
    3956:	4459      	add	r1, fp
    3958:	f81b 4b01 	ldrb.w	r4, [fp], #1
    395c:	f802 4f01 	strb.w	r4, [r2, #1]!
    3960:	458b      	cmp	fp, r1
    3962:	d1f9      	bne.n	3958 <usb_serial_write+0x50>
    3964:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    3968:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    396c:	d80b      	bhi.n	3986 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    396e:	4a24      	ldr	r2, [pc, #144]	; (3a00 <usb_serial_write+0xf8>)
    3970:	2105      	movs	r1, #5
    3972:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3974:	2e00      	cmp	r6, #0
    3976:	d1d6      	bne.n	3926 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    3978:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    397a:	2300      	movs	r3, #0
    397c:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    3980:	b003      	add	sp, #12
    3982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    3986:	2240      	movs	r2, #64	; 0x40
    3988:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    398a:	4601      	mov	r1, r0
    398c:	2004      	movs	r0, #4
    398e:	f7ff f8ff 	bl	2b90 <usb_tx>
			tx_packet = NULL;
    3992:	2200      	movs	r2, #0
    3994:	f8c8 2000 	str.w	r2, [r8]
    3998:	e7e9      	b.n	396e <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    399a:	783a      	ldrb	r2, [r7, #0]
    399c:	b322      	cbz	r2, 39e8 <usb_serial_write+0xe0>
    399e:	4c19      	ldr	r4, [pc, #100]	; (3a04 <usb_serial_write+0xfc>)
    39a0:	4d16      	ldr	r5, [pc, #88]	; (39fc <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    39a2:	f04f 0a01 	mov.w	sl, #1
    39a6:	e007      	b.n	39b8 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    39a8:	3c01      	subs	r4, #1
    39aa:	d016      	beq.n	39da <usb_serial_write+0xd2>
    39ac:	782a      	ldrb	r2, [r5, #0]
    39ae:	b9a2      	cbnz	r2, 39da <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    39b0:	f000 fa62 	bl	3e78 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    39b4:	783a      	ldrb	r2, [r7, #0]
    39b6:	b1ba      	cbz	r2, 39e8 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    39b8:	2004      	movs	r0, #4
    39ba:	f7ff f86f 	bl	2a9c <usb_tx_packet_count>
    39be:	2807      	cmp	r0, #7
    39c0:	d8f2      	bhi.n	39a8 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    39c2:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    39c6:	f7ff fef3 	bl	37b0 <usb_malloc>
    39ca:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    39ce:	2800      	cmp	r0, #0
    39d0:	d1ad      	bne.n	392e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    39d2:	4b0d      	ldr	r3, [pc, #52]	; (3a08 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    39d4:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    39d6:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    39d8:	d1e8      	bne.n	39ac <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    39da:	2301      	movs	r3, #1
					return -1;
    39dc:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    39e0:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    39e2:	b003      	add	sp, #12
    39e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    39e8:	2300      	movs	r3, #0
					return -1;
    39ea:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    39ee:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    39f2:	b003      	add	sp, #12
    39f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f8:	1fff14f4 	.word	0x1fff14f4
    39fc:	1fff1504 	.word	0x1fff1504
    3a00:	1fff14fc 	.word	0x1fff14fc
    3a04:	00014821 	.word	0x00014821
    3a08:	1fff14fd 	.word	0x1fff14fd
    3a0c:	1fff1500 	.word	0x1fff1500

00003a10 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3a10:	b500      	push	{lr}
    3a12:	b083      	sub	sp, #12
    3a14:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    3a16:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3a18:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    3a1c:	4618      	mov	r0, r3
    3a1e:	f7ff ff73 	bl	3908 <usb_serial_write>
}
    3a22:	b003      	add	sp, #12
    3a24:	f85d fb04 	ldr.w	pc, [sp], #4

00003a28 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    3a28:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    3a2a:	4d0e      	ldr	r5, [pc, #56]	; (3a64 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3a2c:	4c0e      	ldr	r4, [pc, #56]	; (3a68 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    3a2e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3a30:	2301      	movs	r3, #1
    3a32:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    3a34:	b128      	cbz	r0, 3a42 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3a36:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    3a38:	2300      	movs	r3, #0
    3a3a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3a3c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    3a40:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3a42:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <usb_serial_write_buffer_free+0x44>)
    3a44:	781b      	ldrb	r3, [r3, #0]
    3a46:	b913      	cbnz	r3, 3a4e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    3a48:	2000      	movs	r0, #0
    3a4a:	7020      	strb	r0, [r4, #0]
			return 0;
    3a4c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3a4e:	2004      	movs	r0, #4
    3a50:	f7ff f824 	bl	2a9c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3a54:	2807      	cmp	r0, #7
    3a56:	d8f7      	bhi.n	3a48 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    3a58:	f7ff feaa 	bl	37b0 <usb_malloc>
    3a5c:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3a5e:	2800      	cmp	r0, #0
    3a60:	d1e9      	bne.n	3a36 <usb_serial_write_buffer_free+0xe>
    3a62:	e7f1      	b.n	3a48 <usb_serial_write_buffer_free+0x20>
    3a64:	1fff1500 	.word	0x1fff1500
    3a68:	1fff14fd 	.word	0x1fff14fd
    3a6c:	1fff14f4 	.word	0x1fff14f4

00003a70 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    3a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    3a72:	4b11      	ldr	r3, [pc, #68]	; (3ab8 <usb_serial_flush_output+0x48>)
    3a74:	781b      	ldrb	r3, [r3, #0]
    3a76:	b18b      	cbz	r3, 3a9c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    3a78:	4e10      	ldr	r6, [pc, #64]	; (3abc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3a7a:	4d11      	ldr	r5, [pc, #68]	; (3ac0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    3a7c:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3a7e:	2701      	movs	r7, #1
    3a80:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    3a82:	b164      	cbz	r4, 3a9e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    3a84:	4a0f      	ldr	r2, [pc, #60]	; (3ac4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    3a86:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    3a88:	2700      	movs	r7, #0
    3a8a:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3a8c:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    3a8e:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3a90:	2004      	movs	r0, #4
    3a92:	f7ff f87d 	bl	2b90 <usb_tx>
		tx_packet = NULL;
    3a96:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    3a98:	2300      	movs	r3, #0
    3a9a:	702b      	strb	r3, [r5, #0]
    3a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3a9e:	f7ff fe87 	bl	37b0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3aa2:	4b08      	ldr	r3, [pc, #32]	; (3ac4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    3aa4:	b128      	cbz	r0, 3ab2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    3aa6:	4601      	mov	r1, r0
    3aa8:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3aaa:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    3aac:	f7ff f870 	bl	2b90 <usb_tx>
    3ab0:	e7f2      	b.n	3a98 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3ab2:	701f      	strb	r7, [r3, #0]
    3ab4:	e7f0      	b.n	3a98 <usb_serial_flush_output+0x28>
    3ab6:	bf00      	nop
    3ab8:	1fff14f4 	.word	0x1fff14f4
    3abc:	1fff1500 	.word	0x1fff1500
    3ac0:	1fff14fd 	.word	0x1fff14fd
    3ac4:	1fff14fc 	.word	0x1fff14fc

00003ac8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    3ac8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    3aca:	4b0e      	ldr	r3, [pc, #56]	; (3b04 <usb_serial_flush_callback+0x3c>)
    3acc:	781b      	ldrb	r3, [r3, #0]
    3ace:	b973      	cbnz	r3, 3aee <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    3ad0:	4c0d      	ldr	r4, [pc, #52]	; (3b08 <usb_serial_flush_callback+0x40>)
    3ad2:	6821      	ldr	r1, [r4, #0]
    3ad4:	b161      	cbz	r1, 3af0 <usb_serial_flush_callback+0x28>
    3ad6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    3ada:	884b      	ldrh	r3, [r1, #2]
    3adc:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3ade:	2004      	movs	r0, #4
    3ae0:	f7ff f856 	bl	2b90 <usb_tx>
		tx_packet = NULL;
    3ae4:	6025      	str	r5, [r4, #0]
    3ae6:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3ae8:	4b08      	ldr	r3, [pc, #32]	; (3b0c <usb_serial_flush_callback+0x44>)
    3aea:	2201      	movs	r2, #1
    3aec:	701a      	strb	r2, [r3, #0]
    3aee:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3af0:	f7ff fe5e 	bl	37b0 <usb_malloc>
		if (tx) {
    3af4:	2800      	cmp	r0, #0
    3af6:	d0f7      	beq.n	3ae8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    3af8:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    3afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    3afe:	2004      	movs	r0, #4
    3b00:	f7ff b846 	b.w	2b90 <usb_tx>
    3b04:	1fff14fd 	.word	0x1fff14fd
    3b08:	1fff1500 	.word	0x1fff1500
    3b0c:	1fff14fc 	.word	0x1fff14fc

00003b10 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    3b10:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b12:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3b16:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3b18:	7f43      	ldrb	r3, [r0, #29]
    3b1a:	b933      	cbnz	r3, 3b2a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3b1c:	7f01      	ldrb	r1, [r0, #28]
    3b1e:	2901      	cmp	r1, #1
    3b20:	d008      	beq.n	3b34 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3b22:	2903      	cmp	r1, #3
    3b24:	d010      	beq.n	3b48 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3b26:	2301      	movs	r3, #1
    3b28:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3b2a:	b902      	cbnz	r2, 3b2e <EventResponder::triggerEventNotImmediate()+0x1e>
    3b2c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b32:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3b34:	4c11      	ldr	r4, [pc, #68]	; (3b7c <EventResponder::triggerEventNotImmediate()+0x6c>)
    3b36:	6821      	ldr	r1, [r4, #0]
    3b38:	b1a1      	cbz	r1, 3b64 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3b3a:	4911      	ldr	r1, [pc, #68]	; (3b80 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3b3c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3b3e:	680b      	ldr	r3, [r1, #0]
    3b40:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    3b42:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    3b44:	6158      	str	r0, [r3, #20]
    3b46:	e7ee      	b.n	3b26 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3b48:	4c0e      	ldr	r4, [pc, #56]	; (3b84 <EventResponder::triggerEventNotImmediate()+0x74>)
    3b4a:	6821      	ldr	r1, [r4, #0]
    3b4c:	b181      	cbz	r1, 3b70 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3b4e:	490e      	ldr	r1, [pc, #56]	; (3b88 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3b50:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3b52:	680b      	ldr	r3, [r1, #0]
    3b54:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    3b56:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    3b58:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3b5a:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <EventResponder::triggerEventNotImmediate()+0x7c>)
    3b5c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3b60:	6019      	str	r1, [r3, #0]
    3b62:	e7e0      	b.n	3b26 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3b64:	4b06      	ldr	r3, [pc, #24]	; (3b80 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3b66:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3b68:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3b6a:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3b6c:	6018      	str	r0, [r3, #0]
    3b6e:	e7da      	b.n	3b26 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3b70:	4b05      	ldr	r3, [pc, #20]	; (3b88 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3b72:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3b74:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3b76:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3b78:	6018      	str	r0, [r3, #0]
    3b7a:	e7ee      	b.n	3b5a <EventResponder::triggerEventNotImmediate()+0x4a>
    3b7c:	1fff151c 	.word	0x1fff151c
    3b80:	1fff1518 	.word	0x1fff1518
    3b84:	1fff1510 	.word	0x1fff1510
    3b88:	1fff1514 	.word	0x1fff1514
    3b8c:	e000ed04 	.word	0xe000ed04

00003b90 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3b90:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b92:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3b96:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3b98:	4c0c      	ldr	r4, [pc, #48]	; (3bcc <EventResponder::runFromInterrupt()+0x3c>)
    3b9a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3b9c:	b180      	cbz	r0, 3bc0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3b9e:	4e0c      	ldr	r6, [pc, #48]	; (3bd0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3ba0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3ba2:	6943      	ldr	r3, [r0, #20]
    3ba4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3ba6:	b173      	cbz	r3, 3bc6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3ba8:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3baa:	b902      	cbnz	r2, 3bae <EventResponder::runFromInterrupt()+0x1e>
    3bac:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3bae:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3bb0:	6883      	ldr	r3, [r0, #8]
    3bb2:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3bb4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3bb8:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3bba:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d1f0      	bne.n	3ba2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3bc0:	b902      	cbnz	r2, 3bc4 <EventResponder::runFromInterrupt()+0x34>
    3bc2:	b662      	cpsie	i
    3bc4:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3bc6:	6033      	str	r3, [r6, #0]
    3bc8:	e7ef      	b.n	3baa <EventResponder::runFromInterrupt()+0x1a>
    3bca:	bf00      	nop
    3bcc:	1fff1510 	.word	0x1fff1510
    3bd0:	1fff1514 	.word	0x1fff1514

00003bd4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3bd4:	f7ff bfdc 	b.w	3b90 <EventResponder::runFromInterrupt()>

00003bd8 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    3bd8:	4a02      	ldr	r2, [pc, #8]	; (3be4 <systick_isr+0xc>)
    3bda:	6813      	ldr	r3, [r2, #0]
    3bdc:	3301      	adds	r3, #1
    3bde:	6013      	str	r3, [r2, #0]
    3be0:	4770      	bx	lr
    3be2:	bf00      	nop
    3be4:	1fff1410 	.word	0x1fff1410

00003be8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3be8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3bea:	f7fc fc3f 	bl	46c <setup>
	while (1) {
		loop();
    3bee:	f7fc fdef 	bl	7d0 <loop>
		yield();
    3bf2:	f000 f941 	bl	3e78 <yield>
    3bf6:	e7fa      	b.n	3bee <main+0x6>

00003bf8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3bf8:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3bfa:	4a06      	ldr	r2, [pc, #24]	; (3c14 <Print::println()+0x1c>)
	return write(buf, 2);
    3bfc:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3bfe:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    3c00:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3c02:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3c04:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3c06:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    3c0a:	2202      	movs	r2, #2
    3c0c:	4798      	blx	r3
}
    3c0e:	b003      	add	sp, #12
    3c10:	f85d fb04 	ldr.w	pc, [sp], #4
    3c14:	00005c90 	.word	0x00005c90

00003c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c1a:	4607      	mov	r7, r0
    3c1c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3c1e:	2a00      	cmp	r2, #0
    3c20:	d033      	beq.n	3c8a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3c22:	2a01      	cmp	r2, #1
    3c24:	bf08      	it	eq
    3c26:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3c28:	b351      	cbz	r1, 3c80 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3c2a:	2421      	movs	r4, #33	; 0x21
    3c2c:	e000      	b.n	3c30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3c2e:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3c30:	fbb1 f5f2 	udiv	r5, r1, r2
    3c34:	fb02 1115 	mls	r1, r2, r5, r1
    3c38:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c3a:	2909      	cmp	r1, #9
    3c3c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    3c40:	bf98      	it	ls
    3c42:	b2c8      	uxtbls	r0, r1
    3c44:	a90a      	add	r1, sp, #40	; 0x28
    3c46:	bf88      	it	hi
    3c48:	3037      	addhi	r0, #55	; 0x37
    3c4a:	4421      	add	r1, r4
    3c4c:	bf88      	it	hi
    3c4e:	b2c0      	uxtbhi	r0, r0
    3c50:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    3c54:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    3c56:	4629      	mov	r1, r5
    3c58:	2d00      	cmp	r5, #0
    3c5a:	d1e8      	bne.n	3c2e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3c5c:	b133      	cbz	r3, 3c6c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3c5e:	3c01      	subs	r4, #1
    3c60:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    3c62:	ab0a      	add	r3, sp, #40	; 0x28
    3c64:	4423      	add	r3, r4
    3c66:	222d      	movs	r2, #45	; 0x2d
    3c68:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3c6c:	683b      	ldr	r3, [r7, #0]
    3c6e:	aa01      	add	r2, sp, #4
    3c70:	1911      	adds	r1, r2, r4
    3c72:	685b      	ldr	r3, [r3, #4]
    3c74:	4638      	mov	r0, r7
    3c76:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    3c7a:	4798      	blx	r3
}
    3c7c:	b00b      	add	sp, #44	; 0x2c
    3c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3c80:	2230      	movs	r2, #48	; 0x30
    3c82:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3c86:	2421      	movs	r4, #33	; 0x21
    3c88:	e7e8      	b.n	3c5c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3c8a:	6803      	ldr	r3, [r0, #0]
    3c8c:	b2c9      	uxtb	r1, r1
    3c8e:	681b      	ldr	r3, [r3, #0]
    3c90:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3c92:	b00b      	add	sp, #44	; 0x2c
    3c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c96:	bf00      	nop

00003c98 <Print::printFloat(double, unsigned char)>:

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    3c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c9c:	ec57 6b10 	vmov	r6, r7, d0
    3ca0:	b085      	sub	sp, #20
    3ca2:	4605      	mov	r5, r0
    3ca4:	460c      	mov	r4, r1
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    3ca6:	ee10 2a10 	vmov	r2, s0
    3caa:	463b      	mov	r3, r7
    3cac:	ee10 0a10 	vmov	r0, s0
    3cb0:	4639      	mov	r1, r7
    3cb2:	f000 fe83 	bl	49bc <__aeabi_dcmpun>
    3cb6:	2800      	cmp	r0, #0
    3cb8:	f040 80b2 	bne.w	3e20 <Print::printFloat(double, unsigned char)+0x188>
    	if (isinf(number)) return print("inf");
    3cbc:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    3cc0:	4630      	mov	r0, r6
    3cc2:	4649      	mov	r1, r9
    3cc4:	f04f 32ff 	mov.w	r2, #4294967295
    3cc8:	4b59      	ldr	r3, [pc, #356]	; (3e30 <Print::printFloat(double, unsigned char)+0x198>)
    3cca:	f000 fe77 	bl	49bc <__aeabi_dcmpun>
    3cce:	b990      	cbnz	r0, 3cf6 <Print::printFloat(double, unsigned char)+0x5e>
    3cd0:	4630      	mov	r0, r6
    3cd2:	4649      	mov	r1, r9
    3cd4:	f04f 32ff 	mov.w	r2, #4294967295
    3cd8:	4b55      	ldr	r3, [pc, #340]	; (3e30 <Print::printFloat(double, unsigned char)+0x198>)
    3cda:	f000 fe51 	bl	4980 <__aeabi_dcmple>
    3cde:	b950      	cbnz	r0, 3cf6 <Print::printFloat(double, unsigned char)+0x5e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3ce0:	682b      	ldr	r3, [r5, #0]
    3ce2:	4954      	ldr	r1, [pc, #336]	; (3e34 <Print::printFloat(double, unsigned char)+0x19c>)
    3ce4:	685b      	ldr	r3, [r3, #4]
    3ce6:	4628      	mov	r0, r5
    3ce8:	2203      	movs	r2, #3
    3cea:	4798      	blx	r3
    3cec:	4680      	mov	r8, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    3cee:	4640      	mov	r0, r8
    3cf0:	b005      	add	sp, #20
    3cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    3cf6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    3cfa:	4b4f      	ldr	r3, [pc, #316]	; (3e38 <Print::printFloat(double, unsigned char)+0x1a0>)
    3cfc:	4630      	mov	r0, r6
    3cfe:	4639      	mov	r1, r7
    3d00:	f000 fe52 	bl	49a8 <__aeabi_dcmpgt>
    3d04:	2800      	cmp	r0, #0
    3d06:	d172      	bne.n	3dee <Print::printFloat(double, unsigned char)+0x156>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    3d08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    3d0c:	4b4b      	ldr	r3, [pc, #300]	; (3e3c <Print::printFloat(double, unsigned char)+0x1a4>)
    3d0e:	4630      	mov	r0, r6
    3d10:	4639      	mov	r1, r7
    3d12:	f000 fe2b 	bl	496c <__aeabi_dcmplt>
    3d16:	2800      	cmp	r0, #0
    3d18:	d169      	bne.n	3dee <Print::printFloat(double, unsigned char)+0x156>
	
	// Handle negative numbers
	if (number < 0.0) {
    3d1a:	2200      	movs	r2, #0
    3d1c:	2300      	movs	r3, #0
    3d1e:	4630      	mov	r0, r6
    3d20:	4639      	mov	r1, r7
    3d22:	f000 fe23 	bl	496c <__aeabi_dcmplt>
    3d26:	2800      	cmp	r0, #0
    3d28:	d164      	bne.n	3df4 <Print::printFloat(double, unsigned char)+0x15c>

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    3d2a:	4681      	mov	r9, r0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3d2c:	2c00      	cmp	r4, #0
    3d2e:	d067      	beq.n	3e00 <Print::printFloat(double, unsigned char)+0x168>
    3d30:	4943      	ldr	r1, [pc, #268]	; (3e40 <Print::printFloat(double, unsigned char)+0x1a8>)
    3d32:	2000      	movs	r0, #0
    3d34:	f04f 0800 	mov.w	r8, #0
		rounding *= 0.1;
    3d38:	a33b      	add	r3, pc, #236	; (adr r3, 3e28 <Print::printFloat(double, unsigned char)+0x190>)
    3d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3e:	f108 0801 	add.w	r8, r8, #1
    3d42:	f000 fba1 	bl	4488 <__aeabi_dmul>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    3d46:	fa5f f388 	uxtb.w	r3, r8
    3d4a:	429c      	cmp	r4, r3
    3d4c:	d8f4      	bhi.n	3d38 <Print::printFloat(double, unsigned char)+0xa0>
		rounding *= 0.1;
	}
	number += rounding;
    3d4e:	4602      	mov	r2, r0
    3d50:	460b      	mov	r3, r1
    3d52:	4630      	mov	r0, r6
    3d54:	4639      	mov	r1, r7
    3d56:	f000 f9e5 	bl	4124 <__adddf3>
    3d5a:	460f      	mov	r7, r1
    3d5c:	4606      	mov	r6, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    3d5e:	f000 fe43 	bl	49e8 <__aeabi_d2uiz>
    3d62:	4680      	mov	r8, r0
	double remainder = number - (double)int_part;
    3d64:	f000 fb1a 	bl	439c <__aeabi_ui2d>
    3d68:	4602      	mov	r2, r0
    3d6a:	460b      	mov	r3, r1
    3d6c:	4630      	mov	r0, r6
    3d6e:	4639      	mov	r1, r7
    3d70:	f000 f9d6 	bl	4120 <__aeabi_dsub>
	count += printNumber(int_part, 10, sign);
    3d74:	464b      	mov	r3, r9
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    3d76:	4606      	mov	r6, r0
    3d78:	460f      	mov	r7, r1
	count += printNumber(int_part, 10, sign);
    3d7a:	220a      	movs	r2, #10
    3d7c:	4641      	mov	r1, r8
    3d7e:	4628      	mov	r0, r5
    3d80:	f7ff ff4a 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3d84:	2c0f      	cmp	r4, #15
    3d86:	bf28      	it	cs
    3d88:	240f      	movcs	r4, #15
    3d8a:	f104 0901 	add.w	r9, r4, #1

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3d8e:	232e      	movs	r3, #46	; 0x2e
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3d90:	4680      	mov	r8, r0
    3d92:	fa5f f989 	uxtb.w	r9, r9

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    3d96:	f88d 3000 	strb.w	r3, [sp]
    3d9a:	2401      	movs	r4, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    3d9c:	2200      	movs	r2, #0
    3d9e:	4b29      	ldr	r3, [pc, #164]	; (3e44 <Print::printFloat(double, unsigned char)+0x1ac>)
    3da0:	4630      	mov	r0, r6
    3da2:	4639      	mov	r1, r7
    3da4:	f000 fb70 	bl	4488 <__aeabi_dmul>
    3da8:	460f      	mov	r7, r1
    3daa:	4606      	mov	r6, r0
			n = (uint8_t)(remainder);
    3dac:	f000 fe1c 	bl	49e8 <__aeabi_d2uiz>
			buf[count++] = '0' + n;
    3db0:	ab04      	add	r3, sp, #16
    3db2:	4423      	add	r3, r4
		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    3db4:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    3db6:	f100 0230 	add.w	r2, r0, #48	; 0x30
    3dba:	f803 2c10 	strb.w	r2, [r3, #-16]
			remainder -= n; 
    3dbe:	f000 fafd 	bl	43bc <__aeabi_i2d>
    3dc2:	4602      	mov	r2, r0
    3dc4:	460b      	mov	r3, r1
    3dc6:	4630      	mov	r0, r6
    3dc8:	4639      	mov	r1, r7
    3dca:	f000 f9a9 	bl	4120 <__aeabi_dsub>
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    3dce:	3401      	adds	r4, #1
    3dd0:	b2e4      	uxtb	r4, r4
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3dd2:	454c      	cmp	r4, r9
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
    3dd4:	4606      	mov	r6, r0
    3dd6:	460f      	mov	r7, r1
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    3dd8:	d1e0      	bne.n	3d9c <Print::printFloat(double, unsigned char)+0x104>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    3dda:	682b      	ldr	r3, [r5, #0]
    3ddc:	4622      	mov	r2, r4
    3dde:	685b      	ldr	r3, [r3, #4]
    3de0:	4628      	mov	r0, r5
    3de2:	4669      	mov	r1, sp
    3de4:	4798      	blx	r3
	}
	return count;
}
    3de6:	4640      	mov	r0, r8
    3de8:	b005      	add	sp, #20
    3dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3dee:	682b      	ldr	r3, [r5, #0]
    3df0:	4915      	ldr	r1, [pc, #84]	; (3e48 <Print::printFloat(double, unsigned char)+0x1b0>)
    3df2:	e777      	b.n	3ce4 <Print::printFloat(double, unsigned char)+0x4c>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    3df4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    3df8:	461f      	mov	r7, r3
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    3dfa:	f04f 0901 	mov.w	r9, #1
    3dfe:	e795      	b.n	3d2c <Print::printFloat(double, unsigned char)+0x94>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    3e00:	2200      	movs	r2, #0
    3e02:	4b0f      	ldr	r3, [pc, #60]	; (3e40 <Print::printFloat(double, unsigned char)+0x1a8>)
    3e04:	4630      	mov	r0, r6
    3e06:	4639      	mov	r1, r7
    3e08:	f000 f98c 	bl	4124 <__adddf3>
    3e0c:	f000 fdec 	bl	49e8 <__aeabi_d2uiz>
    3e10:	464b      	mov	r3, r9
    3e12:	4601      	mov	r1, r0
    3e14:	220a      	movs	r2, #10
    3e16:	4628      	mov	r0, r5
    3e18:	f7ff fefe 	bl	3c18 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e1c:	4680      	mov	r8, r0
    3e1e:	e766      	b.n	3cee <Print::printFloat(double, unsigned char)+0x56>
    3e20:	682b      	ldr	r3, [r5, #0]
    3e22:	490a      	ldr	r1, [pc, #40]	; (3e4c <Print::printFloat(double, unsigned char)+0x1b4>)
    3e24:	e75e      	b.n	3ce4 <Print::printFloat(double, unsigned char)+0x4c>
    3e26:	bf00      	nop
    3e28:	a0000000 	.word	0xa0000000
    3e2c:	3fb99999 	.word	0x3fb99999
    3e30:	7fefffff 	.word	0x7fefffff
    3e34:	00005c9c 	.word	0x00005c9c
    3e38:	41efffff 	.word	0x41efffff
    3e3c:	c1efffff 	.word	0xc1efffff
    3e40:	3fe00000 	.word	0x3fe00000
    3e44:	40240000 	.word	0x40240000
    3e48:	00005c98 	.word	0x00005c98
    3e4c:	00005c94 	.word	0x00005c94

00003e50 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3e50:	f7ff bd3e 	b.w	38d0 <usb_serial_flush_input>

00003e54 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3e54:	f7ff bd16 	b.w	3884 <usb_serial_peekchar>

00003e58 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3e58:	f7ff bcf0 	b.w	383c <usb_serial_getchar>

00003e5c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3e5c:	f7ff bd2a 	b.w	38b4 <usb_serial_available>

00003e60 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3e60:	f7ff be06 	b.w	3a70 <usb_serial_flush_output>

00003e64 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3e64:	f7ff bde0 	b.w	3a28 <usb_serial_write_buffer_free>

00003e68 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3e68:	4608      	mov	r0, r1
    3e6a:	4611      	mov	r1, r2
    3e6c:	f7ff bd4c 	b.w	3908 <usb_serial_write>

00003e70 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3e70:	4608      	mov	r0, r1
    3e72:	f7ff bdcd 	b.w	3a10 <usb_serial_putchar>
    3e76:	bf00      	nop

00003e78 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    3e7c:	4e31      	ldr	r6, [pc, #196]	; (3f44 <yield+0xcc>)
    3e7e:	7833      	ldrb	r3, [r6, #0]
    3e80:	b193      	cbz	r3, 3ea8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    3e82:	4f31      	ldr	r7, [pc, #196]	; (3f48 <yield+0xd0>)
    3e84:	783a      	ldrb	r2, [r7, #0]
    3e86:	b97a      	cbnz	r2, 3ea8 <yield+0x30>
	running = 1;
    3e88:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3e8a:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3e8c:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3e8e:	d436      	bmi.n	3efe <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    3e90:	079a      	lsls	r2, r3, #30
    3e92:	d419      	bmi.n	3ec8 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    3e94:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3e96:	075b      	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    3e98:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3e9a:	d505      	bpl.n	3ea8 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    3e9c:	4b2b      	ldr	r3, [pc, #172]	; (3f4c <yield+0xd4>)
    3e9e:	681a      	ldr	r2, [r3, #0]
    3ea0:	b112      	cbz	r2, 3ea8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3ea2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3ea6:	b10a      	cbz	r2, 3eac <yield+0x34>
    3ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3eac:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3eb0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3eb2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3eb4:	b118      	cbz	r0, 3ebe <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3eb6:	4c26      	ldr	r4, [pc, #152]	; (3f50 <yield+0xd8>)
    3eb8:	7822      	ldrb	r2, [r4, #0]
    3eba:	2a00      	cmp	r2, #0
    3ebc:	d02e      	beq.n	3f1c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3ebe:	2900      	cmp	r1, #0
    3ec0:	d1f2      	bne.n	3ea8 <yield+0x30>
    3ec2:	b662      	cpsie	i
    3ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3ec8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3f5c <yield+0xe4>
    3ecc:	f898 2000 	ldrb.w	r2, [r8]
    3ed0:	2a00      	cmp	r2, #0
    3ed2:	d0df      	beq.n	3e94 <yield+0x1c>
    3ed4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3f60 <yield+0xe8>
    3ed8:	2400      	movs	r4, #0
    3eda:	e005      	b.n	3ee8 <yield+0x70>
    3edc:	3401      	adds	r4, #1
    3ede:	f898 3000 	ldrb.w	r3, [r8]
    3ee2:	b2e4      	uxtb	r4, r4
    3ee4:	42a3      	cmp	r3, r4
    3ee6:	d912      	bls.n	3f0e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    3ee8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    3eec:	682b      	ldr	r3, [r5, #0]
    3eee:	4628      	mov	r0, r5
    3ef0:	691b      	ldr	r3, [r3, #16]
    3ef2:	4798      	blx	r3
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d0f1      	beq.n	3edc <yield+0x64>
    3ef8:	692b      	ldr	r3, [r5, #16]
    3efa:	4798      	blx	r3
    3efc:	e7ee      	b.n	3edc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3efe:	f7ff fcd9 	bl	38b4 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3f02:	b9c8      	cbnz	r0, 3f38 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3f04:	4b13      	ldr	r3, [pc, #76]	; (3f54 <yield+0xdc>)
    3f06:	781b      	ldrb	r3, [r3, #0]
    3f08:	b91b      	cbnz	r3, 3f12 <yield+0x9a>
    3f0a:	7833      	ldrb	r3, [r6, #0]
    3f0c:	e7c0      	b.n	3e90 <yield+0x18>
    3f0e:	7833      	ldrb	r3, [r6, #0]
    3f10:	e7c0      	b.n	3e94 <yield+0x1c>
    3f12:	7833      	ldrb	r3, [r6, #0]
    3f14:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3f18:	7033      	strb	r3, [r6, #0]
    3f1a:	e7b9      	b.n	3e90 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    3f1c:	6945      	ldr	r5, [r0, #20]
    3f1e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3f20:	2301      	movs	r3, #1
    3f22:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    3f24:	b15d      	cbz	r5, 3f3e <yield+0xc6>
			firstYield->_prev = nullptr;
    3f26:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3f28:	b901      	cbnz	r1, 3f2c <yield+0xb4>
    3f2a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3f2c:	2500      	movs	r5, #0
    3f2e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    3f30:	6883      	ldr	r3, [r0, #8]
    3f32:	4798      	blx	r3
		runningFromYield = false;
    3f34:	7025      	strb	r5, [r4, #0]
    3f36:	e7b7      	b.n	3ea8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3f38:	f000 f8ec 	bl	4114 <serialEvent()>
    3f3c:	e7e2      	b.n	3f04 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3f3e:	4b06      	ldr	r3, [pc, #24]	; (3f58 <yield+0xe0>)
    3f40:	601d      	str	r5, [r3, #0]
    3f42:	e7f1      	b.n	3f28 <yield+0xb0>
    3f44:	1fff08cc 	.word	0x1fff08cc
    3f48:	1fff1521 	.word	0x1fff1521
    3f4c:	1fff151c 	.word	0x1fff151c
    3f50:	1fff1520 	.word	0x1fff1520
    3f54:	1fff0972 	.word	0x1fff0972
    3f58:	1fff1518 	.word	0x1fff1518
    3f5c:	1fff153c 	.word	0x1fff153c
    3f60:	1fff1524 	.word	0x1fff1524

00003f64 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    3f64:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3f66:	4829      	ldr	r0, [pc, #164]	; (400c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3f68:	4a29      	ldr	r2, [pc, #164]	; (4010 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    3f6a:	4b2a      	ldr	r3, [pc, #168]	; (4014 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3f6c:	4d2a      	ldr	r5, [pc, #168]	; (4018 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3f6e:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3f70:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3f72:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3f74:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    3f76:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3f78:	4c28      	ldr	r4, [pc, #160]	; (401c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    3f7a:	2b08      	cmp	r3, #8
    3f7c:	d030      	beq.n	3fe0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    3f7e:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3f80:	4827      	ldr	r0, [pc, #156]	; (4020 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3f82:	4928      	ldr	r1, [pc, #160]	; (4024 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    3f84:	d037      	beq.n	3ff6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    3f86:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    3f88:	bf0c      	ite	eq
    3f8a:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    3f8c:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    3f8e:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    3f90:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    3f92:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    3f94:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    3f96:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    3f98:	4b23      	ldr	r3, [pc, #140]	; (4028 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3f9a:	4924      	ldr	r1, [pc, #144]	; (402c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    3f9c:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3f9e:	4a24      	ldr	r2, [pc, #144]	; (4030 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    3fa0:	b1bb      	cbz	r3, 3fd2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3fa2:	2301      	movs	r3, #1
    3fa4:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3fa6:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    3fa8:	4b22      	ldr	r3, [pc, #136]	; (4034 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    3faa:	4923      	ldr	r1, [pc, #140]	; (4038 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    3fac:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    3fae:	4a23      	ldr	r2, [pc, #140]	; (403c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    3fb0:	2b01      	cmp	r3, #1
    3fb2:	d926      	bls.n	4002 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    3fb4:	2b04      	cmp	r3, #4
    3fb6:	d90f      	bls.n	3fd8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    3fb8:	2b08      	cmp	r3, #8
    3fba:	d91e      	bls.n	3ffa <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    3fbc:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    3fbe:	bf94      	ite	ls
    3fc0:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    3fc2:	2387      	movhi	r3, #135	; 0x87
    3fc4:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    3fc6:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    3fc8:	4b1d      	ldr	r3, [pc, #116]	; (4040 <analog_init+0xdc>)
    3fca:	2201      	movs	r2, #1
    3fcc:	701a      	strb	r2, [r3, #0]
}
    3fce:	bc30      	pop	{r4, r5}
    3fd0:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    3fd2:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    3fd4:	6013      	str	r3, [r2, #0]
    3fd6:	e7e7      	b.n	3fa8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    3fd8:	2384      	movs	r3, #132	; 0x84
    3fda:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    3fdc:	6013      	str	r3, [r2, #0]
    3fde:	e7f3      	b.n	3fc8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3fe0:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3fe4:	490f      	ldr	r1, [pc, #60]	; (4024 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3fe6:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3fe8:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3fea:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3fec:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3fee:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3ff0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3ff2:	600b      	str	r3, [r1, #0]
    3ff4:	e7d0      	b.n	3f98 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3ff6:	2239      	movs	r2, #57	; 0x39
    3ff8:	e7f7      	b.n	3fea <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    3ffa:	2385      	movs	r3, #133	; 0x85
    3ffc:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    3ffe:	6013      	str	r3, [r2, #0]
    4000:	e7e2      	b.n	3fc8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4002:	2380      	movs	r3, #128	; 0x80
    4004:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4006:	6013      	str	r3, [r2, #0]
    4008:	e7de      	b.n	3fc8 <analog_init+0x64>
    400a:	bf00      	nop
    400c:	40074000 	.word	0x40074000
    4010:	40074001 	.word	0x40074001
    4014:	1fff08cd 	.word	0x1fff08cd
    4018:	4003b008 	.word	0x4003b008
    401c:	4003b00c 	.word	0x4003b00c
    4020:	400bb008 	.word	0x400bb008
    4024:	400bb00c 	.word	0x400bb00c
    4028:	1fff1523 	.word	0x1fff1523
    402c:	4003b020 	.word	0x4003b020
    4030:	400bb020 	.word	0x400bb020
    4034:	1fff08ce 	.word	0x1fff08ce
    4038:	4003b024 	.word	0x4003b024
    403c:	400bb024 	.word	0x400bb024
    4040:	1fff1522 	.word	0x1fff1522

00004044 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4044:	b4f0      	push	{r4, r5, r6, r7}
    4046:	1e4d      	subs	r5, r1, #1
    4048:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    404a:	2400      	movs	r4, #0
    404c:	e000      	b.n	4050 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    404e:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4050:	fbb0 f3f2 	udiv	r3, r0, r2
    4054:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4058:	2809      	cmp	r0, #9
    405a:	f100 0730 	add.w	r7, r0, #48	; 0x30
    405e:	bf8a      	itet	hi
    4060:	3037      	addhi	r0, #55	; 0x37
    4062:	b2f8      	uxtbls	r0, r7
    4064:	b2c0      	uxtbhi	r0, r0
    4066:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    406a:	4618      	mov	r0, r3
    406c:	2b00      	cmp	r3, #0
    406e:	d1ee      	bne.n	404e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4070:	190a      	adds	r2, r1, r4
    4072:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4074:	b14c      	cbz	r4, 408a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4076:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4078:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    407c:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    407e:	3301      	adds	r3, #1
    4080:	1ae0      	subs	r0, r4, r3
    4082:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4084:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4088:	dbf5      	blt.n	4076 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    408a:	4608      	mov	r0, r1
    408c:	bcf0      	pop	{r4, r5, r6, r7}
    408e:	4770      	bx	lr

00004090 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4090:	b510      	push	{r4, lr}
    4092:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4094:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    4096:	f7fe fb27 	bl	26e8 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    409a:	4a18      	ldr	r2, [pc, #96]	; (40fc <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    409c:	4b18      	ldr	r3, [pc, #96]	; (4100 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    409e:	4919      	ldr	r1, [pc, #100]	; (4104 <usb_init_serialnumber+0x74>)
    40a0:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40a2:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40a4:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    40a6:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40a8:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    40aa:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    40ac:	7813      	ldrb	r3, [r2, #0]
    40ae:	061b      	lsls	r3, r3, #24
    40b0:	d5fc      	bpl.n	40ac <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    40b2:	4b15      	ldr	r3, [pc, #84]	; (4108 <usb_init_serialnumber+0x78>)
    40b4:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    40b6:	f7fe fb31 	bl	271c <kinetis_hsrun_enable>
#endif
	__enable_irq();
    40ba:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    40bc:	4b13      	ldr	r3, [pc, #76]	; (410c <usb_init_serialnumber+0x7c>)
    40be:	429c      	cmp	r4, r3
    40c0:	bf9c      	itt	ls
    40c2:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
    40c6:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    40c8:	4620      	mov	r0, r4
    40ca:	4c11      	ldr	r4, [pc, #68]	; (4110 <usb_init_serialnumber+0x80>)
    40cc:	a901      	add	r1, sp, #4
    40ce:	220a      	movs	r2, #10
    40d0:	f7ff ffb8 	bl	4044 <ultoa>
    40d4:	a901      	add	r1, sp, #4
    40d6:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    40d8:	2300      	movs	r3, #0
		char c = buf[i];
    40da:	f811 2b01 	ldrb.w	r2, [r1], #1
    40de:	3301      	adds	r3, #1
		if (!c) break;
    40e0:	b13a      	cbz	r2, 40f2 <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40e2:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    40e4:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    40e8:	d1f7      	bne.n	40da <usb_init_serialnumber+0x4a>
    40ea:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    40ec:	7023      	strb	r3, [r4, #0]
}
    40ee:	b004      	add	sp, #16
    40f0:	bd10      	pop	{r4, pc}
    40f2:	005b      	lsls	r3, r3, #1
    40f4:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    40f6:	7023      	strb	r3, [r4, #0]
}
    40f8:	b004      	add	sp, #16
    40fa:	bd10      	pop	{r4, pc}
    40fc:	40020004 	.word	0x40020004
    4100:	40020000 	.word	0x40020000
    4104:	41070000 	.word	0x41070000
    4108:	4002000c 	.word	0x4002000c
    410c:	0098967f 	.word	0x0098967f
    4110:	1fff095c 	.word	0x1fff095c

00004114 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    4114:	4770      	bx	lr
    4116:	bf00      	nop

00004118 <__aeabi_drsub>:
    4118:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    411c:	e002      	b.n	4124 <__adddf3>
    411e:	bf00      	nop

00004120 <__aeabi_dsub>:
    4120:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004124 <__adddf3>:
    4124:	b530      	push	{r4, r5, lr}
    4126:	ea4f 0441 	mov.w	r4, r1, lsl #1
    412a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    412e:	ea94 0f05 	teq	r4, r5
    4132:	bf08      	it	eq
    4134:	ea90 0f02 	teqeq	r0, r2
    4138:	bf1f      	itttt	ne
    413a:	ea54 0c00 	orrsne.w	ip, r4, r0
    413e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4142:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4146:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    414a:	f000 80e2 	beq.w	4312 <__adddf3+0x1ee>
    414e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4152:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4156:	bfb8      	it	lt
    4158:	426d      	neglt	r5, r5
    415a:	dd0c      	ble.n	4176 <__adddf3+0x52>
    415c:	442c      	add	r4, r5
    415e:	ea80 0202 	eor.w	r2, r0, r2
    4162:	ea81 0303 	eor.w	r3, r1, r3
    4166:	ea82 0000 	eor.w	r0, r2, r0
    416a:	ea83 0101 	eor.w	r1, r3, r1
    416e:	ea80 0202 	eor.w	r2, r0, r2
    4172:	ea81 0303 	eor.w	r3, r1, r3
    4176:	2d36      	cmp	r5, #54	; 0x36
    4178:	bf88      	it	hi
    417a:	bd30      	pophi	{r4, r5, pc}
    417c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4180:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4184:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4188:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    418c:	d002      	beq.n	4194 <__adddf3+0x70>
    418e:	4240      	negs	r0, r0
    4190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4194:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4198:	ea4f 3303 	mov.w	r3, r3, lsl #12
    419c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    41a0:	d002      	beq.n	41a8 <__adddf3+0x84>
    41a2:	4252      	negs	r2, r2
    41a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    41a8:	ea94 0f05 	teq	r4, r5
    41ac:	f000 80a7 	beq.w	42fe <__adddf3+0x1da>
    41b0:	f1a4 0401 	sub.w	r4, r4, #1
    41b4:	f1d5 0e20 	rsbs	lr, r5, #32
    41b8:	db0d      	blt.n	41d6 <__adddf3+0xb2>
    41ba:	fa02 fc0e 	lsl.w	ip, r2, lr
    41be:	fa22 f205 	lsr.w	r2, r2, r5
    41c2:	1880      	adds	r0, r0, r2
    41c4:	f141 0100 	adc.w	r1, r1, #0
    41c8:	fa03 f20e 	lsl.w	r2, r3, lr
    41cc:	1880      	adds	r0, r0, r2
    41ce:	fa43 f305 	asr.w	r3, r3, r5
    41d2:	4159      	adcs	r1, r3
    41d4:	e00e      	b.n	41f4 <__adddf3+0xd0>
    41d6:	f1a5 0520 	sub.w	r5, r5, #32
    41da:	f10e 0e20 	add.w	lr, lr, #32
    41de:	2a01      	cmp	r2, #1
    41e0:	fa03 fc0e 	lsl.w	ip, r3, lr
    41e4:	bf28      	it	cs
    41e6:	f04c 0c02 	orrcs.w	ip, ip, #2
    41ea:	fa43 f305 	asr.w	r3, r3, r5
    41ee:	18c0      	adds	r0, r0, r3
    41f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    41f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    41f8:	d507      	bpl.n	420a <__adddf3+0xe6>
    41fa:	f04f 0e00 	mov.w	lr, #0
    41fe:	f1dc 0c00 	rsbs	ip, ip, #0
    4202:	eb7e 0000 	sbcs.w	r0, lr, r0
    4206:	eb6e 0101 	sbc.w	r1, lr, r1
    420a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    420e:	d31b      	bcc.n	4248 <__adddf3+0x124>
    4210:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4214:	d30c      	bcc.n	4230 <__adddf3+0x10c>
    4216:	0849      	lsrs	r1, r1, #1
    4218:	ea5f 0030 	movs.w	r0, r0, rrx
    421c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4220:	f104 0401 	add.w	r4, r4, #1
    4224:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4228:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    422c:	f080 809a 	bcs.w	4364 <__adddf3+0x240>
    4230:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4234:	bf08      	it	eq
    4236:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    423a:	f150 0000 	adcs.w	r0, r0, #0
    423e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4242:	ea41 0105 	orr.w	r1, r1, r5
    4246:	bd30      	pop	{r4, r5, pc}
    4248:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    424c:	4140      	adcs	r0, r0
    424e:	eb41 0101 	adc.w	r1, r1, r1
    4252:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4256:	f1a4 0401 	sub.w	r4, r4, #1
    425a:	d1e9      	bne.n	4230 <__adddf3+0x10c>
    425c:	f091 0f00 	teq	r1, #0
    4260:	bf04      	itt	eq
    4262:	4601      	moveq	r1, r0
    4264:	2000      	moveq	r0, #0
    4266:	fab1 f381 	clz	r3, r1
    426a:	bf08      	it	eq
    426c:	3320      	addeq	r3, #32
    426e:	f1a3 030b 	sub.w	r3, r3, #11
    4272:	f1b3 0220 	subs.w	r2, r3, #32
    4276:	da0c      	bge.n	4292 <__adddf3+0x16e>
    4278:	320c      	adds	r2, #12
    427a:	dd08      	ble.n	428e <__adddf3+0x16a>
    427c:	f102 0c14 	add.w	ip, r2, #20
    4280:	f1c2 020c 	rsb	r2, r2, #12
    4284:	fa01 f00c 	lsl.w	r0, r1, ip
    4288:	fa21 f102 	lsr.w	r1, r1, r2
    428c:	e00c      	b.n	42a8 <__adddf3+0x184>
    428e:	f102 0214 	add.w	r2, r2, #20
    4292:	bfd8      	it	le
    4294:	f1c2 0c20 	rsble	ip, r2, #32
    4298:	fa01 f102 	lsl.w	r1, r1, r2
    429c:	fa20 fc0c 	lsr.w	ip, r0, ip
    42a0:	bfdc      	itt	le
    42a2:	ea41 010c 	orrle.w	r1, r1, ip
    42a6:	4090      	lslle	r0, r2
    42a8:	1ae4      	subs	r4, r4, r3
    42aa:	bfa2      	ittt	ge
    42ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    42b0:	4329      	orrge	r1, r5
    42b2:	bd30      	popge	{r4, r5, pc}
    42b4:	ea6f 0404 	mvn.w	r4, r4
    42b8:	3c1f      	subs	r4, #31
    42ba:	da1c      	bge.n	42f6 <__adddf3+0x1d2>
    42bc:	340c      	adds	r4, #12
    42be:	dc0e      	bgt.n	42de <__adddf3+0x1ba>
    42c0:	f104 0414 	add.w	r4, r4, #20
    42c4:	f1c4 0220 	rsb	r2, r4, #32
    42c8:	fa20 f004 	lsr.w	r0, r0, r4
    42cc:	fa01 f302 	lsl.w	r3, r1, r2
    42d0:	ea40 0003 	orr.w	r0, r0, r3
    42d4:	fa21 f304 	lsr.w	r3, r1, r4
    42d8:	ea45 0103 	orr.w	r1, r5, r3
    42dc:	bd30      	pop	{r4, r5, pc}
    42de:	f1c4 040c 	rsb	r4, r4, #12
    42e2:	f1c4 0220 	rsb	r2, r4, #32
    42e6:	fa20 f002 	lsr.w	r0, r0, r2
    42ea:	fa01 f304 	lsl.w	r3, r1, r4
    42ee:	ea40 0003 	orr.w	r0, r0, r3
    42f2:	4629      	mov	r1, r5
    42f4:	bd30      	pop	{r4, r5, pc}
    42f6:	fa21 f004 	lsr.w	r0, r1, r4
    42fa:	4629      	mov	r1, r5
    42fc:	bd30      	pop	{r4, r5, pc}
    42fe:	f094 0f00 	teq	r4, #0
    4302:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4306:	bf06      	itte	eq
    4308:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    430c:	3401      	addeq	r4, #1
    430e:	3d01      	subne	r5, #1
    4310:	e74e      	b.n	41b0 <__adddf3+0x8c>
    4312:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4316:	bf18      	it	ne
    4318:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    431c:	d029      	beq.n	4372 <__adddf3+0x24e>
    431e:	ea94 0f05 	teq	r4, r5
    4322:	bf08      	it	eq
    4324:	ea90 0f02 	teqeq	r0, r2
    4328:	d005      	beq.n	4336 <__adddf3+0x212>
    432a:	ea54 0c00 	orrs.w	ip, r4, r0
    432e:	bf04      	itt	eq
    4330:	4619      	moveq	r1, r3
    4332:	4610      	moveq	r0, r2
    4334:	bd30      	pop	{r4, r5, pc}
    4336:	ea91 0f03 	teq	r1, r3
    433a:	bf1e      	ittt	ne
    433c:	2100      	movne	r1, #0
    433e:	2000      	movne	r0, #0
    4340:	bd30      	popne	{r4, r5, pc}
    4342:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4346:	d105      	bne.n	4354 <__adddf3+0x230>
    4348:	0040      	lsls	r0, r0, #1
    434a:	4149      	adcs	r1, r1
    434c:	bf28      	it	cs
    434e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4352:	bd30      	pop	{r4, r5, pc}
    4354:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4358:	bf3c      	itt	cc
    435a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    435e:	bd30      	popcc	{r4, r5, pc}
    4360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4364:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4368:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    436c:	f04f 0000 	mov.w	r0, #0
    4370:	bd30      	pop	{r4, r5, pc}
    4372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4376:	bf1a      	itte	ne
    4378:	4619      	movne	r1, r3
    437a:	4610      	movne	r0, r2
    437c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4380:	bf1c      	itt	ne
    4382:	460b      	movne	r3, r1
    4384:	4602      	movne	r2, r0
    4386:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    438a:	bf06      	itte	eq
    438c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4390:	ea91 0f03 	teqeq	r1, r3
    4394:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4398:	bd30      	pop	{r4, r5, pc}
    439a:	bf00      	nop

0000439c <__aeabi_ui2d>:
    439c:	f090 0f00 	teq	r0, #0
    43a0:	bf04      	itt	eq
    43a2:	2100      	moveq	r1, #0
    43a4:	4770      	bxeq	lr
    43a6:	b530      	push	{r4, r5, lr}
    43a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    43ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
    43b0:	f04f 0500 	mov.w	r5, #0
    43b4:	f04f 0100 	mov.w	r1, #0
    43b8:	e750      	b.n	425c <__adddf3+0x138>
    43ba:	bf00      	nop

000043bc <__aeabi_i2d>:
    43bc:	f090 0f00 	teq	r0, #0
    43c0:	bf04      	itt	eq
    43c2:	2100      	moveq	r1, #0
    43c4:	4770      	bxeq	lr
    43c6:	b530      	push	{r4, r5, lr}
    43c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    43cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    43d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    43d4:	bf48      	it	mi
    43d6:	4240      	negmi	r0, r0
    43d8:	f04f 0100 	mov.w	r1, #0
    43dc:	e73e      	b.n	425c <__adddf3+0x138>
    43de:	bf00      	nop

000043e0 <__aeabi_f2d>:
    43e0:	0042      	lsls	r2, r0, #1
    43e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    43e6:	ea4f 0131 	mov.w	r1, r1, rrx
    43ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
    43ee:	bf1f      	itttt	ne
    43f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    43f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    43f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    43fc:	4770      	bxne	lr
    43fe:	f092 0f00 	teq	r2, #0
    4402:	bf14      	ite	ne
    4404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4408:	4770      	bxeq	lr
    440a:	b530      	push	{r4, r5, lr}
    440c:	f44f 7460 	mov.w	r4, #896	; 0x380
    4410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4418:	e720      	b.n	425c <__adddf3+0x138>
    441a:	bf00      	nop

0000441c <__aeabi_ul2d>:
    441c:	ea50 0201 	orrs.w	r2, r0, r1
    4420:	bf08      	it	eq
    4422:	4770      	bxeq	lr
    4424:	b530      	push	{r4, r5, lr}
    4426:	f04f 0500 	mov.w	r5, #0
    442a:	e00a      	b.n	4442 <__aeabi_l2d+0x16>

0000442c <__aeabi_l2d>:
    442c:	ea50 0201 	orrs.w	r2, r0, r1
    4430:	bf08      	it	eq
    4432:	4770      	bxeq	lr
    4434:	b530      	push	{r4, r5, lr}
    4436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    443a:	d502      	bpl.n	4442 <__aeabi_l2d+0x16>
    443c:	4240      	negs	r0, r0
    443e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4442:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4446:	f104 0432 	add.w	r4, r4, #50	; 0x32
    444a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    444e:	f43f aedc 	beq.w	420a <__adddf3+0xe6>
    4452:	f04f 0203 	mov.w	r2, #3
    4456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    445a:	bf18      	it	ne
    445c:	3203      	addne	r2, #3
    445e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4462:	bf18      	it	ne
    4464:	3203      	addne	r2, #3
    4466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    446a:	f1c2 0320 	rsb	r3, r2, #32
    446e:	fa00 fc03 	lsl.w	ip, r0, r3
    4472:	fa20 f002 	lsr.w	r0, r0, r2
    4476:	fa01 fe03 	lsl.w	lr, r1, r3
    447a:	ea40 000e 	orr.w	r0, r0, lr
    447e:	fa21 f102 	lsr.w	r1, r1, r2
    4482:	4414      	add	r4, r2
    4484:	e6c1      	b.n	420a <__adddf3+0xe6>
    4486:	bf00      	nop

00004488 <__aeabi_dmul>:
    4488:	b570      	push	{r4, r5, r6, lr}
    448a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    448e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4496:	bf1d      	ittte	ne
    4498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    449c:	ea94 0f0c 	teqne	r4, ip
    44a0:	ea95 0f0c 	teqne	r5, ip
    44a4:	f000 f8de 	bleq	4664 <__aeabi_dmul+0x1dc>
    44a8:	442c      	add	r4, r5
    44aa:	ea81 0603 	eor.w	r6, r1, r3
    44ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    44b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    44b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    44ba:	bf18      	it	ne
    44bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    44c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    44c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    44c8:	d038      	beq.n	453c <__aeabi_dmul+0xb4>
    44ca:	fba0 ce02 	umull	ip, lr, r0, r2
    44ce:	f04f 0500 	mov.w	r5, #0
    44d2:	fbe1 e502 	umlal	lr, r5, r1, r2
    44d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    44da:	fbe0 e503 	umlal	lr, r5, r0, r3
    44de:	f04f 0600 	mov.w	r6, #0
    44e2:	fbe1 5603 	umlal	r5, r6, r1, r3
    44e6:	f09c 0f00 	teq	ip, #0
    44ea:	bf18      	it	ne
    44ec:	f04e 0e01 	orrne.w	lr, lr, #1
    44f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    44f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    44f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    44fc:	d204      	bcs.n	4508 <__aeabi_dmul+0x80>
    44fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4502:	416d      	adcs	r5, r5
    4504:	eb46 0606 	adc.w	r6, r6, r6
    4508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    450c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    451c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4520:	bf88      	it	hi
    4522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4526:	d81e      	bhi.n	4566 <__aeabi_dmul+0xde>
    4528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    452c:	bf08      	it	eq
    452e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4532:	f150 0000 	adcs.w	r0, r0, #0
    4536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    453a:	bd70      	pop	{r4, r5, r6, pc}
    453c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4540:	ea46 0101 	orr.w	r1, r6, r1
    4544:	ea40 0002 	orr.w	r0, r0, r2
    4548:	ea81 0103 	eor.w	r1, r1, r3
    454c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4550:	bfc2      	ittt	gt
    4552:	ebd4 050c 	rsbsgt	r5, r4, ip
    4556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    455a:	bd70      	popgt	{r4, r5, r6, pc}
    455c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4560:	f04f 0e00 	mov.w	lr, #0
    4564:	3c01      	subs	r4, #1
    4566:	f300 80ab 	bgt.w	46c0 <__aeabi_dmul+0x238>
    456a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    456e:	bfde      	ittt	le
    4570:	2000      	movle	r0, #0
    4572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4576:	bd70      	pople	{r4, r5, r6, pc}
    4578:	f1c4 0400 	rsb	r4, r4, #0
    457c:	3c20      	subs	r4, #32
    457e:	da35      	bge.n	45ec <__aeabi_dmul+0x164>
    4580:	340c      	adds	r4, #12
    4582:	dc1b      	bgt.n	45bc <__aeabi_dmul+0x134>
    4584:	f104 0414 	add.w	r4, r4, #20
    4588:	f1c4 0520 	rsb	r5, r4, #32
    458c:	fa00 f305 	lsl.w	r3, r0, r5
    4590:	fa20 f004 	lsr.w	r0, r0, r4
    4594:	fa01 f205 	lsl.w	r2, r1, r5
    4598:	ea40 0002 	orr.w	r0, r0, r2
    459c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    45a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    45a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    45a8:	fa21 f604 	lsr.w	r6, r1, r4
    45ac:	eb42 0106 	adc.w	r1, r2, r6
    45b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    45b4:	bf08      	it	eq
    45b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    45ba:	bd70      	pop	{r4, r5, r6, pc}
    45bc:	f1c4 040c 	rsb	r4, r4, #12
    45c0:	f1c4 0520 	rsb	r5, r4, #32
    45c4:	fa00 f304 	lsl.w	r3, r0, r4
    45c8:	fa20 f005 	lsr.w	r0, r0, r5
    45cc:	fa01 f204 	lsl.w	r2, r1, r4
    45d0:	ea40 0002 	orr.w	r0, r0, r2
    45d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    45d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    45dc:	f141 0100 	adc.w	r1, r1, #0
    45e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    45e4:	bf08      	it	eq
    45e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    45ea:	bd70      	pop	{r4, r5, r6, pc}
    45ec:	f1c4 0520 	rsb	r5, r4, #32
    45f0:	fa00 f205 	lsl.w	r2, r0, r5
    45f4:	ea4e 0e02 	orr.w	lr, lr, r2
    45f8:	fa20 f304 	lsr.w	r3, r0, r4
    45fc:	fa01 f205 	lsl.w	r2, r1, r5
    4600:	ea43 0302 	orr.w	r3, r3, r2
    4604:	fa21 f004 	lsr.w	r0, r1, r4
    4608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    460c:	fa21 f204 	lsr.w	r2, r1, r4
    4610:	ea20 0002 	bic.w	r0, r0, r2
    4614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    461c:	bf08      	it	eq
    461e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4622:	bd70      	pop	{r4, r5, r6, pc}
    4624:	f094 0f00 	teq	r4, #0
    4628:	d10f      	bne.n	464a <__aeabi_dmul+0x1c2>
    462a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    462e:	0040      	lsls	r0, r0, #1
    4630:	eb41 0101 	adc.w	r1, r1, r1
    4634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4638:	bf08      	it	eq
    463a:	3c01      	subeq	r4, #1
    463c:	d0f7      	beq.n	462e <__aeabi_dmul+0x1a6>
    463e:	ea41 0106 	orr.w	r1, r1, r6
    4642:	f095 0f00 	teq	r5, #0
    4646:	bf18      	it	ne
    4648:	4770      	bxne	lr
    464a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    464e:	0052      	lsls	r2, r2, #1
    4650:	eb43 0303 	adc.w	r3, r3, r3
    4654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4658:	bf08      	it	eq
    465a:	3d01      	subeq	r5, #1
    465c:	d0f7      	beq.n	464e <__aeabi_dmul+0x1c6>
    465e:	ea43 0306 	orr.w	r3, r3, r6
    4662:	4770      	bx	lr
    4664:	ea94 0f0c 	teq	r4, ip
    4668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    466c:	bf18      	it	ne
    466e:	ea95 0f0c 	teqne	r5, ip
    4672:	d00c      	beq.n	468e <__aeabi_dmul+0x206>
    4674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4678:	bf18      	it	ne
    467a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    467e:	d1d1      	bne.n	4624 <__aeabi_dmul+0x19c>
    4680:	ea81 0103 	eor.w	r1, r1, r3
    4684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4688:	f04f 0000 	mov.w	r0, #0
    468c:	bd70      	pop	{r4, r5, r6, pc}
    468e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4692:	bf06      	itte	eq
    4694:	4610      	moveq	r0, r2
    4696:	4619      	moveq	r1, r3
    4698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    469c:	d019      	beq.n	46d2 <__aeabi_dmul+0x24a>
    469e:	ea94 0f0c 	teq	r4, ip
    46a2:	d102      	bne.n	46aa <__aeabi_dmul+0x222>
    46a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    46a8:	d113      	bne.n	46d2 <__aeabi_dmul+0x24a>
    46aa:	ea95 0f0c 	teq	r5, ip
    46ae:	d105      	bne.n	46bc <__aeabi_dmul+0x234>
    46b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    46b4:	bf1c      	itt	ne
    46b6:	4610      	movne	r0, r2
    46b8:	4619      	movne	r1, r3
    46ba:	d10a      	bne.n	46d2 <__aeabi_dmul+0x24a>
    46bc:	ea81 0103 	eor.w	r1, r1, r3
    46c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    46c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    46c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    46cc:	f04f 0000 	mov.w	r0, #0
    46d0:	bd70      	pop	{r4, r5, r6, pc}
    46d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    46d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    46da:	bd70      	pop	{r4, r5, r6, pc}

000046dc <__aeabi_ddiv>:
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	f04f 0cff 	mov.w	ip, #255	; 0xff
    46e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    46e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    46ea:	bf1d      	ittte	ne
    46ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    46f0:	ea94 0f0c 	teqne	r4, ip
    46f4:	ea95 0f0c 	teqne	r5, ip
    46f8:	f000 f8a7 	bleq	484a <__aeabi_ddiv+0x16e>
    46fc:	eba4 0405 	sub.w	r4, r4, r5
    4700:	ea81 0e03 	eor.w	lr, r1, r3
    4704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4708:	ea4f 3101 	mov.w	r1, r1, lsl #12
    470c:	f000 8088 	beq.w	4820 <__aeabi_ddiv+0x144>
    4710:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    471c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4720:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    472c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4734:	429d      	cmp	r5, r3
    4736:	bf08      	it	eq
    4738:	4296      	cmpeq	r6, r2
    473a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    473e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4742:	d202      	bcs.n	474a <__aeabi_ddiv+0x6e>
    4744:	085b      	lsrs	r3, r3, #1
    4746:	ea4f 0232 	mov.w	r2, r2, rrx
    474a:	1ab6      	subs	r6, r6, r2
    474c:	eb65 0503 	sbc.w	r5, r5, r3
    4750:	085b      	lsrs	r3, r3, #1
    4752:	ea4f 0232 	mov.w	r2, r2, rrx
    4756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    475a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    475e:	ebb6 0e02 	subs.w	lr, r6, r2
    4762:	eb75 0e03 	sbcs.w	lr, r5, r3
    4766:	bf22      	ittt	cs
    4768:	1ab6      	subcs	r6, r6, r2
    476a:	4675      	movcs	r5, lr
    476c:	ea40 000c 	orrcs.w	r0, r0, ip
    4770:	085b      	lsrs	r3, r3, #1
    4772:	ea4f 0232 	mov.w	r2, r2, rrx
    4776:	ebb6 0e02 	subs.w	lr, r6, r2
    477a:	eb75 0e03 	sbcs.w	lr, r5, r3
    477e:	bf22      	ittt	cs
    4780:	1ab6      	subcs	r6, r6, r2
    4782:	4675      	movcs	r5, lr
    4784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4788:	085b      	lsrs	r3, r3, #1
    478a:	ea4f 0232 	mov.w	r2, r2, rrx
    478e:	ebb6 0e02 	subs.w	lr, r6, r2
    4792:	eb75 0e03 	sbcs.w	lr, r5, r3
    4796:	bf22      	ittt	cs
    4798:	1ab6      	subcs	r6, r6, r2
    479a:	4675      	movcs	r5, lr
    479c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    47a0:	085b      	lsrs	r3, r3, #1
    47a2:	ea4f 0232 	mov.w	r2, r2, rrx
    47a6:	ebb6 0e02 	subs.w	lr, r6, r2
    47aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    47ae:	bf22      	ittt	cs
    47b0:	1ab6      	subcs	r6, r6, r2
    47b2:	4675      	movcs	r5, lr
    47b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    47b8:	ea55 0e06 	orrs.w	lr, r5, r6
    47bc:	d018      	beq.n	47f0 <__aeabi_ddiv+0x114>
    47be:	ea4f 1505 	mov.w	r5, r5, lsl #4
    47c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    47c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    47ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    47ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    47d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    47d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    47da:	d1c0      	bne.n	475e <__aeabi_ddiv+0x82>
    47dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    47e0:	d10b      	bne.n	47fa <__aeabi_ddiv+0x11e>
    47e2:	ea41 0100 	orr.w	r1, r1, r0
    47e6:	f04f 0000 	mov.w	r0, #0
    47ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    47ee:	e7b6      	b.n	475e <__aeabi_ddiv+0x82>
    47f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    47f4:	bf04      	itt	eq
    47f6:	4301      	orreq	r1, r0
    47f8:	2000      	moveq	r0, #0
    47fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    47fe:	bf88      	it	hi
    4800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4804:	f63f aeaf 	bhi.w	4566 <__aeabi_dmul+0xde>
    4808:	ebb5 0c03 	subs.w	ip, r5, r3
    480c:	bf04      	itt	eq
    480e:	ebb6 0c02 	subseq.w	ip, r6, r2
    4812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4816:	f150 0000 	adcs.w	r0, r0, #0
    481a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    481e:	bd70      	pop	{r4, r5, r6, pc}
    4820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    482c:	bfc2      	ittt	gt
    482e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4836:	bd70      	popgt	{r4, r5, r6, pc}
    4838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    483c:	f04f 0e00 	mov.w	lr, #0
    4840:	3c01      	subs	r4, #1
    4842:	e690      	b.n	4566 <__aeabi_dmul+0xde>
    4844:	ea45 0e06 	orr.w	lr, r5, r6
    4848:	e68d      	b.n	4566 <__aeabi_dmul+0xde>
    484a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    484e:	ea94 0f0c 	teq	r4, ip
    4852:	bf08      	it	eq
    4854:	ea95 0f0c 	teqeq	r5, ip
    4858:	f43f af3b 	beq.w	46d2 <__aeabi_dmul+0x24a>
    485c:	ea94 0f0c 	teq	r4, ip
    4860:	d10a      	bne.n	4878 <__aeabi_ddiv+0x19c>
    4862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4866:	f47f af34 	bne.w	46d2 <__aeabi_dmul+0x24a>
    486a:	ea95 0f0c 	teq	r5, ip
    486e:	f47f af25 	bne.w	46bc <__aeabi_dmul+0x234>
    4872:	4610      	mov	r0, r2
    4874:	4619      	mov	r1, r3
    4876:	e72c      	b.n	46d2 <__aeabi_dmul+0x24a>
    4878:	ea95 0f0c 	teq	r5, ip
    487c:	d106      	bne.n	488c <__aeabi_ddiv+0x1b0>
    487e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4882:	f43f aefd 	beq.w	4680 <__aeabi_dmul+0x1f8>
    4886:	4610      	mov	r0, r2
    4888:	4619      	mov	r1, r3
    488a:	e722      	b.n	46d2 <__aeabi_dmul+0x24a>
    488c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4890:	bf18      	it	ne
    4892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4896:	f47f aec5 	bne.w	4624 <__aeabi_dmul+0x19c>
    489a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    489e:	f47f af0d 	bne.w	46bc <__aeabi_dmul+0x234>
    48a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    48a6:	f47f aeeb 	bne.w	4680 <__aeabi_dmul+0x1f8>
    48aa:	e712      	b.n	46d2 <__aeabi_dmul+0x24a>

000048ac <__gedf2>:
    48ac:	f04f 3cff 	mov.w	ip, #4294967295
    48b0:	e006      	b.n	48c0 <__cmpdf2+0x4>
    48b2:	bf00      	nop

000048b4 <__ledf2>:
    48b4:	f04f 0c01 	mov.w	ip, #1
    48b8:	e002      	b.n	48c0 <__cmpdf2+0x4>
    48ba:	bf00      	nop

000048bc <__cmpdf2>:
    48bc:	f04f 0c01 	mov.w	ip, #1
    48c0:	f84d cd04 	str.w	ip, [sp, #-4]!
    48c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    48c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    48cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    48d0:	bf18      	it	ne
    48d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    48d6:	d01b      	beq.n	4910 <__cmpdf2+0x54>
    48d8:	b001      	add	sp, #4
    48da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    48de:	bf0c      	ite	eq
    48e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    48e4:	ea91 0f03 	teqne	r1, r3
    48e8:	bf02      	ittt	eq
    48ea:	ea90 0f02 	teqeq	r0, r2
    48ee:	2000      	moveq	r0, #0
    48f0:	4770      	bxeq	lr
    48f2:	f110 0f00 	cmn.w	r0, #0
    48f6:	ea91 0f03 	teq	r1, r3
    48fa:	bf58      	it	pl
    48fc:	4299      	cmppl	r1, r3
    48fe:	bf08      	it	eq
    4900:	4290      	cmpeq	r0, r2
    4902:	bf2c      	ite	cs
    4904:	17d8      	asrcs	r0, r3, #31
    4906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    490a:	f040 0001 	orr.w	r0, r0, #1
    490e:	4770      	bx	lr
    4910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4918:	d102      	bne.n	4920 <__cmpdf2+0x64>
    491a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    491e:	d107      	bne.n	4930 <__cmpdf2+0x74>
    4920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4928:	d1d6      	bne.n	48d8 <__cmpdf2+0x1c>
    492a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    492e:	d0d3      	beq.n	48d8 <__cmpdf2+0x1c>
    4930:	f85d 0b04 	ldr.w	r0, [sp], #4
    4934:	4770      	bx	lr
    4936:	bf00      	nop

00004938 <__aeabi_cdrcmple>:
    4938:	4684      	mov	ip, r0
    493a:	4610      	mov	r0, r2
    493c:	4662      	mov	r2, ip
    493e:	468c      	mov	ip, r1
    4940:	4619      	mov	r1, r3
    4942:	4663      	mov	r3, ip
    4944:	e000      	b.n	4948 <__aeabi_cdcmpeq>
    4946:	bf00      	nop

00004948 <__aeabi_cdcmpeq>:
    4948:	b501      	push	{r0, lr}
    494a:	f7ff ffb7 	bl	48bc <__cmpdf2>
    494e:	2800      	cmp	r0, #0
    4950:	bf48      	it	mi
    4952:	f110 0f00 	cmnmi.w	r0, #0
    4956:	bd01      	pop	{r0, pc}

00004958 <__aeabi_dcmpeq>:
    4958:	f84d ed08 	str.w	lr, [sp, #-8]!
    495c:	f7ff fff4 	bl	4948 <__aeabi_cdcmpeq>
    4960:	bf0c      	ite	eq
    4962:	2001      	moveq	r0, #1
    4964:	2000      	movne	r0, #0
    4966:	f85d fb08 	ldr.w	pc, [sp], #8
    496a:	bf00      	nop

0000496c <__aeabi_dcmplt>:
    496c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4970:	f7ff ffea 	bl	4948 <__aeabi_cdcmpeq>
    4974:	bf34      	ite	cc
    4976:	2001      	movcc	r0, #1
    4978:	2000      	movcs	r0, #0
    497a:	f85d fb08 	ldr.w	pc, [sp], #8
    497e:	bf00      	nop

00004980 <__aeabi_dcmple>:
    4980:	f84d ed08 	str.w	lr, [sp, #-8]!
    4984:	f7ff ffe0 	bl	4948 <__aeabi_cdcmpeq>
    4988:	bf94      	ite	ls
    498a:	2001      	movls	r0, #1
    498c:	2000      	movhi	r0, #0
    498e:	f85d fb08 	ldr.w	pc, [sp], #8
    4992:	bf00      	nop

00004994 <__aeabi_dcmpge>:
    4994:	f84d ed08 	str.w	lr, [sp, #-8]!
    4998:	f7ff ffce 	bl	4938 <__aeabi_cdrcmple>
    499c:	bf94      	ite	ls
    499e:	2001      	movls	r0, #1
    49a0:	2000      	movhi	r0, #0
    49a2:	f85d fb08 	ldr.w	pc, [sp], #8
    49a6:	bf00      	nop

000049a8 <__aeabi_dcmpgt>:
    49a8:	f84d ed08 	str.w	lr, [sp, #-8]!
    49ac:	f7ff ffc4 	bl	4938 <__aeabi_cdrcmple>
    49b0:	bf34      	ite	cc
    49b2:	2001      	movcc	r0, #1
    49b4:	2000      	movcs	r0, #0
    49b6:	f85d fb08 	ldr.w	pc, [sp], #8
    49ba:	bf00      	nop

000049bc <__aeabi_dcmpun>:
    49bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    49c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    49c4:	d102      	bne.n	49cc <__aeabi_dcmpun+0x10>
    49c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    49ca:	d10a      	bne.n	49e2 <__aeabi_dcmpun+0x26>
    49cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    49d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    49d4:	d102      	bne.n	49dc <__aeabi_dcmpun+0x20>
    49d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    49da:	d102      	bne.n	49e2 <__aeabi_dcmpun+0x26>
    49dc:	f04f 0000 	mov.w	r0, #0
    49e0:	4770      	bx	lr
    49e2:	f04f 0001 	mov.w	r0, #1
    49e6:	4770      	bx	lr

000049e8 <__aeabi_d2uiz>:
    49e8:	004a      	lsls	r2, r1, #1
    49ea:	d211      	bcs.n	4a10 <__aeabi_d2uiz+0x28>
    49ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    49f0:	d211      	bcs.n	4a16 <__aeabi_d2uiz+0x2e>
    49f2:	d50d      	bpl.n	4a10 <__aeabi_d2uiz+0x28>
    49f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    49f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    49fc:	d40e      	bmi.n	4a1c <__aeabi_d2uiz+0x34>
    49fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    4a0a:	fa23 f002 	lsr.w	r0, r3, r2
    4a0e:	4770      	bx	lr
    4a10:	f04f 0000 	mov.w	r0, #0
    4a14:	4770      	bx	lr
    4a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    4a1a:	d102      	bne.n	4a22 <__aeabi_d2uiz+0x3a>
    4a1c:	f04f 30ff 	mov.w	r0, #4294967295
    4a20:	4770      	bx	lr
    4a22:	f04f 0000 	mov.w	r0, #0
    4a26:	4770      	bx	lr

00004a28 <atoi>:
    4a28:	220a      	movs	r2, #10
    4a2a:	2100      	movs	r1, #0
    4a2c:	f000 bc32 	b.w	5294 <strtol>

00004a30 <__errno>:
    4a30:	4b01      	ldr	r3, [pc, #4]	; (4a38 <__errno+0x8>)
    4a32:	6818      	ldr	r0, [r3, #0]
    4a34:	4770      	bx	lr
    4a36:	bf00      	nop
    4a38:	1fff0da0 	.word	0x1fff0da0

00004a3c <__libc_init_array>:
    4a3c:	b570      	push	{r4, r5, r6, lr}
    4a3e:	4e0f      	ldr	r6, [pc, #60]	; (4a7c <__libc_init_array+0x40>)
    4a40:	4d0f      	ldr	r5, [pc, #60]	; (4a80 <__libc_init_array+0x44>)
    4a42:	1b76      	subs	r6, r6, r5
    4a44:	10b6      	asrs	r6, r6, #2
    4a46:	bf18      	it	ne
    4a48:	2400      	movne	r4, #0
    4a4a:	d005      	beq.n	4a58 <__libc_init_array+0x1c>
    4a4c:	3401      	adds	r4, #1
    4a4e:	f855 3b04 	ldr.w	r3, [r5], #4
    4a52:	4798      	blx	r3
    4a54:	42a6      	cmp	r6, r4
    4a56:	d1f9      	bne.n	4a4c <__libc_init_array+0x10>
    4a58:	4e0a      	ldr	r6, [pc, #40]	; (4a84 <__libc_init_array+0x48>)
    4a5a:	4d0b      	ldr	r5, [pc, #44]	; (4a88 <__libc_init_array+0x4c>)
    4a5c:	1b76      	subs	r6, r6, r5
    4a5e:	f001 f9eb 	bl	5e38 <_init>
    4a62:	10b6      	asrs	r6, r6, #2
    4a64:	bf18      	it	ne
    4a66:	2400      	movne	r4, #0
    4a68:	d006      	beq.n	4a78 <__libc_init_array+0x3c>
    4a6a:	3401      	adds	r4, #1
    4a6c:	f855 3b04 	ldr.w	r3, [r5], #4
    4a70:	4798      	blx	r3
    4a72:	42a6      	cmp	r6, r4
    4a74:	d1f9      	bne.n	4a6a <__libc_init_array+0x2e>
    4a76:	bd70      	pop	{r4, r5, r6, pc}
    4a78:	bd70      	pop	{r4, r5, r6, pc}
    4a7a:	bf00      	nop
    4a7c:	00005e44 	.word	0x00005e44
    4a80:	00005e44 	.word	0x00005e44
    4a84:	00005e54 	.word	0x00005e54
    4a88:	00005e44 	.word	0x00005e44

00004a8c <__locale_ctype_ptr_l>:
    4a8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    4a90:	4770      	bx	lr
    4a92:	bf00      	nop

00004a94 <malloc>:
    4a94:	4b02      	ldr	r3, [pc, #8]	; (4aa0 <malloc+0xc>)
    4a96:	4601      	mov	r1, r0
    4a98:	6818      	ldr	r0, [r3, #0]
    4a9a:	f000 b803 	b.w	4aa4 <_malloc_r>
    4a9e:	bf00      	nop
    4aa0:	1fff0da0 	.word	0x1fff0da0

00004aa4 <_malloc_r>:
    4aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aa8:	f101 050b 	add.w	r5, r1, #11
    4aac:	2d16      	cmp	r5, #22
    4aae:	b083      	sub	sp, #12
    4ab0:	4606      	mov	r6, r0
    4ab2:	f240 809f 	bls.w	4bf4 <_malloc_r+0x150>
    4ab6:	f035 0507 	bics.w	r5, r5, #7
    4aba:	f100 80bf 	bmi.w	4c3c <_malloc_r+0x198>
    4abe:	42a9      	cmp	r1, r5
    4ac0:	f200 80bc 	bhi.w	4c3c <_malloc_r+0x198>
    4ac4:	f000 fabc 	bl	5040 <__malloc_lock>
    4ac8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    4acc:	f0c0 829c 	bcc.w	5008 <_malloc_r+0x564>
    4ad0:	0a6b      	lsrs	r3, r5, #9
    4ad2:	f000 80ba 	beq.w	4c4a <_malloc_r+0x1a6>
    4ad6:	2b04      	cmp	r3, #4
    4ad8:	f200 8183 	bhi.w	4de2 <_malloc_r+0x33e>
    4adc:	09a8      	lsrs	r0, r5, #6
    4ade:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    4ae2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4ae6:	3038      	adds	r0, #56	; 0x38
    4ae8:	4fc4      	ldr	r7, [pc, #784]	; (4dfc <_malloc_r+0x358>)
    4aea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4aee:	f1a3 0108 	sub.w	r1, r3, #8
    4af2:	685c      	ldr	r4, [r3, #4]
    4af4:	42a1      	cmp	r1, r4
    4af6:	d107      	bne.n	4b08 <_malloc_r+0x64>
    4af8:	e0ac      	b.n	4c54 <_malloc_r+0x1b0>
    4afa:	2a00      	cmp	r2, #0
    4afc:	f280 80ac 	bge.w	4c58 <_malloc_r+0x1b4>
    4b00:	68e4      	ldr	r4, [r4, #12]
    4b02:	42a1      	cmp	r1, r4
    4b04:	f000 80a6 	beq.w	4c54 <_malloc_r+0x1b0>
    4b08:	6863      	ldr	r3, [r4, #4]
    4b0a:	f023 0303 	bic.w	r3, r3, #3
    4b0e:	1b5a      	subs	r2, r3, r5
    4b10:	2a0f      	cmp	r2, #15
    4b12:	ddf2      	ble.n	4afa <_malloc_r+0x56>
    4b14:	49b9      	ldr	r1, [pc, #740]	; (4dfc <_malloc_r+0x358>)
    4b16:	693c      	ldr	r4, [r7, #16]
    4b18:	f101 0e08 	add.w	lr, r1, #8
    4b1c:	4574      	cmp	r4, lr
    4b1e:	f000 81b3 	beq.w	4e88 <_malloc_r+0x3e4>
    4b22:	6863      	ldr	r3, [r4, #4]
    4b24:	f023 0303 	bic.w	r3, r3, #3
    4b28:	1b5a      	subs	r2, r3, r5
    4b2a:	2a0f      	cmp	r2, #15
    4b2c:	f300 8199 	bgt.w	4e62 <_malloc_r+0x3be>
    4b30:	2a00      	cmp	r2, #0
    4b32:	f8c1 e014 	str.w	lr, [r1, #20]
    4b36:	f8c1 e010 	str.w	lr, [r1, #16]
    4b3a:	f280 809e 	bge.w	4c7a <_malloc_r+0x1d6>
    4b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4b42:	f080 8167 	bcs.w	4e14 <_malloc_r+0x370>
    4b46:	08db      	lsrs	r3, r3, #3
    4b48:	f103 0c01 	add.w	ip, r3, #1
    4b4c:	2201      	movs	r2, #1
    4b4e:	109b      	asrs	r3, r3, #2
    4b50:	fa02 f303 	lsl.w	r3, r2, r3
    4b54:	684a      	ldr	r2, [r1, #4]
    4b56:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    4b5a:	f8c4 8008 	str.w	r8, [r4, #8]
    4b5e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    4b62:	431a      	orrs	r2, r3
    4b64:	f1a9 0308 	sub.w	r3, r9, #8
    4b68:	60e3      	str	r3, [r4, #12]
    4b6a:	604a      	str	r2, [r1, #4]
    4b6c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    4b70:	f8c8 400c 	str.w	r4, [r8, #12]
    4b74:	1083      	asrs	r3, r0, #2
    4b76:	2401      	movs	r4, #1
    4b78:	409c      	lsls	r4, r3
    4b7a:	4294      	cmp	r4, r2
    4b7c:	f200 808a 	bhi.w	4c94 <_malloc_r+0x1f0>
    4b80:	4214      	tst	r4, r2
    4b82:	d106      	bne.n	4b92 <_malloc_r+0xee>
    4b84:	f020 0003 	bic.w	r0, r0, #3
    4b88:	0064      	lsls	r4, r4, #1
    4b8a:	4214      	tst	r4, r2
    4b8c:	f100 0004 	add.w	r0, r0, #4
    4b90:	d0fa      	beq.n	4b88 <_malloc_r+0xe4>
    4b92:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4b96:	46cc      	mov	ip, r9
    4b98:	4680      	mov	r8, r0
    4b9a:	f8dc 100c 	ldr.w	r1, [ip, #12]
    4b9e:	458c      	cmp	ip, r1
    4ba0:	d107      	bne.n	4bb2 <_malloc_r+0x10e>
    4ba2:	e173      	b.n	4e8c <_malloc_r+0x3e8>
    4ba4:	2a00      	cmp	r2, #0
    4ba6:	f280 8181 	bge.w	4eac <_malloc_r+0x408>
    4baa:	68c9      	ldr	r1, [r1, #12]
    4bac:	458c      	cmp	ip, r1
    4bae:	f000 816d 	beq.w	4e8c <_malloc_r+0x3e8>
    4bb2:	684b      	ldr	r3, [r1, #4]
    4bb4:	f023 0303 	bic.w	r3, r3, #3
    4bb8:	1b5a      	subs	r2, r3, r5
    4bba:	2a0f      	cmp	r2, #15
    4bbc:	ddf2      	ble.n	4ba4 <_malloc_r+0x100>
    4bbe:	460c      	mov	r4, r1
    4bc0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4bc4:	f854 8f08 	ldr.w	r8, [r4, #8]!
    4bc8:	194b      	adds	r3, r1, r5
    4bca:	f045 0501 	orr.w	r5, r5, #1
    4bce:	604d      	str	r5, [r1, #4]
    4bd0:	f042 0101 	orr.w	r1, r2, #1
    4bd4:	f8c8 c00c 	str.w	ip, [r8, #12]
    4bd8:	4630      	mov	r0, r6
    4bda:	f8cc 8008 	str.w	r8, [ip, #8]
    4bde:	617b      	str	r3, [r7, #20]
    4be0:	613b      	str	r3, [r7, #16]
    4be2:	f8c3 e00c 	str.w	lr, [r3, #12]
    4be6:	f8c3 e008 	str.w	lr, [r3, #8]
    4bea:	6059      	str	r1, [r3, #4]
    4bec:	509a      	str	r2, [r3, r2]
    4bee:	f000 fa29 	bl	5044 <__malloc_unlock>
    4bf2:	e01f      	b.n	4c34 <_malloc_r+0x190>
    4bf4:	2910      	cmp	r1, #16
    4bf6:	d821      	bhi.n	4c3c <_malloc_r+0x198>
    4bf8:	f000 fa22 	bl	5040 <__malloc_lock>
    4bfc:	2510      	movs	r5, #16
    4bfe:	2306      	movs	r3, #6
    4c00:	2002      	movs	r0, #2
    4c02:	4f7e      	ldr	r7, [pc, #504]	; (4dfc <_malloc_r+0x358>)
    4c04:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4c08:	f1a3 0208 	sub.w	r2, r3, #8
    4c0c:	685c      	ldr	r4, [r3, #4]
    4c0e:	4294      	cmp	r4, r2
    4c10:	f000 8145 	beq.w	4e9e <_malloc_r+0x3fa>
    4c14:	6863      	ldr	r3, [r4, #4]
    4c16:	68e1      	ldr	r1, [r4, #12]
    4c18:	68a5      	ldr	r5, [r4, #8]
    4c1a:	f023 0303 	bic.w	r3, r3, #3
    4c1e:	4423      	add	r3, r4
    4c20:	4630      	mov	r0, r6
    4c22:	685a      	ldr	r2, [r3, #4]
    4c24:	60e9      	str	r1, [r5, #12]
    4c26:	f042 0201 	orr.w	r2, r2, #1
    4c2a:	608d      	str	r5, [r1, #8]
    4c2c:	605a      	str	r2, [r3, #4]
    4c2e:	f000 fa09 	bl	5044 <__malloc_unlock>
    4c32:	3408      	adds	r4, #8
    4c34:	4620      	mov	r0, r4
    4c36:	b003      	add	sp, #12
    4c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c3c:	2400      	movs	r4, #0
    4c3e:	230c      	movs	r3, #12
    4c40:	4620      	mov	r0, r4
    4c42:	6033      	str	r3, [r6, #0]
    4c44:	b003      	add	sp, #12
    4c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c4a:	2380      	movs	r3, #128	; 0x80
    4c4c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    4c50:	203f      	movs	r0, #63	; 0x3f
    4c52:	e749      	b.n	4ae8 <_malloc_r+0x44>
    4c54:	4670      	mov	r0, lr
    4c56:	e75d      	b.n	4b14 <_malloc_r+0x70>
    4c58:	4423      	add	r3, r4
    4c5a:	68e1      	ldr	r1, [r4, #12]
    4c5c:	685a      	ldr	r2, [r3, #4]
    4c5e:	68a5      	ldr	r5, [r4, #8]
    4c60:	f042 0201 	orr.w	r2, r2, #1
    4c64:	60e9      	str	r1, [r5, #12]
    4c66:	4630      	mov	r0, r6
    4c68:	608d      	str	r5, [r1, #8]
    4c6a:	605a      	str	r2, [r3, #4]
    4c6c:	f000 f9ea 	bl	5044 <__malloc_unlock>
    4c70:	3408      	adds	r4, #8
    4c72:	4620      	mov	r0, r4
    4c74:	b003      	add	sp, #12
    4c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c7a:	4423      	add	r3, r4
    4c7c:	4630      	mov	r0, r6
    4c7e:	685a      	ldr	r2, [r3, #4]
    4c80:	f042 0201 	orr.w	r2, r2, #1
    4c84:	605a      	str	r2, [r3, #4]
    4c86:	f000 f9dd 	bl	5044 <__malloc_unlock>
    4c8a:	3408      	adds	r4, #8
    4c8c:	4620      	mov	r0, r4
    4c8e:	b003      	add	sp, #12
    4c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c94:	68bc      	ldr	r4, [r7, #8]
    4c96:	6863      	ldr	r3, [r4, #4]
    4c98:	f023 0803 	bic.w	r8, r3, #3
    4c9c:	45a8      	cmp	r8, r5
    4c9e:	d304      	bcc.n	4caa <_malloc_r+0x206>
    4ca0:	ebc5 0308 	rsb	r3, r5, r8
    4ca4:	2b0f      	cmp	r3, #15
    4ca6:	f300 808c 	bgt.w	4dc2 <_malloc_r+0x31e>
    4caa:	4b55      	ldr	r3, [pc, #340]	; (4e00 <_malloc_r+0x35c>)
    4cac:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4e10 <_malloc_r+0x36c>
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	f8d9 3000 	ldr.w	r3, [r9]
    4cb6:	3301      	adds	r3, #1
    4cb8:	442a      	add	r2, r5
    4cba:	eb04 0a08 	add.w	sl, r4, r8
    4cbe:	f000 8160 	beq.w	4f82 <_malloc_r+0x4de>
    4cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4cc6:	320f      	adds	r2, #15
    4cc8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    4ccc:	f022 020f 	bic.w	r2, r2, #15
    4cd0:	4611      	mov	r1, r2
    4cd2:	4630      	mov	r0, r6
    4cd4:	9201      	str	r2, [sp, #4]
    4cd6:	f000 f9b7 	bl	5048 <_sbrk_r>
    4cda:	f1b0 3fff 	cmp.w	r0, #4294967295
    4cde:	4683      	mov	fp, r0
    4ce0:	9a01      	ldr	r2, [sp, #4]
    4ce2:	f000 8158 	beq.w	4f96 <_malloc_r+0x4f2>
    4ce6:	4582      	cmp	sl, r0
    4ce8:	f200 80fc 	bhi.w	4ee4 <_malloc_r+0x440>
    4cec:	4b45      	ldr	r3, [pc, #276]	; (4e04 <_malloc_r+0x360>)
    4cee:	6819      	ldr	r1, [r3, #0]
    4cf0:	45da      	cmp	sl, fp
    4cf2:	4411      	add	r1, r2
    4cf4:	6019      	str	r1, [r3, #0]
    4cf6:	f000 8153 	beq.w	4fa0 <_malloc_r+0x4fc>
    4cfa:	f8d9 0000 	ldr.w	r0, [r9]
    4cfe:	f8df e110 	ldr.w	lr, [pc, #272]	; 4e10 <_malloc_r+0x36c>
    4d02:	3001      	adds	r0, #1
    4d04:	bf1b      	ittet	ne
    4d06:	ebca 0a0b 	rsbne	sl, sl, fp
    4d0a:	4451      	addne	r1, sl
    4d0c:	f8ce b000 	streq.w	fp, [lr]
    4d10:	6019      	strne	r1, [r3, #0]
    4d12:	f01b 0107 	ands.w	r1, fp, #7
    4d16:	f000 8117 	beq.w	4f48 <_malloc_r+0x4a4>
    4d1a:	f1c1 0008 	rsb	r0, r1, #8
    4d1e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    4d22:	4483      	add	fp, r0
    4d24:	3108      	adds	r1, #8
    4d26:	445a      	add	r2, fp
    4d28:	f3c2 020b 	ubfx	r2, r2, #0, #12
    4d2c:	ebc2 0901 	rsb	r9, r2, r1
    4d30:	4649      	mov	r1, r9
    4d32:	4630      	mov	r0, r6
    4d34:	9301      	str	r3, [sp, #4]
    4d36:	f000 f987 	bl	5048 <_sbrk_r>
    4d3a:	1c43      	adds	r3, r0, #1
    4d3c:	9b01      	ldr	r3, [sp, #4]
    4d3e:	f000 813f 	beq.w	4fc0 <_malloc_r+0x51c>
    4d42:	ebcb 0200 	rsb	r2, fp, r0
    4d46:	444a      	add	r2, r9
    4d48:	f042 0201 	orr.w	r2, r2, #1
    4d4c:	6819      	ldr	r1, [r3, #0]
    4d4e:	f8c7 b008 	str.w	fp, [r7, #8]
    4d52:	4449      	add	r1, r9
    4d54:	42bc      	cmp	r4, r7
    4d56:	f8cb 2004 	str.w	r2, [fp, #4]
    4d5a:	6019      	str	r1, [r3, #0]
    4d5c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4e04 <_malloc_r+0x360>
    4d60:	d016      	beq.n	4d90 <_malloc_r+0x2ec>
    4d62:	f1b8 0f0f 	cmp.w	r8, #15
    4d66:	f240 80fd 	bls.w	4f64 <_malloc_r+0x4c0>
    4d6a:	6862      	ldr	r2, [r4, #4]
    4d6c:	f1a8 030c 	sub.w	r3, r8, #12
    4d70:	f023 0307 	bic.w	r3, r3, #7
    4d74:	18e0      	adds	r0, r4, r3
    4d76:	f002 0201 	and.w	r2, r2, #1
    4d7a:	f04f 0e05 	mov.w	lr, #5
    4d7e:	431a      	orrs	r2, r3
    4d80:	2b0f      	cmp	r3, #15
    4d82:	6062      	str	r2, [r4, #4]
    4d84:	f8c0 e004 	str.w	lr, [r0, #4]
    4d88:	f8c0 e008 	str.w	lr, [r0, #8]
    4d8c:	f200 811c 	bhi.w	4fc8 <_malloc_r+0x524>
    4d90:	4b1d      	ldr	r3, [pc, #116]	; (4e08 <_malloc_r+0x364>)
    4d92:	68bc      	ldr	r4, [r7, #8]
    4d94:	681a      	ldr	r2, [r3, #0]
    4d96:	4291      	cmp	r1, r2
    4d98:	bf88      	it	hi
    4d9a:	6019      	strhi	r1, [r3, #0]
    4d9c:	4b1b      	ldr	r3, [pc, #108]	; (4e0c <_malloc_r+0x368>)
    4d9e:	681a      	ldr	r2, [r3, #0]
    4da0:	4291      	cmp	r1, r2
    4da2:	6862      	ldr	r2, [r4, #4]
    4da4:	bf88      	it	hi
    4da6:	6019      	strhi	r1, [r3, #0]
    4da8:	f022 0203 	bic.w	r2, r2, #3
    4dac:	4295      	cmp	r5, r2
    4dae:	eba2 0305 	sub.w	r3, r2, r5
    4db2:	d801      	bhi.n	4db8 <_malloc_r+0x314>
    4db4:	2b0f      	cmp	r3, #15
    4db6:	dc04      	bgt.n	4dc2 <_malloc_r+0x31e>
    4db8:	4630      	mov	r0, r6
    4dba:	f000 f943 	bl	5044 <__malloc_unlock>
    4dbe:	2400      	movs	r4, #0
    4dc0:	e738      	b.n	4c34 <_malloc_r+0x190>
    4dc2:	1962      	adds	r2, r4, r5
    4dc4:	f043 0301 	orr.w	r3, r3, #1
    4dc8:	f045 0501 	orr.w	r5, r5, #1
    4dcc:	6065      	str	r5, [r4, #4]
    4dce:	4630      	mov	r0, r6
    4dd0:	60ba      	str	r2, [r7, #8]
    4dd2:	6053      	str	r3, [r2, #4]
    4dd4:	f000 f936 	bl	5044 <__malloc_unlock>
    4dd8:	3408      	adds	r4, #8
    4dda:	4620      	mov	r0, r4
    4ddc:	b003      	add	sp, #12
    4dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de2:	2b14      	cmp	r3, #20
    4de4:	d971      	bls.n	4eca <_malloc_r+0x426>
    4de6:	2b54      	cmp	r3, #84	; 0x54
    4de8:	f200 80a4 	bhi.w	4f34 <_malloc_r+0x490>
    4dec:	0b28      	lsrs	r0, r5, #12
    4dee:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    4df2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4df6:	306e      	adds	r0, #110	; 0x6e
    4df8:	e676      	b.n	4ae8 <_malloc_r+0x44>
    4dfa:	bf00      	nop
    4dfc:	1fff0f10 	.word	0x1fff0f10
    4e00:	1fff1548 	.word	0x1fff1548
    4e04:	1fff154c 	.word	0x1fff154c
    4e08:	1fff1544 	.word	0x1fff1544
    4e0c:	1fff1540 	.word	0x1fff1540
    4e10:	1fff131c 	.word	0x1fff131c
    4e14:	0a5a      	lsrs	r2, r3, #9
    4e16:	2a04      	cmp	r2, #4
    4e18:	d95e      	bls.n	4ed8 <_malloc_r+0x434>
    4e1a:	2a14      	cmp	r2, #20
    4e1c:	f200 80b3 	bhi.w	4f86 <_malloc_r+0x4e2>
    4e20:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    4e24:	0049      	lsls	r1, r1, #1
    4e26:	325b      	adds	r2, #91	; 0x5b
    4e28:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    4e2c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    4e30:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 5010 <_malloc_r+0x56c>
    4e34:	f1ac 0c08 	sub.w	ip, ip, #8
    4e38:	458c      	cmp	ip, r1
    4e3a:	f000 8088 	beq.w	4f4e <_malloc_r+0x4aa>
    4e3e:	684a      	ldr	r2, [r1, #4]
    4e40:	f022 0203 	bic.w	r2, r2, #3
    4e44:	4293      	cmp	r3, r2
    4e46:	d202      	bcs.n	4e4e <_malloc_r+0x3aa>
    4e48:	6889      	ldr	r1, [r1, #8]
    4e4a:	458c      	cmp	ip, r1
    4e4c:	d1f7      	bne.n	4e3e <_malloc_r+0x39a>
    4e4e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    4e52:	687a      	ldr	r2, [r7, #4]
    4e54:	f8c4 c00c 	str.w	ip, [r4, #12]
    4e58:	60a1      	str	r1, [r4, #8]
    4e5a:	f8cc 4008 	str.w	r4, [ip, #8]
    4e5e:	60cc      	str	r4, [r1, #12]
    4e60:	e688      	b.n	4b74 <_malloc_r+0xd0>
    4e62:	1963      	adds	r3, r4, r5
    4e64:	f042 0701 	orr.w	r7, r2, #1
    4e68:	f045 0501 	orr.w	r5, r5, #1
    4e6c:	6065      	str	r5, [r4, #4]
    4e6e:	4630      	mov	r0, r6
    4e70:	614b      	str	r3, [r1, #20]
    4e72:	610b      	str	r3, [r1, #16]
    4e74:	f8c3 e00c 	str.w	lr, [r3, #12]
    4e78:	f8c3 e008 	str.w	lr, [r3, #8]
    4e7c:	605f      	str	r7, [r3, #4]
    4e7e:	509a      	str	r2, [r3, r2]
    4e80:	3408      	adds	r4, #8
    4e82:	f000 f8df 	bl	5044 <__malloc_unlock>
    4e86:	e6d5      	b.n	4c34 <_malloc_r+0x190>
    4e88:	684a      	ldr	r2, [r1, #4]
    4e8a:	e673      	b.n	4b74 <_malloc_r+0xd0>
    4e8c:	f108 0801 	add.w	r8, r8, #1
    4e90:	f018 0f03 	tst.w	r8, #3
    4e94:	f10c 0c08 	add.w	ip, ip, #8
    4e98:	f47f ae7f 	bne.w	4b9a <_malloc_r+0xf6>
    4e9c:	e030      	b.n	4f00 <_malloc_r+0x45c>
    4e9e:	68dc      	ldr	r4, [r3, #12]
    4ea0:	42a3      	cmp	r3, r4
    4ea2:	bf08      	it	eq
    4ea4:	3002      	addeq	r0, #2
    4ea6:	f43f ae35 	beq.w	4b14 <_malloc_r+0x70>
    4eaa:	e6b3      	b.n	4c14 <_malloc_r+0x170>
    4eac:	440b      	add	r3, r1
    4eae:	460c      	mov	r4, r1
    4eb0:	685a      	ldr	r2, [r3, #4]
    4eb2:	68c9      	ldr	r1, [r1, #12]
    4eb4:	f854 5f08 	ldr.w	r5, [r4, #8]!
    4eb8:	f042 0201 	orr.w	r2, r2, #1
    4ebc:	605a      	str	r2, [r3, #4]
    4ebe:	4630      	mov	r0, r6
    4ec0:	60e9      	str	r1, [r5, #12]
    4ec2:	608d      	str	r5, [r1, #8]
    4ec4:	f000 f8be 	bl	5044 <__malloc_unlock>
    4ec8:	e6b4      	b.n	4c34 <_malloc_r+0x190>
    4eca:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    4ece:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    4ed2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4ed6:	e607      	b.n	4ae8 <_malloc_r+0x44>
    4ed8:	099a      	lsrs	r2, r3, #6
    4eda:	f102 0139 	add.w	r1, r2, #57	; 0x39
    4ede:	0049      	lsls	r1, r1, #1
    4ee0:	3238      	adds	r2, #56	; 0x38
    4ee2:	e7a1      	b.n	4e28 <_malloc_r+0x384>
    4ee4:	42bc      	cmp	r4, r7
    4ee6:	4b4a      	ldr	r3, [pc, #296]	; (5010 <_malloc_r+0x56c>)
    4ee8:	f43f af00 	beq.w	4cec <_malloc_r+0x248>
    4eec:	689c      	ldr	r4, [r3, #8]
    4eee:	6862      	ldr	r2, [r4, #4]
    4ef0:	f022 0203 	bic.w	r2, r2, #3
    4ef4:	e75a      	b.n	4dac <_malloc_r+0x308>
    4ef6:	f859 3908 	ldr.w	r3, [r9], #-8
    4efa:	4599      	cmp	r9, r3
    4efc:	f040 8082 	bne.w	5004 <_malloc_r+0x560>
    4f00:	f010 0f03 	tst.w	r0, #3
    4f04:	f100 30ff 	add.w	r0, r0, #4294967295
    4f08:	d1f5      	bne.n	4ef6 <_malloc_r+0x452>
    4f0a:	687b      	ldr	r3, [r7, #4]
    4f0c:	ea23 0304 	bic.w	r3, r3, r4
    4f10:	607b      	str	r3, [r7, #4]
    4f12:	0064      	lsls	r4, r4, #1
    4f14:	429c      	cmp	r4, r3
    4f16:	f63f aebd 	bhi.w	4c94 <_malloc_r+0x1f0>
    4f1a:	2c00      	cmp	r4, #0
    4f1c:	f43f aeba 	beq.w	4c94 <_malloc_r+0x1f0>
    4f20:	421c      	tst	r4, r3
    4f22:	4640      	mov	r0, r8
    4f24:	f47f ae35 	bne.w	4b92 <_malloc_r+0xee>
    4f28:	0064      	lsls	r4, r4, #1
    4f2a:	421c      	tst	r4, r3
    4f2c:	f100 0004 	add.w	r0, r0, #4
    4f30:	d0fa      	beq.n	4f28 <_malloc_r+0x484>
    4f32:	e62e      	b.n	4b92 <_malloc_r+0xee>
    4f34:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4f38:	d818      	bhi.n	4f6c <_malloc_r+0x4c8>
    4f3a:	0be8      	lsrs	r0, r5, #15
    4f3c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    4f40:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4f44:	3077      	adds	r0, #119	; 0x77
    4f46:	e5cf      	b.n	4ae8 <_malloc_r+0x44>
    4f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4f4c:	e6eb      	b.n	4d26 <_malloc_r+0x282>
    4f4e:	2101      	movs	r1, #1
    4f50:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4f54:	1092      	asrs	r2, r2, #2
    4f56:	fa01 f202 	lsl.w	r2, r1, r2
    4f5a:	431a      	orrs	r2, r3
    4f5c:	f8c8 2004 	str.w	r2, [r8, #4]
    4f60:	4661      	mov	r1, ip
    4f62:	e777      	b.n	4e54 <_malloc_r+0x3b0>
    4f64:	2301      	movs	r3, #1
    4f66:	f8cb 3004 	str.w	r3, [fp, #4]
    4f6a:	e725      	b.n	4db8 <_malloc_r+0x314>
    4f6c:	f240 5254 	movw	r2, #1364	; 0x554
    4f70:	4293      	cmp	r3, r2
    4f72:	d820      	bhi.n	4fb6 <_malloc_r+0x512>
    4f74:	0ca8      	lsrs	r0, r5, #18
    4f76:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    4f7a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4f7e:	307c      	adds	r0, #124	; 0x7c
    4f80:	e5b2      	b.n	4ae8 <_malloc_r+0x44>
    4f82:	3210      	adds	r2, #16
    4f84:	e6a4      	b.n	4cd0 <_malloc_r+0x22c>
    4f86:	2a54      	cmp	r2, #84	; 0x54
    4f88:	d826      	bhi.n	4fd8 <_malloc_r+0x534>
    4f8a:	0b1a      	lsrs	r2, r3, #12
    4f8c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    4f90:	0049      	lsls	r1, r1, #1
    4f92:	326e      	adds	r2, #110	; 0x6e
    4f94:	e748      	b.n	4e28 <_malloc_r+0x384>
    4f96:	68bc      	ldr	r4, [r7, #8]
    4f98:	6862      	ldr	r2, [r4, #4]
    4f9a:	f022 0203 	bic.w	r2, r2, #3
    4f9e:	e705      	b.n	4dac <_malloc_r+0x308>
    4fa0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    4fa4:	2800      	cmp	r0, #0
    4fa6:	f47f aea8 	bne.w	4cfa <_malloc_r+0x256>
    4faa:	4442      	add	r2, r8
    4fac:	68bb      	ldr	r3, [r7, #8]
    4fae:	f042 0201 	orr.w	r2, r2, #1
    4fb2:	605a      	str	r2, [r3, #4]
    4fb4:	e6ec      	b.n	4d90 <_malloc_r+0x2ec>
    4fb6:	23fe      	movs	r3, #254	; 0xfe
    4fb8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    4fbc:	207e      	movs	r0, #126	; 0x7e
    4fbe:	e593      	b.n	4ae8 <_malloc_r+0x44>
    4fc0:	2201      	movs	r2, #1
    4fc2:	f04f 0900 	mov.w	r9, #0
    4fc6:	e6c1      	b.n	4d4c <_malloc_r+0x2a8>
    4fc8:	f104 0108 	add.w	r1, r4, #8
    4fcc:	4630      	mov	r0, r6
    4fce:	f000 f9f7 	bl	53c0 <_free_r>
    4fd2:	f8d9 1000 	ldr.w	r1, [r9]
    4fd6:	e6db      	b.n	4d90 <_malloc_r+0x2ec>
    4fd8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4fdc:	d805      	bhi.n	4fea <_malloc_r+0x546>
    4fde:	0bda      	lsrs	r2, r3, #15
    4fe0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    4fe4:	0049      	lsls	r1, r1, #1
    4fe6:	3277      	adds	r2, #119	; 0x77
    4fe8:	e71e      	b.n	4e28 <_malloc_r+0x384>
    4fea:	f240 5154 	movw	r1, #1364	; 0x554
    4fee:	428a      	cmp	r2, r1
    4ff0:	d805      	bhi.n	4ffe <_malloc_r+0x55a>
    4ff2:	0c9a      	lsrs	r2, r3, #18
    4ff4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    4ff8:	0049      	lsls	r1, r1, #1
    4ffa:	327c      	adds	r2, #124	; 0x7c
    4ffc:	e714      	b.n	4e28 <_malloc_r+0x384>
    4ffe:	21fe      	movs	r1, #254	; 0xfe
    5000:	227e      	movs	r2, #126	; 0x7e
    5002:	e711      	b.n	4e28 <_malloc_r+0x384>
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	e784      	b.n	4f12 <_malloc_r+0x46e>
    5008:	08e8      	lsrs	r0, r5, #3
    500a:	1c43      	adds	r3, r0, #1
    500c:	005b      	lsls	r3, r3, #1
    500e:	e5f8      	b.n	4c02 <_malloc_r+0x15e>
    5010:	1fff0f10 	.word	0x1fff0f10

00005014 <__ascii_mbtowc>:
    5014:	b082      	sub	sp, #8
    5016:	b149      	cbz	r1, 502c <__ascii_mbtowc+0x18>
    5018:	b15a      	cbz	r2, 5032 <__ascii_mbtowc+0x1e>
    501a:	b16b      	cbz	r3, 5038 <__ascii_mbtowc+0x24>
    501c:	7813      	ldrb	r3, [r2, #0]
    501e:	600b      	str	r3, [r1, #0]
    5020:	7812      	ldrb	r2, [r2, #0]
    5022:	1c10      	adds	r0, r2, #0
    5024:	bf18      	it	ne
    5026:	2001      	movne	r0, #1
    5028:	b002      	add	sp, #8
    502a:	4770      	bx	lr
    502c:	a901      	add	r1, sp, #4
    502e:	2a00      	cmp	r2, #0
    5030:	d1f3      	bne.n	501a <__ascii_mbtowc+0x6>
    5032:	4610      	mov	r0, r2
    5034:	b002      	add	sp, #8
    5036:	4770      	bx	lr
    5038:	f06f 0001 	mvn.w	r0, #1
    503c:	e7f4      	b.n	5028 <__ascii_mbtowc+0x14>
    503e:	bf00      	nop

00005040 <__malloc_lock>:
    5040:	4770      	bx	lr
    5042:	bf00      	nop

00005044 <__malloc_unlock>:
    5044:	4770      	bx	lr
    5046:	bf00      	nop

00005048 <_sbrk_r>:
    5048:	b538      	push	{r3, r4, r5, lr}
    504a:	4c07      	ldr	r4, [pc, #28]	; (5068 <_sbrk_r+0x20>)
    504c:	2300      	movs	r3, #0
    504e:	4605      	mov	r5, r0
    5050:	4608      	mov	r0, r1
    5052:	6023      	str	r3, [r4, #0]
    5054:	f7fd fb32 	bl	26bc <_sbrk>
    5058:	1c43      	adds	r3, r0, #1
    505a:	d000      	beq.n	505e <_sbrk_r+0x16>
    505c:	bd38      	pop	{r3, r4, r5, pc}
    505e:	6823      	ldr	r3, [r4, #0]
    5060:	2b00      	cmp	r3, #0
    5062:	d0fb      	beq.n	505c <_sbrk_r+0x14>
    5064:	602b      	str	r3, [r5, #0]
    5066:	bd38      	pop	{r3, r4, r5, pc}
    5068:	1fff1588 	.word	0x1fff1588
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff

00005080 <strlen>:
    5080:	f890 f000 	pld	[r0]
    5084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    5088:	f020 0107 	bic.w	r1, r0, #7
    508c:	f06f 0c00 	mvn.w	ip, #0
    5090:	f010 0407 	ands.w	r4, r0, #7
    5094:	f891 f020 	pld	[r1, #32]
    5098:	f040 8049 	bne.w	512e <strlen+0xae>
    509c:	f04f 0400 	mov.w	r4, #0
    50a0:	f06f 0007 	mvn.w	r0, #7
    50a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    50a8:	f891 f040 	pld	[r1, #64]	; 0x40
    50ac:	f100 0008 	add.w	r0, r0, #8
    50b0:	fa82 f24c 	uadd8	r2, r2, ip
    50b4:	faa4 f28c 	sel	r2, r4, ip
    50b8:	fa83 f34c 	uadd8	r3, r3, ip
    50bc:	faa2 f38c 	sel	r3, r2, ip
    50c0:	bb4b      	cbnz	r3, 5116 <strlen+0x96>
    50c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    50c6:	fa82 f24c 	uadd8	r2, r2, ip
    50ca:	f100 0008 	add.w	r0, r0, #8
    50ce:	faa4 f28c 	sel	r2, r4, ip
    50d2:	fa83 f34c 	uadd8	r3, r3, ip
    50d6:	faa2 f38c 	sel	r3, r2, ip
    50da:	b9e3      	cbnz	r3, 5116 <strlen+0x96>
    50dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    50e0:	fa82 f24c 	uadd8	r2, r2, ip
    50e4:	f100 0008 	add.w	r0, r0, #8
    50e8:	faa4 f28c 	sel	r2, r4, ip
    50ec:	fa83 f34c 	uadd8	r3, r3, ip
    50f0:	faa2 f38c 	sel	r3, r2, ip
    50f4:	b97b      	cbnz	r3, 5116 <strlen+0x96>
    50f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    50fa:	f101 0120 	add.w	r1, r1, #32
    50fe:	fa82 f24c 	uadd8	r2, r2, ip
    5102:	f100 0008 	add.w	r0, r0, #8
    5106:	faa4 f28c 	sel	r2, r4, ip
    510a:	fa83 f34c 	uadd8	r3, r3, ip
    510e:	faa2 f38c 	sel	r3, r2, ip
    5112:	2b00      	cmp	r3, #0
    5114:	d0c6      	beq.n	50a4 <strlen+0x24>
    5116:	2a00      	cmp	r2, #0
    5118:	bf04      	itt	eq
    511a:	3004      	addeq	r0, #4
    511c:	461a      	moveq	r2, r3
    511e:	ba12      	rev	r2, r2
    5120:	fab2 f282 	clz	r2, r2
    5124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    512c:	4770      	bx	lr
    512e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5132:	f004 0503 	and.w	r5, r4, #3
    5136:	f1c4 0000 	rsb	r0, r4, #0
    513a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    513e:	f014 0f04 	tst.w	r4, #4
    5142:	f891 f040 	pld	[r1, #64]	; 0x40
    5146:	fa0c f505 	lsl.w	r5, ip, r5
    514a:	ea62 0205 	orn	r2, r2, r5
    514e:	bf1c      	itt	ne
    5150:	ea63 0305 	ornne	r3, r3, r5
    5154:	4662      	movne	r2, ip
    5156:	f04f 0400 	mov.w	r4, #0
    515a:	e7a9      	b.n	50b0 <strlen+0x30>

0000515c <_strtol_l.isra.0>:
    515c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5160:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    5164:	460f      	mov	r7, r1
    5166:	4680      	mov	r8, r0
    5168:	4616      	mov	r6, r2
    516a:	461d      	mov	r5, r3
    516c:	468b      	mov	fp, r1
    516e:	e000      	b.n	5172 <_strtol_l.isra.0+0x16>
    5170:	46a3      	mov	fp, r4
    5172:	465c      	mov	r4, fp
    5174:	4648      	mov	r0, r9
    5176:	f814 ab01 	ldrb.w	sl, [r4], #1
    517a:	f7ff fc87 	bl	4a8c <__locale_ctype_ptr_l>
    517e:	4450      	add	r0, sl
    5180:	7841      	ldrb	r1, [r0, #1]
    5182:	f001 0108 	and.w	r1, r1, #8
    5186:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    518a:	2900      	cmp	r1, #0
    518c:	d1f0      	bne.n	5170 <_strtol_l.isra.0+0x14>
    518e:	4652      	mov	r2, sl
    5190:	2a2d      	cmp	r2, #45	; 0x2d
    5192:	d061      	beq.n	5258 <_strtol_l.isra.0+0xfc>
    5194:	2a2b      	cmp	r2, #43	; 0x2b
    5196:	bf04      	itt	eq
    5198:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    519c:	f10b 0402 	addeq.w	r4, fp, #2
    51a0:	2d00      	cmp	r5, #0
    51a2:	d043      	beq.n	522c <_strtol_l.isra.0+0xd0>
    51a4:	2d10      	cmp	r5, #16
    51a6:	d065      	beq.n	5274 <_strtol_l.isra.0+0x118>
    51a8:	46a9      	mov	r9, r5
    51aa:	f1bc 0f00 	cmp.w	ip, #0
    51ae:	bf0c      	ite	eq
    51b0:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    51b4:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    51b8:	2100      	movs	r1, #0
    51ba:	fbba fef9 	udiv	lr, sl, r9
    51be:	4608      	mov	r0, r1
    51c0:	fb09 aa1e 	mls	sl, r9, lr, sl
    51c4:	e005      	b.n	51d2 <_strtol_l.isra.0+0x76>
    51c6:	d029      	beq.n	521c <_strtol_l.isra.0+0xc0>
    51c8:	fb09 3000 	mla	r0, r9, r0, r3
    51cc:	2101      	movs	r1, #1
    51ce:	f814 2b01 	ldrb.w	r2, [r4], #1
    51d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    51d6:	2b09      	cmp	r3, #9
    51d8:	d905      	bls.n	51e6 <_strtol_l.isra.0+0x8a>
    51da:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    51de:	2b19      	cmp	r3, #25
    51e0:	d80a      	bhi.n	51f8 <_strtol_l.isra.0+0x9c>
    51e2:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    51e6:	429d      	cmp	r5, r3
    51e8:	dd0e      	ble.n	5208 <_strtol_l.isra.0+0xac>
    51ea:	1c4a      	adds	r2, r1, #1
    51ec:	d0ef      	beq.n	51ce <_strtol_l.isra.0+0x72>
    51ee:	4586      	cmp	lr, r0
    51f0:	d2e9      	bcs.n	51c6 <_strtol_l.isra.0+0x6a>
    51f2:	f04f 31ff 	mov.w	r1, #4294967295
    51f6:	e7ea      	b.n	51ce <_strtol_l.isra.0+0x72>
    51f8:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    51fc:	2b19      	cmp	r3, #25
    51fe:	d803      	bhi.n	5208 <_strtol_l.isra.0+0xac>
    5200:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    5204:	429d      	cmp	r5, r3
    5206:	dcf0      	bgt.n	51ea <_strtol_l.isra.0+0x8e>
    5208:	1c4b      	adds	r3, r1, #1
    520a:	d015      	beq.n	5238 <_strtol_l.isra.0+0xdc>
    520c:	f1bc 0f00 	cmp.w	ip, #0
    5210:	d110      	bne.n	5234 <_strtol_l.isra.0+0xd8>
    5212:	b14e      	cbz	r6, 5228 <_strtol_l.isra.0+0xcc>
    5214:	b9e1      	cbnz	r1, 5250 <_strtol_l.isra.0+0xf4>
    5216:	6037      	str	r7, [r6, #0]
    5218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    521c:	459a      	cmp	sl, r3
    521e:	dad3      	bge.n	51c8 <_strtol_l.isra.0+0x6c>
    5220:	4670      	mov	r0, lr
    5222:	f04f 31ff 	mov.w	r1, #4294967295
    5226:	e7d2      	b.n	51ce <_strtol_l.isra.0+0x72>
    5228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    522c:	2a30      	cmp	r2, #48	; 0x30
    522e:	d01a      	beq.n	5266 <_strtol_l.isra.0+0x10a>
    5230:	250a      	movs	r5, #10
    5232:	e7b9      	b.n	51a8 <_strtol_l.isra.0+0x4c>
    5234:	4240      	negs	r0, r0
    5236:	e7ec      	b.n	5212 <_strtol_l.isra.0+0xb6>
    5238:	f1bc 0f00 	cmp.w	ip, #0
    523c:	f04f 0322 	mov.w	r3, #34	; 0x22
    5240:	bf0c      	ite	eq
    5242:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    5246:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    524a:	f8c8 3000 	str.w	r3, [r8]
    524e:	b1f6      	cbz	r6, 528e <_strtol_l.isra.0+0x132>
    5250:	1e67      	subs	r7, r4, #1
    5252:	6037      	str	r7, [r6, #0]
    5254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5258:	f10b 0402 	add.w	r4, fp, #2
    525c:	f89b 2001 	ldrb.w	r2, [fp, #1]
    5260:	f04f 0c01 	mov.w	ip, #1
    5264:	e79c      	b.n	51a0 <_strtol_l.isra.0+0x44>
    5266:	7823      	ldrb	r3, [r4, #0]
    5268:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    526c:	2b58      	cmp	r3, #88	; 0x58
    526e:	d008      	beq.n	5282 <_strtol_l.isra.0+0x126>
    5270:	2508      	movs	r5, #8
    5272:	e799      	b.n	51a8 <_strtol_l.isra.0+0x4c>
    5274:	2a30      	cmp	r2, #48	; 0x30
    5276:	d197      	bne.n	51a8 <_strtol_l.isra.0+0x4c>
    5278:	7823      	ldrb	r3, [r4, #0]
    527a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    527e:	2b58      	cmp	r3, #88	; 0x58
    5280:	d192      	bne.n	51a8 <_strtol_l.isra.0+0x4c>
    5282:	f04f 0910 	mov.w	r9, #16
    5286:	7862      	ldrb	r2, [r4, #1]
    5288:	464d      	mov	r5, r9
    528a:	3402      	adds	r4, #2
    528c:	e78d      	b.n	51aa <_strtol_l.isra.0+0x4e>
    528e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5292:	bf00      	nop

00005294 <strtol>:
    5294:	b530      	push	{r4, r5, lr}
    5296:	4c08      	ldr	r4, [pc, #32]	; (52b8 <strtol+0x24>)
    5298:	4b08      	ldr	r3, [pc, #32]	; (52bc <strtol+0x28>)
    529a:	6825      	ldr	r5, [r4, #0]
    529c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    529e:	b083      	sub	sp, #12
    52a0:	2c00      	cmp	r4, #0
    52a2:	bf08      	it	eq
    52a4:	461c      	moveq	r4, r3
    52a6:	9400      	str	r4, [sp, #0]
    52a8:	4613      	mov	r3, r2
    52aa:	460a      	mov	r2, r1
    52ac:	4601      	mov	r1, r0
    52ae:	4628      	mov	r0, r5
    52b0:	f7ff ff54 	bl	515c <_strtol_l.isra.0>
    52b4:	b003      	add	sp, #12
    52b6:	bd30      	pop	{r4, r5, pc}
    52b8:	1fff0da0 	.word	0x1fff0da0
    52bc:	1fff0da4 	.word	0x1fff0da4

000052c0 <__ascii_wctomb>:
    52c0:	b121      	cbz	r1, 52cc <__ascii_wctomb+0xc>
    52c2:	2aff      	cmp	r2, #255	; 0xff
    52c4:	d804      	bhi.n	52d0 <__ascii_wctomb+0x10>
    52c6:	700a      	strb	r2, [r1, #0]
    52c8:	2001      	movs	r0, #1
    52ca:	4770      	bx	lr
    52cc:	4608      	mov	r0, r1
    52ce:	4770      	bx	lr
    52d0:	238a      	movs	r3, #138	; 0x8a
    52d2:	6003      	str	r3, [r0, #0]
    52d4:	f04f 30ff 	mov.w	r0, #4294967295
    52d8:	4770      	bx	lr
    52da:	bf00      	nop

000052dc <register_fini>:
    52dc:	4b02      	ldr	r3, [pc, #8]	; (52e8 <register_fini+0xc>)
    52de:	b113      	cbz	r3, 52e6 <register_fini+0xa>
    52e0:	4802      	ldr	r0, [pc, #8]	; (52ec <register_fini+0x10>)
    52e2:	f000 b805 	b.w	52f0 <atexit>
    52e6:	4770      	bx	lr
    52e8:	00000000 	.word	0x00000000
    52ec:	000052fd 	.word	0x000052fd

000052f0 <atexit>:
    52f0:	2300      	movs	r3, #0
    52f2:	4601      	mov	r1, r0
    52f4:	461a      	mov	r2, r3
    52f6:	4618      	mov	r0, r3
    52f8:	f000 b94a 	b.w	5590 <__register_exitproc>

000052fc <__libc_fini_array>:
    52fc:	b538      	push	{r3, r4, r5, lr}
    52fe:	4d07      	ldr	r5, [pc, #28]	; (531c <__libc_fini_array+0x20>)
    5300:	4c07      	ldr	r4, [pc, #28]	; (5320 <__libc_fini_array+0x24>)
    5302:	1b2c      	subs	r4, r5, r4
    5304:	10a4      	asrs	r4, r4, #2
    5306:	d005      	beq.n	5314 <__libc_fini_array+0x18>
    5308:	3c01      	subs	r4, #1
    530a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    530e:	4798      	blx	r3
    5310:	2c00      	cmp	r4, #0
    5312:	d1f9      	bne.n	5308 <__libc_fini_array+0xc>
    5314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5318:	f000 bd9c 	b.w	5e54 <__init_array_end>
	...

00005324 <_malloc_trim_r>:
    5324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5326:	4f23      	ldr	r7, [pc, #140]	; (53b4 <_malloc_trim_r+0x90>)
    5328:	460c      	mov	r4, r1
    532a:	4606      	mov	r6, r0
    532c:	f7ff fe88 	bl	5040 <__malloc_lock>
    5330:	68bb      	ldr	r3, [r7, #8]
    5332:	685d      	ldr	r5, [r3, #4]
    5334:	f025 0503 	bic.w	r5, r5, #3
    5338:	1b29      	subs	r1, r5, r4
    533a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    533e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5342:	f021 010f 	bic.w	r1, r1, #15
    5346:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    534a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    534e:	db07      	blt.n	5360 <_malloc_trim_r+0x3c>
    5350:	2100      	movs	r1, #0
    5352:	4630      	mov	r0, r6
    5354:	f7ff fe78 	bl	5048 <_sbrk_r>
    5358:	68bb      	ldr	r3, [r7, #8]
    535a:	442b      	add	r3, r5
    535c:	4298      	cmp	r0, r3
    535e:	d004      	beq.n	536a <_malloc_trim_r+0x46>
    5360:	4630      	mov	r0, r6
    5362:	f7ff fe6f 	bl	5044 <__malloc_unlock>
    5366:	2000      	movs	r0, #0
    5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    536a:	4261      	negs	r1, r4
    536c:	4630      	mov	r0, r6
    536e:	f7ff fe6b 	bl	5048 <_sbrk_r>
    5372:	3001      	adds	r0, #1
    5374:	d00d      	beq.n	5392 <_malloc_trim_r+0x6e>
    5376:	4b10      	ldr	r3, [pc, #64]	; (53b8 <_malloc_trim_r+0x94>)
    5378:	68ba      	ldr	r2, [r7, #8]
    537a:	6819      	ldr	r1, [r3, #0]
    537c:	1b2d      	subs	r5, r5, r4
    537e:	f045 0501 	orr.w	r5, r5, #1
    5382:	4630      	mov	r0, r6
    5384:	1b09      	subs	r1, r1, r4
    5386:	6055      	str	r5, [r2, #4]
    5388:	6019      	str	r1, [r3, #0]
    538a:	f7ff fe5b 	bl	5044 <__malloc_unlock>
    538e:	2001      	movs	r0, #1
    5390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5392:	2100      	movs	r1, #0
    5394:	4630      	mov	r0, r6
    5396:	f7ff fe57 	bl	5048 <_sbrk_r>
    539a:	68ba      	ldr	r2, [r7, #8]
    539c:	1a83      	subs	r3, r0, r2
    539e:	2b0f      	cmp	r3, #15
    53a0:	ddde      	ble.n	5360 <_malloc_trim_r+0x3c>
    53a2:	4c06      	ldr	r4, [pc, #24]	; (53bc <_malloc_trim_r+0x98>)
    53a4:	4904      	ldr	r1, [pc, #16]	; (53b8 <_malloc_trim_r+0x94>)
    53a6:	6824      	ldr	r4, [r4, #0]
    53a8:	f043 0301 	orr.w	r3, r3, #1
    53ac:	1b00      	subs	r0, r0, r4
    53ae:	6053      	str	r3, [r2, #4]
    53b0:	6008      	str	r0, [r1, #0]
    53b2:	e7d5      	b.n	5360 <_malloc_trim_r+0x3c>
    53b4:	1fff0f10 	.word	0x1fff0f10
    53b8:	1fff154c 	.word	0x1fff154c
    53bc:	1fff131c 	.word	0x1fff131c

000053c0 <_free_r>:
    53c0:	2900      	cmp	r1, #0
    53c2:	d045      	beq.n	5450 <_free_r+0x90>
    53c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53c8:	460d      	mov	r5, r1
    53ca:	4680      	mov	r8, r0
    53cc:	f7ff fe38 	bl	5040 <__malloc_lock>
    53d0:	f855 7c04 	ldr.w	r7, [r5, #-4]
    53d4:	496a      	ldr	r1, [pc, #424]	; (5580 <_free_r+0x1c0>)
    53d6:	f027 0301 	bic.w	r3, r7, #1
    53da:	f1a5 0408 	sub.w	r4, r5, #8
    53de:	18e2      	adds	r2, r4, r3
    53e0:	688e      	ldr	r6, [r1, #8]
    53e2:	6850      	ldr	r0, [r2, #4]
    53e4:	42b2      	cmp	r2, r6
    53e6:	f020 0003 	bic.w	r0, r0, #3
    53ea:	d062      	beq.n	54b2 <_free_r+0xf2>
    53ec:	07fe      	lsls	r6, r7, #31
    53ee:	6050      	str	r0, [r2, #4]
    53f0:	d40b      	bmi.n	540a <_free_r+0x4a>
    53f2:	f855 7c08 	ldr.w	r7, [r5, #-8]
    53f6:	1be4      	subs	r4, r4, r7
    53f8:	f101 0e08 	add.w	lr, r1, #8
    53fc:	68a5      	ldr	r5, [r4, #8]
    53fe:	4575      	cmp	r5, lr
    5400:	443b      	add	r3, r7
    5402:	d06f      	beq.n	54e4 <_free_r+0x124>
    5404:	68e7      	ldr	r7, [r4, #12]
    5406:	60ef      	str	r7, [r5, #12]
    5408:	60bd      	str	r5, [r7, #8]
    540a:	1815      	adds	r5, r2, r0
    540c:	686d      	ldr	r5, [r5, #4]
    540e:	07ed      	lsls	r5, r5, #31
    5410:	d542      	bpl.n	5498 <_free_r+0xd8>
    5412:	f043 0201 	orr.w	r2, r3, #1
    5416:	6062      	str	r2, [r4, #4]
    5418:	50e3      	str	r3, [r4, r3]
    541a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    541e:	d218      	bcs.n	5452 <_free_r+0x92>
    5420:	08db      	lsrs	r3, r3, #3
    5422:	1c5a      	adds	r2, r3, #1
    5424:	684d      	ldr	r5, [r1, #4]
    5426:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    542a:	60a7      	str	r7, [r4, #8]
    542c:	2001      	movs	r0, #1
    542e:	109b      	asrs	r3, r3, #2
    5430:	fa00 f303 	lsl.w	r3, r0, r3
    5434:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5438:	431d      	orrs	r5, r3
    543a:	3808      	subs	r0, #8
    543c:	60e0      	str	r0, [r4, #12]
    543e:	604d      	str	r5, [r1, #4]
    5440:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    5444:	60fc      	str	r4, [r7, #12]
    5446:	4640      	mov	r0, r8
    5448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    544c:	f7ff bdfa 	b.w	5044 <__malloc_unlock>
    5450:	4770      	bx	lr
    5452:	0a5a      	lsrs	r2, r3, #9
    5454:	2a04      	cmp	r2, #4
    5456:	d853      	bhi.n	5500 <_free_r+0x140>
    5458:	099a      	lsrs	r2, r3, #6
    545a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    545e:	007f      	lsls	r7, r7, #1
    5460:	f102 0538 	add.w	r5, r2, #56	; 0x38
    5464:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    5468:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    546c:	4944      	ldr	r1, [pc, #272]	; (5580 <_free_r+0x1c0>)
    546e:	3808      	subs	r0, #8
    5470:	4290      	cmp	r0, r2
    5472:	d04d      	beq.n	5510 <_free_r+0x150>
    5474:	6851      	ldr	r1, [r2, #4]
    5476:	f021 0103 	bic.w	r1, r1, #3
    547a:	428b      	cmp	r3, r1
    547c:	d202      	bcs.n	5484 <_free_r+0xc4>
    547e:	6892      	ldr	r2, [r2, #8]
    5480:	4290      	cmp	r0, r2
    5482:	d1f7      	bne.n	5474 <_free_r+0xb4>
    5484:	68d0      	ldr	r0, [r2, #12]
    5486:	60e0      	str	r0, [r4, #12]
    5488:	60a2      	str	r2, [r4, #8]
    548a:	6084      	str	r4, [r0, #8]
    548c:	60d4      	str	r4, [r2, #12]
    548e:	4640      	mov	r0, r8
    5490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5494:	f7ff bdd6 	b.w	5044 <__malloc_unlock>
    5498:	6895      	ldr	r5, [r2, #8]
    549a:	4f3a      	ldr	r7, [pc, #232]	; (5584 <_free_r+0x1c4>)
    549c:	42bd      	cmp	r5, r7
    549e:	4403      	add	r3, r0
    54a0:	d03f      	beq.n	5522 <_free_r+0x162>
    54a2:	68d0      	ldr	r0, [r2, #12]
    54a4:	60e8      	str	r0, [r5, #12]
    54a6:	f043 0201 	orr.w	r2, r3, #1
    54aa:	6085      	str	r5, [r0, #8]
    54ac:	6062      	str	r2, [r4, #4]
    54ae:	50e3      	str	r3, [r4, r3]
    54b0:	e7b3      	b.n	541a <_free_r+0x5a>
    54b2:	07ff      	lsls	r7, r7, #31
    54b4:	4403      	add	r3, r0
    54b6:	d407      	bmi.n	54c8 <_free_r+0x108>
    54b8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    54bc:	1aa4      	subs	r4, r4, r2
    54be:	4413      	add	r3, r2
    54c0:	68a0      	ldr	r0, [r4, #8]
    54c2:	68e2      	ldr	r2, [r4, #12]
    54c4:	60c2      	str	r2, [r0, #12]
    54c6:	6090      	str	r0, [r2, #8]
    54c8:	4a2f      	ldr	r2, [pc, #188]	; (5588 <_free_r+0x1c8>)
    54ca:	6812      	ldr	r2, [r2, #0]
    54cc:	f043 0001 	orr.w	r0, r3, #1
    54d0:	4293      	cmp	r3, r2
    54d2:	6060      	str	r0, [r4, #4]
    54d4:	608c      	str	r4, [r1, #8]
    54d6:	d3b6      	bcc.n	5446 <_free_r+0x86>
    54d8:	4b2c      	ldr	r3, [pc, #176]	; (558c <_free_r+0x1cc>)
    54da:	4640      	mov	r0, r8
    54dc:	6819      	ldr	r1, [r3, #0]
    54de:	f7ff ff21 	bl	5324 <_malloc_trim_r>
    54e2:	e7b0      	b.n	5446 <_free_r+0x86>
    54e4:	1811      	adds	r1, r2, r0
    54e6:	6849      	ldr	r1, [r1, #4]
    54e8:	07c9      	lsls	r1, r1, #31
    54ea:	d444      	bmi.n	5576 <_free_r+0x1b6>
    54ec:	6891      	ldr	r1, [r2, #8]
    54ee:	68d2      	ldr	r2, [r2, #12]
    54f0:	60ca      	str	r2, [r1, #12]
    54f2:	4403      	add	r3, r0
    54f4:	f043 0001 	orr.w	r0, r3, #1
    54f8:	6091      	str	r1, [r2, #8]
    54fa:	6060      	str	r0, [r4, #4]
    54fc:	50e3      	str	r3, [r4, r3]
    54fe:	e7a2      	b.n	5446 <_free_r+0x86>
    5500:	2a14      	cmp	r2, #20
    5502:	d817      	bhi.n	5534 <_free_r+0x174>
    5504:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    5508:	007f      	lsls	r7, r7, #1
    550a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    550e:	e7a9      	b.n	5464 <_free_r+0xa4>
    5510:	10aa      	asrs	r2, r5, #2
    5512:	684b      	ldr	r3, [r1, #4]
    5514:	2501      	movs	r5, #1
    5516:	fa05 f202 	lsl.w	r2, r5, r2
    551a:	4313      	orrs	r3, r2
    551c:	604b      	str	r3, [r1, #4]
    551e:	4602      	mov	r2, r0
    5520:	e7b1      	b.n	5486 <_free_r+0xc6>
    5522:	f043 0201 	orr.w	r2, r3, #1
    5526:	614c      	str	r4, [r1, #20]
    5528:	610c      	str	r4, [r1, #16]
    552a:	60e5      	str	r5, [r4, #12]
    552c:	60a5      	str	r5, [r4, #8]
    552e:	6062      	str	r2, [r4, #4]
    5530:	50e3      	str	r3, [r4, r3]
    5532:	e788      	b.n	5446 <_free_r+0x86>
    5534:	2a54      	cmp	r2, #84	; 0x54
    5536:	d806      	bhi.n	5546 <_free_r+0x186>
    5538:	0b1a      	lsrs	r2, r3, #12
    553a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    553e:	007f      	lsls	r7, r7, #1
    5540:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5544:	e78e      	b.n	5464 <_free_r+0xa4>
    5546:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    554a:	d806      	bhi.n	555a <_free_r+0x19a>
    554c:	0bda      	lsrs	r2, r3, #15
    554e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5552:	007f      	lsls	r7, r7, #1
    5554:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5558:	e784      	b.n	5464 <_free_r+0xa4>
    555a:	f240 5054 	movw	r0, #1364	; 0x554
    555e:	4282      	cmp	r2, r0
    5560:	d806      	bhi.n	5570 <_free_r+0x1b0>
    5562:	0c9a      	lsrs	r2, r3, #18
    5564:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5568:	007f      	lsls	r7, r7, #1
    556a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    556e:	e779      	b.n	5464 <_free_r+0xa4>
    5570:	27fe      	movs	r7, #254	; 0xfe
    5572:	257e      	movs	r5, #126	; 0x7e
    5574:	e776      	b.n	5464 <_free_r+0xa4>
    5576:	f043 0201 	orr.w	r2, r3, #1
    557a:	6062      	str	r2, [r4, #4]
    557c:	50e3      	str	r3, [r4, r3]
    557e:	e762      	b.n	5446 <_free_r+0x86>
    5580:	1fff0f10 	.word	0x1fff0f10
    5584:	1fff0f18 	.word	0x1fff0f18
    5588:	1fff1318 	.word	0x1fff1318
    558c:	1fff1548 	.word	0x1fff1548

00005590 <__register_exitproc>:
    5590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5594:	4c25      	ldr	r4, [pc, #148]	; (562c <__register_exitproc+0x9c>)
    5596:	6825      	ldr	r5, [r4, #0]
    5598:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    559c:	4606      	mov	r6, r0
    559e:	4688      	mov	r8, r1
    55a0:	4692      	mov	sl, r2
    55a2:	4699      	mov	r9, r3
    55a4:	b3c4      	cbz	r4, 5618 <__register_exitproc+0x88>
    55a6:	6860      	ldr	r0, [r4, #4]
    55a8:	281f      	cmp	r0, #31
    55aa:	dc17      	bgt.n	55dc <__register_exitproc+0x4c>
    55ac:	1c43      	adds	r3, r0, #1
    55ae:	b176      	cbz	r6, 55ce <__register_exitproc+0x3e>
    55b0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    55b4:	2201      	movs	r2, #1
    55b6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    55ba:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    55be:	4082      	lsls	r2, r0
    55c0:	4311      	orrs	r1, r2
    55c2:	2e02      	cmp	r6, #2
    55c4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    55c8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    55cc:	d01e      	beq.n	560c <__register_exitproc+0x7c>
    55ce:	3002      	adds	r0, #2
    55d0:	6063      	str	r3, [r4, #4]
    55d2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    55d6:	2000      	movs	r0, #0
    55d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55dc:	4b14      	ldr	r3, [pc, #80]	; (5630 <__register_exitproc+0xa0>)
    55de:	b303      	cbz	r3, 5622 <__register_exitproc+0x92>
    55e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    55e4:	f7ff fa56 	bl	4a94 <malloc>
    55e8:	4604      	mov	r4, r0
    55ea:	b1d0      	cbz	r0, 5622 <__register_exitproc+0x92>
    55ec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    55f0:	2700      	movs	r7, #0
    55f2:	e880 0088 	stmia.w	r0, {r3, r7}
    55f6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    55fa:	4638      	mov	r0, r7
    55fc:	2301      	movs	r3, #1
    55fe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    5602:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    5606:	2e00      	cmp	r6, #0
    5608:	d0e1      	beq.n	55ce <__register_exitproc+0x3e>
    560a:	e7d1      	b.n	55b0 <__register_exitproc+0x20>
    560c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    5610:	430a      	orrs	r2, r1
    5612:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    5616:	e7da      	b.n	55ce <__register_exitproc+0x3e>
    5618:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    561c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    5620:	e7c1      	b.n	55a6 <__register_exitproc+0x16>
    5622:	f04f 30ff 	mov.w	r0, #4294967295
    5626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    562a:	bf00      	nop
    562c:	00005d20 	.word	0x00005d20
    5630:	00004a95 	.word	0x00004a95
    5634:	50444d56 	.word	0x50444d56
    5638:	7c315f56 	.word	0x7c315f56
    563c:	4d565f31 	.word	0x4d565f31
    5640:	0a565044 	.word	0x0a565044
    5644:	00000000 	.word	0x00000000
    5648:	50444d56 	.word	0x50444d56
    564c:	00005f52 	.word	0x00005f52
    5650:	74696e49 	.word	0x74696e49
    5654:	696c6169 	.word	0x696c6169
    5658:	6974617a 	.word	0x6974617a
    565c:	6f206e6f 	.word	0x6f206e6f
    5660:	68742066 	.word	0x68742066
    5664:	65732065 	.word	0x65732065
    5668:	726f736e 	.word	0x726f736e
    566c:	74657220 	.word	0x74657220
    5670:	656e7275 	.word	0x656e7275
    5674:	00203a64 	.word	0x00203a64
    5678:	69797254 	.word	0x69797254
    567c:	6120676e 	.word	0x6120676e
    5680:	6e696167 	.word	0x6e696167
    5684:	002e2e2e 	.word	0x002e2e2e
    5688:	736e6553 	.word	0x736e6553
    568c:	3120726f 	.word	0x3120726f
    5690:	696e4920 	.word	0x696e4920
    5694:	6c616974 	.word	0x6c616974
    5698:	64657369 	.word	0x64657369
    569c:	00000000 	.word	0x00000000
    56a0:	74696e49 	.word	0x74696e49
    56a4:	696c6169 	.word	0x696c6169
    56a8:	6974617a 	.word	0x6974617a
    56ac:	6f206e6f 	.word	0x6f206e6f
    56b0:	68742066 	.word	0x68742066
    56b4:	65732065 	.word	0x65732065
    56b8:	726f736e 	.word	0x726f736e
    56bc:	72203220 	.word	0x72203220
    56c0:	72757465 	.word	0x72757465
    56c4:	3a64656e 	.word	0x3a64656e
    56c8:	00000020 	.word	0x00000020
    56cc:	736e6553 	.word	0x736e6553
    56d0:	3220726f 	.word	0x3220726f
    56d4:	696e4920 	.word	0x696e4920
    56d8:	6c616974 	.word	0x6c616974
    56dc:	64657369 	.word	0x64657369
    56e0:	00000000 	.word	0x00000000
    56e4:	00000030 	.word	0x00000030
    56e8:	0000002d 	.word	0x0000002d
    56ec:	2e574152 	.word	0x2e574152
    56f0:	63634120 	.word	0x63634120
    56f4:	00205b20 	.word	0x00205b20
    56f8:	0000202c 	.word	0x0000202c
    56fc:	202c5d20 	.word	0x202c5d20
    5700:	20727947 	.word	0x20727947
    5704:	0000205b 	.word	0x0000205b
    5708:	202c5d20 	.word	0x202c5d20
    570c:	2067614d 	.word	0x2067614d
    5710:	0000205b 	.word	0x0000205b
    5714:	202c5d20 	.word	0x202c5d20
    5718:	20706d54 	.word	0x20706d54
    571c:	0000205b 	.word	0x0000205b
    5720:	00005d20 	.word	0x00005d20
    5724:	6c616353 	.word	0x6c616353
    5728:	202e6465 	.word	0x202e6465
    572c:	20636341 	.word	0x20636341
    5730:	29676d28 	.word	0x29676d28
    5734:	00205b20 	.word	0x00205b20
    5738:	202c5d20 	.word	0x202c5d20
    573c:	20727947 	.word	0x20727947
    5740:	53504428 	.word	0x53504428
    5744:	205b2029 	.word	0x205b2029
    5748:	00000000 	.word	0x00000000
    574c:	202c5d20 	.word	0x202c5d20
    5750:	2067614d 	.word	0x2067614d
    5754:	29547528 	.word	0x29547528
    5758:	00205b20 	.word	0x00205b20
    575c:	202c5d20 	.word	0x202c5d20
    5760:	20706d54 	.word	0x20706d54
    5764:	20294328 	.word	0x20294328
    5768:	0000205b 	.word	0x0000205b
    576c:	0000007c 	.word	0x0000007c
    5770:	6e697250 	.word	0x6e697250
    5774:	676e6974 	.word	0x676e6974
    5778:	6f726620 	.word	0x6f726620
    577c:	6553206d 	.word	0x6553206d
    5780:	726f736e 	.word	0x726f736e
    5784:	00003120 	.word	0x00003120
    5788:	74696157 	.word	0x74696157
    578c:	20676e69 	.word	0x20676e69
    5790:	20726f66 	.word	0x20726f66
    5794:	61746164 	.word	0x61746164
    5798:	00000000 	.word	0x00000000
    579c:	6e697250 	.word	0x6e697250
    57a0:	676e6974 	.word	0x676e6974
    57a4:	6f726620 	.word	0x6f726620
    57a8:	6553206d 	.word	0x6553206d
    57ac:	726f736e 	.word	0x726f736e
    57b0:	00003220 	.word	0x00003220
    57b4:	74696157 	.word	0x74696157
    57b8:	20676e69 	.word	0x20676e69
    57bc:	20726f66 	.word	0x20726f66
    57c0:	61746164 	.word	0x61746164
    57c4:	ff003220 	.word	0xff003220
    57c8:	50444d56 	.word	0x50444d56
    57cc:	00005f45 	.word	0x00005f45
    57d0:	003a323a 	.word	0x003a323a
    57d4:	0000003a 	.word	0x0000003a
    57d8:	444d565f 	.word	0x444d565f
    57dc:	00004550 	.word	0x00004550
    57e0:	50444d56 	.word	0x50444d56
    57e4:	00005f43 	.word	0x00005f43
    57e8:	444d565f 	.word	0x444d565f
    57ec:	00004350 	.word	0x00004350
    57f0:	6f727245 	.word	0x6f727245
    57f4:	41203a72 	.word	0x41203a72
    57f8:	6d657474 	.word	0x6d657474
    57fc:	74207470 	.word	0x74207470
    5800:	6573206f 	.word	0x6573206f
    5804:	20612074 	.word	0x20612074
    5808:	64616572 	.word	0x64616572
    580c:	6c6e6f2d 	.word	0x6c6e6f2d
    5810:	61762079 	.word	0x61762079
    5814:	62616972 	.word	0x62616972
    5818:	6f20656c 	.word	0x6f20656c
    581c:	61642072 	.word	0x61642072
    5820:	74206174 	.word	0x74206174
    5824:	20657079 	.word	0x20657079
    5828:	20746f6e 	.word	0x20746f6e
    582c:	70707573 	.word	0x70707573
    5830:	6574726f 	.word	0x6574726f
    5834:	000a0d64 	.word	0x000a0d64

00005838 <CSWTCH.39>:
    5838:	00005868 00005878 00005888 00005898     hX..xX...X...X..
    5848:	000058a8 000058b4 000058c4 000058d4     .X...X...X...X..
    5858:	6e6b6e55 206e776f 74617453 00007375     Unknown Status..
    5868:	206c6c41 77207369 2e6c6c65 00000000     All is well.....
    5878:	656e6547 206c6172 6f727245 00000072     General Error...
    5888:	20746f4e 6c706d49 6e656d65 00646574     Not Implemented.
    5898:	61726150 6574656d 72452072 00726f72     Parameter Error.
    58a8:	6e6f7257 44492067 00000000 61766e49     Wrong ID....Inva
    58b8:	2064696c 736e6553 0000726f 61746144     lid Sensor..Data
    58c8:	646e5520 6c667265 0000776f 736e6553      Underflow..Sens
    58d8:	4e20726f 5320746f 6f707075 64657472     or Not Supported
    58e8:	ffffff00                                ....

000058ec <TwoWire::i2c0_hardware>:
    58ec:	40048034 00000040 08221112 05020230     4..@@.....".0...
    58fc:	10130207 022f0721 02070502 00000018     ....!./.........

0000590c <TwoWire::i2c1_hardware>:
    590c:	40048034 00000080 ffff3a26 000602ff     4..@....&:......
    591c:	3b250000 02ffffff 00000006 00000019     ..%;............

0000592c <TwoWire::i2c2_hardware>:
    592c:	40048028 00000040 ffffff04 000005ff     (..@@...........
    593c:	1a030000 05ffffff 00000005 0000004a     ............J...

0000594c <vtable for TwoWire>:
	...
    5954:	000021e1 000021a5 00002179 000021a1     .!...!..y!...!..
    5964:	0000217d 00000ced 00002189              }!.......!..

00005970 <SPISettings::ctar_div_table>:
    5970:	00030002 00050004 00080006 000c000a     ................
    5980:	00140010 00200018 00380028 00600040     ...... .(.8.@.`.
    5990:	00c00080 01800100 02800200 ffff0300     ................

000059a0 <SPIClass::spi0_hardware>:
    59a0:	4004803c 00001000 00001a04 00007fff     <..@............
    59b0:	00000e0f 00002379 ff27080c 00000200     ....y#....'.....
    59c0:	00000200 00000200 00000000 ff1c070b     ................
    59d0:	00000200 00000200 00000200 00000000     ................
    59e0:	001b0e0d 00000200 00000200 00000200     ................
    59f0:	0609020a 16151714 002d1a0f 00000200     ..........-.....
    5a00:	00000200 00000200 00000200 00000200     ................
    5a10:	00000200 00000200 00000200 00000200     ................
    5a20:	00000200 00000300 02020101 08080404     ................
    5a30:	00200110                                .. .

00005a34 <SPISettings::ctar_clock_table>:
    5a34:	80000000 80010000 00000000 80020000     ................
    5a44:	00010000 00001001 00020000 00011001     ................
    5a54:	00002003 00020001 00012003 00003004     . ....... ...0..
    5a64:	00022003 00032003 00004005 00014005     . ... ...@...@..
    5a74:	00005006 00015006 00006007 00016007     .P...P...`...`..
    5a84:	00007008 00026007 00017008              .p...`...p..

00005a90 <digital_pin_to_info_PGM>:
    5a90:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    5aa0:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    5ab0:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    5ac0:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    5ad0:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    5ae0:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    5af0:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    5b00:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    5b10:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    5b20:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    5b30:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    5b40:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    5b50:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    5b60:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    5b70:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    5b80:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    5b90:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    5ba0:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    5bb0:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    5bc0:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    5bd0:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    5be0:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    5bf0:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    5c00:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    5c10:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    5c20:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    5c30:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    5c40:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    5c50:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    5c60:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    5c70:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    5c80:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@
    5c90:	ffff0a0d 006e616e 0066766f 00666e69     ....nan.ovf.inf.

00005ca0 <vtable for usb_serial_class>:
	...
    5ca8:	00003e71 00003e69 00003e65 00003e61     q>..i>..e>..a>..
    5cb8:	00003e5d 00003e59 00003e55 00003e51     ]>..Y>..U>..Q>..

00005cc8 <usb_endpoint_config_table>:
    5cc8:	15191500                                ....

00005ccc <usb_descriptor_list>:
    5ccc:	00000100 1fff08d0 00000012 00000200     ................
    5cdc:	1fff08fc 00000043 00000300 1fff0958     ....C.......X...
    5cec:	00000000 04090301 1fff08e4 00000000     ................
    5cfc:	04090302 1fff0940 00000000 04090303     ....@...........
    5d0c:	1fff095c 00000000 00000000 00000000     \...............
    5d1c:	00000000                                ....

00005d20 <_global_impure_ptr>:
    5d20:	1fff0978 00000043 49534f50 00000058     x...C...POSIX...
    5d30:	0000002e                                ....

00005d34 <_ctype_>:
    5d34:	20202000 20202020 28282020 20282828     .         ((((( 
    5d44:	20202020 20202020 20202020 20202020                     
    5d54:	10108820 10101010 10101010 10101010      ...............
    5d64:	04040410 04040404 10040404 10101010     ................
    5d74:	41411010 41414141 01010101 01010101     ..AAAAAA........
    5d84:	01010101 01010101 01010101 10101010     ................
    5d94:	42421010 42424242 02020202 02020202     ..BBBBBB........
    5da4:	02020202 02020202 02020202 10101010     ................
    5db4:	00000020 00000000 00000000 00000000      ...............
	...
    5e34:	ffffff00                                ....

00005e38 <_init>:
    5e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e3a:	bf00      	nop
    5e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5e3e:	bc08      	pop	{r3}
    5e40:	469e      	mov	lr, r3
    5e42:	4770      	bx	lr

00005e44 <__init_array_start>:
    5e44:	000052dd 	.word	0x000052dd

00005e48 <__frame_dummy_init_array_entry>:
    5e48:	00000435 00000925 00000cd9              5...%.......

Disassembly of section .fini:

00005e54 <_fini>:
    5e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e56:	bf00      	nop
